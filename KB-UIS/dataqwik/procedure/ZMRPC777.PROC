//DO NOT MODIFY  MRPC for WEBSERVICE|ZMRPC777|||||||1
ZMRPC777(return,versn,input,interfac)
	/*
	 ORIG: Chawapol - 17/12/2013
	 DESC: 

	 ---- Comments --------------------------------------------------------
	 Argument           
	 	return   : output message
                versn    : 1                               
                input    : input message
                interfac : interface (optional)

         quit 

         Procedure Reference 777            
	 
	 call routine from ZUTBLEXTSRV
	 if ZUTBLEXTSRV.TPAPPLY  ---> call MAIN^ROUTINE		//main function
	 					return string from MAIN for log@RQLOG output
	 				   RQIN^ROUTINE		//log RQLOG input
	 				   ZCREJMSG^ROUTINE	//create reject message
	 
	 if 'ZUTBLEXTSRV.TPAPPLY ---> call MAIN^ROUTINE       
	 					return null   
	 				   ZCREJMSG^ROUTINE	//create reject message 
	
	 ---- Revision History ------------------------------------------------
	
	 ****** Consider using setAuditFlag for all objects in this procedure
	   example :do dep.setAuditFlag(1)
	
	*/
	
	catch error {
                set ET=error.type
                set RM="[MAIN]"_error.description
                set FROM=error.thrownAt
                if error.type["%GTM-" do ZE^UTLERR
                do EXC
                quit
        }
 
        //Drop null message (no reply)
        if $G(input)="" quit ""
	
	do Runtime.rollback()
	new INTRFACE,MSGID,OM,ERR,ERRD
 	set (ERR,ERRD)=""

	set ER=0
	set RM=""
	set OM=""
	if 'interfac.get().isNull() set INTRFACE=interfac
	else  set INTRFACE="JDBC777"
	
	type String ZCDT,ZCT,ZCTM,ZPCID
	// Create NSMKEY
	//-------------------------------------------------------------------
	do Runtime.start("CS")
	set ZCDT=$$DAT^%ZM(%CurrentDate,"YYMMDD")	//current date
	set ZCT=$$TIM^%ZM(%CurrentTime,"2460SS")	//time sec
	set ZCTM=$$GETTIM^%ZFUNC()
	set ZCTM=$E(ZCTM,$L(ZCTM)-5,$L(ZCTM)-3)		//time milisec
	set ZPCID=%ProcessID
	
	set ZNSMKEY=ZCDT_ZCT_ZCTM_ZPCID.zero(10)
	
	do NSMLOG^ZITFUTL(INTRFACE,ZNSMKEY,input,1,)	//log input NSMLOG
	
	do Runtime.commit()
	//--------------------------------------------------------------------
        
	do PROC(input,.OM)
	
	// Log output Messages. If TRollback occured in application, issue new TStart
        if $TLevel=0 do {  if 1
                TStart ():transactionid="CS"
                do NSMLOG^ZITFUTL(INTRFACE,ZNSMKEY,OM,2,$G(ERR))
                TCommit:$TLevel
        }
        else  do NSMLOG^ZITFUTL(INTRFACE,ZNSMKEY,OM,2,$G(ERR))
	
	set return=$$V2LV^MSG(OM)
	
	if ER&('RM.get().isNull()) quit $$ERRMSG^PBSUTL(RM)
	else  set ER=0
	
	quit ""

	
PROC(IM,OM)
        catch error {
                set ET=error.type
                set ER=1
                set RM="[PROC]"_error.description
                set FROM=error.thrownAt
                if error.type["%GTM-" do ZE^UTLERR
                do EXC
                
                if 'ZPROCNM.get().isNull() do {
        		set ZPGMR="ZCREJMSG"_ZPROCNM_"(1,"""_IM_""",.OM,20,""E9999"")"
        		do @ZPGMR
        	} 
                quit
        }
 
 	type String ZFCD, ZPROCNM, ZPGM, ZPGMR
 	type String ZRETIN, ZRETO, ZRETOUT, ZRETEXC, ZEXCSEQ, ZEXCMSG
 	type String ZRQUID, ZRQSEQ, ZSTCD, ZERRCD, ZORQUID
 	type Number ZTPAPP, ZFLG, ZQUIT, ZCHKREV, ZUPOS, ZUSID
 	
 	//set OM=IM
 	set OM=""
        set ZFCD=""
        set ZFCD=IM.piece(":;",1).upperCase()
        set ZRQUID=IM.piece(":;",2)
        set ZQUIT=0
 	set ZFLG=1	//Delimeter flag
 
 	if (ZFCD.isNull())!('Db.isDefined("ZUTBLEXTSRV","ZFCD")) do { quit
 		set ER=1
 		set RM="INVALID FUNCTION NAME "_ZFCD 
 		do EXC
        }
        type RecordZUTBLEXTSRV rcsrv=Db.getRecord("ZUTBLEXTSRV","ZFCD",1)
        set ZPROCNM=rcsrv.PROCNM
        set ZTPAPP=rcsrv.TPAPP
        set ZCHKREV=rcsrv.CHKREV
        set ZUPOS=rcsrv.USERDP		//user id delimeter position
        
        if 'ZUPOS.isNull() do { quit:ZQUIT
        	set ZUSID=IM.piece(":;",ZUPOS)
        	if ZUSID.isNull() set ZQUIT=1
        	else  if 'Db.isDefined("SCAU","ZUSID") set ZQUIT=1
        	
        	if ZQUIT do {
        		set ZPGMR="ZCREJMSG"_ZPROCNM_"(1,"""_IM_""",.OM,10,""E0017"")"		//INVALID USER ID
        		do @ZPGMR
        		do CE9999(OM,.OM,"E0017")
        	} 
        }
        
        //if TP apply do check duplicate RQUID
        //==================================================================================================
        if ZTPAPP do { quit:ZQUIT
        	set ZPGMR="RQIN"_ZPROCNM_"("_ZFLG_","""_IM_""",.ZRETIN)"
        	do @ZPGMR
        	
        	if ZRETIN.get().isNull() do { quit	//INVALID APP ID
        		set ZQUIT=1
        		set ZPGMR="ZCREJMSG"_ZPROCNM_"(1,"""_IM_""",.OM,10,""E0038"")"
        		do @ZPGMR
        		do CE9999(OM,.OM,"E0038")
        	}
        }
        	
        do Runtime.start("CS")
        
        if ZTPAPP do {
	        //check duplicate
	        if $$CHKDUP(ZRQUID,.ZSTCD,.ZERRCD) set ZQUIT=1
	        	
	        //original RQUID to reverse
	        set ZORQUID=ZRETIN.piece(":;",6)
	        //check reverse
	        if ZCHKREV,$$CHKREV(ZRQUID,ZORQUID,.ZSTCD,.ZERRCD) set ZQUIT=1
        }
        	
        if ZQUIT!'ZTPAPP do {
        	do Runtime.rollback()
        	
        	if ZTPAPP,'ZPROCNM.get().isNull() do {
        		set ZPGMR="ZCREJMSG"_ZPROCNM_"(1,"""_IM_""",.OM,"_ZSTCD_","""_ZERRCD_""")"
        		do @ZPGMR
        		do CE9999(OM,.OM,ZERRCD)
        	}
        }
        
        if ZTPAPP do {	
        	
		set ZRQSEQ=Db.nextVal("ZRQLOG1","%CurrentDate,ZRQUID")
		type RecordZRQLOG1 rclog1=Db.getRecord("ZRQLOG1","%CurrentDate,ZRQUID,ZRQSEQ",1)
		set rclog1.status=ZSTCD.get()
		set rclog1.appid=ZRETIN.piece(":;",2)
		set rclog1.FNAME=ZRETIN.piece(":;",3)
		set rclog1.KTRC=ZRETIN.piece(":;",4)
		set rclog1.TIME=%CurrentTime
		set rclog1.ERRCD=ZERRCD.get()
		set rclog1.RQDATE=ZRETIN.piece(":;",5)
		set rclog1.TJD=%SystemDate
		do rclog1.save()
        }	
        	
        if ZQUIT quit
        
        //===================================================================================================
        
        //do MAIN
        set ZPGM="set ZRETO=$$MAIN"_ZPROCNM_"("_ZFLG_","""_IM_""",.OM,.ERR,.ERRD)"
        X ZPGM
        do CE9999(OM,.OM,ERR)
        
        //if TP apply do log RQUID
        //==================================================================================================
        if ZTPAPP do {
        	
        	set ZRETOUT=ZRETO.piece("|#|",1)
        	set ZRETEXC=ZRETO.piece("|#|",2)
        
        	set ZSTCD=ZRETOUT.piece(":;",1)
        	set ZERRCD=ZRETOUT.piece(":;",6)
        	
        	if ZSTCD'="00" do { quit	//transaction fail
        		do Runtime.rollback()
        		
	    		type RecordZRQLOG rclog=Db.getRecord("ZRQLOG","%CurrentDate,ZRQUID",1)
	    		set rclog.status=ZSTCD.get()
	    		set rclog.TIME=%CurrentTime
	    		set rclog.ERRCD=ZERRCD.get()
	    		set rclog.CID=ZRETOUT.piece(":;",7)
	    		set rclog.TSEQ=ZRETOUT.piece(":;",8)
	    		set rclog.appid=ZRETIN.piece(":;",2)
			set rclog.FNAME=ZRETIN.piece(":;",3)
			set rclog.KTRC=ZRETIN.piece(":;",4)
			set rclog.RQDATE=ZRETIN.piece(":;",5)
			set rclog.TJD=%SystemDate
			set rclog.FDTSEQ=ZRETOUT.piece(":;",10)
			set rclog.TOCID=ZRETOUT.piece(":;",11)
	    		do rclog.save()
        		
        		set ZRQSEQ=Db.nextVal("ZRQLOG1","%CurrentDate,ZRQUID")
	    		type RecordZRQLOG1 rclog1=Db.getRecord("ZRQLOG1","%CurrentDate,ZRQUID,ZRQSEQ",1)
	    		set rclog1.status=ZSTCD.get()
	    		set rclog1.TIME=%CurrentTime
	    		set rclog1.ERRCD=ZERRCD.get()
	    		set rclog1.CID=ZRETOUT.piece(":;",7)
	    		set rclog1.TSEQ=ZRETOUT.piece(":;",8)
	    		set rclog1.appid=ZRETIN.piece(":;",2)
			set rclog1.FNAME=ZRETIN.piece(":;",3)
			set rclog1.KTRC=ZRETIN.piece(":;",4)
			set rclog1.RQDATE=ZRETIN.piece(":;",5)
			set rclog1.TJD=%SystemDate
			set rclog1.FDTSEQ=ZRETOUT.piece(":;",10)
			set rclog1.TOCID=ZRETOUT.piece(":;",11)
	    		do rclog1.save()
	    		
	    		set ZEXCSEQ=1		//keep all EXC1 when reject post
	    		for  set ZEXCMSG=$P(ZRETEXC,";;",ZEXCSEQ) quit:(ZEXCMSG="")  do {
	    			type RecordZRQLOGEXC1 rcexc1=Db.getRecord("ZRQLOGEXC1","%CurrentDate,ZRQUID,ZRQSEQ,ZEXCSEQ",1)
	    			set rcexc1.data=ZEXCMSG
	    			do rcexc1.save()
	    			
	    			set ZEXCSEQ=ZEXCSEQ+1
	    		}
	    		
        	}
        	else  if ZSTCD="00" do {	//transaction success
        		
        		type RecordZRQLOG rclog=Db.getRecord("ZRQLOG","%CurrentDate,ZRQUID",1)
	    		set rclog.status=ZSTCD.get()
	    		set rclog.TIME=%CurrentTime
	    		set rclog.ERRCD=ZERRCD.get()
	    		set rclog.CID=ZRETOUT.piece(":;",7)
	    		set rclog.TSEQ=ZRETOUT.piece(":;",8)
	    		set rclog.FDTSEQ=ZRETOUT.piece(":;",10)
	    		set rclog.appid=ZRETIN.piece(":;",2)
	    		set rclog.FNAME=ZRETIN.piece(":;",3)
	    		set rclog.KTRC=ZRETIN.piece(":;",4)
			set rclog.RQDATE=ZRETIN.piece(":;",5)
	    		set rclog.TJD=%SystemDate
	    		set rclog.TOCID=ZRETOUT.piece(":;",11)
	    		do rclog.save()
        		
	    		type RecordZRQLOG1 rclog1=Db.getRecord("ZRQLOG1","%CurrentDate,ZRQUID,ZRQSEQ",1)
	    		set rclog1.status=ZSTCD.get()
	    		set rclog1.TIME=%CurrentTime
	    		set rclog1.ERRCD=ZERRCD.get()
	    		set rclog1.CID=ZRETOUT.piece(":;",7)
	    		set rclog1.TSEQ=ZRETOUT.piece(":;",8)
	    		set rclog1.FDTSEQ=ZRETOUT.piece(":;",10)
	    		set rclog1.TOCID=ZRETOUT.piece(":;",11)
	    		do rclog1.save()
	    		
	    		do Runtime.commit()
        	}
        
        }
        //==================================================================================================
        
        quit


CHKDUP(XRQUID,XSTCD,XERRCD)

	/*
		check duplicate RQUID from ZRQLOG
		check back 3 days until today
	
		XRQUID : RQUID
		XSTCD  : return status code
		XERRCD : return error code 
		
		quit 1:duplicate or rquid is null
		     0:unduplicate
	*/

	type Number ZDUP, ZSTOP
	type Date XCDT,XDT
	set (ZDUP,ZSTOP)=0
	set XCDT=%CurrentDate
	
	//INVALID RQUID
	if XRQUID.isNull() set XSTCD="10",XERRCD="E0014" quit 1	
	
	for i=0:1:3 do { quit:ZSTOP
		set XDT=XCDT-i
		if Db.isDefined("ZRQLOG","XDT,XRQUID") set ZSTOP=1
	}
		
	if 'ZSTOP quit ZDUP
	
	type RecordZRQLOG rclog=Db.getRecord("ZRQLOG","XDT,XRQUID",1)
	if rclog.status="00" set ZDUP=1,XSTCD="10",XERRCD="E0003"	//DUPLICATED TRANSACTION
	
	quit ZDUP



CHKREV(ZRQUID,XRQUID,XSTCD,XERRCD)

	/*
		check reversed RQUID from ZRQLOG
		service can reverse only sameday transaction (today & 3 minite after midnight)
		
		ZRQUID : RQUID
		XRQUID : original RQUID
		XSTCD  : return status code
		XERRCD : return error code
		
		quit 1:reversed transaction or can not reverse
		     0:not reversed transaction
		     
		save at table ZDRQUID(ZRQUID)=XCDT|XRQUID
		log original date|original rquid
		//ZRQUID must not null
	*/

	type Number ZREVl, ZSTOP
	type Date XCDT,XDT
	set (ZREV,ZSTOP)=0
	set XCDT=%CurrentDate

	//INVALID ORIGINAL RQUID
	if XRQUID.isNull() set XSTCD="10",XERRCD="E0045" quit 1
	
	for i=0:1:1 do { quit:ZSTOP
		set XDT=XCDT-i
		if Db.isDefined("ZRQLOG","XDT,XRQUID") set ZSTOP=1
	}
	
	//TRANSACTION NOT FOUND
	if 'ZSTOP set XSTCD="10",XERRCD="E0004" quit 1

	type RecordZRQLOG rclog=Db.getRecord("ZRQLOG","XDT,XRQUID",1)
	if rclog.status'="00" set XSTCD="10",XERRCD="E0004" quit 1		//in case that transaction not success
	if rclog.REVFLG=1 set XSTCD="10",XERRCD="E0006" quit 1  	//TRANSACTION ALREADY REVERSED
	
	if (XDT=%CurrentDate-1),(%CurrentTime>180) set XSTCD="10",XERRCD="E0044" quit 1	//UNABLE TO REVERSE BACKDATE 
	
	
	//INVALID RQUID
	if ZRQUID.isNull() set XSTCD="10",XERRCD="E0014" quit 1
	type RecordZDRQUID rcdlog=Db.getRecord("ZDRQUID","ZRQUID",1)
	set rcdlog.DATE = XDT
	set rcdlog.REVRQUID = XRQUID
	do rcdlog.save()
	
	quit ZREV


EXC     //LOG ERROR TO DAYEND
        new INTF
        if $G(INTRFACE)="" set INTF="JDBC777"
        else  set INTF=$G(INTRFACE)
 
        do LOG^UTLEXC(INTF,"*",,$G(ZNSMKEY),$G(RM),$G(ET),)
        //kill ET
        //set ER=0
        //set (RM,ERR,ERRD)=""
 
      	quit



CE9999(input,output,ERRCD)
	//replace error code from input with E9999 to output
	//except for error code that bank known
	
	if ERRCD.isNull() quit
	set output=input
	
	type RecordZUTBLITFERCD rcercd=Db.getRecord("ZUTBLITFERCD","ERRCD",1)
	if rcercd.ZERRBNK quit
	
	set output=input.replace(ERRCD,"E9999")

	quit

    
	