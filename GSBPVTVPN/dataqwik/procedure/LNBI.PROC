//DO NOT MODIFY  Loan BEFORE_INSERT Procedure|LNBI|||||||1
  /*
	ORIG: KELLYP - 04/03/2000
	DESC: Loan BEFORE_INSERT Procedure

	---- Comments --------------------------------------------------------

    	This procedure is called from the BEFORE_INSERT trigger of the LN filer
 	and all subsequent additions and/or modifications to this trigger should
 	only be made within this procedure (and not to the original trigger).

	---- Revision History -----------------------------------------------

	09/10/10 - Tom Locke - GSB HP loans
		   Always override popt from ZUTBLHPDFT.
		   
	08/16/10 - Tom Locke - GSB HP loans
		   Set ln.irb="" if 'ln.iam.
		   
	07/28/10 - Tom Locke - GSB HP loans
		   Added logic to get low level default fields from ZUTBLHPDFT before the loan
		   is processed and filed.  These are needed in the beginning of processing.
		   
	06/02/10 - Ray Subasic/Tom Locke - GSB HP loans
		   This change will support an HP loan to be created even though
		   normally Int/div index is required when int/div change
		   frequency contains a value.  Avoids 2109 error in PROC and
		   an 8745 error also in PROC.  This only for HP loans.
		   Calculate ln.onp differently for ln.icm=1.

	04/29/10 - Austin Mattson (Custom)
		   This change will support a loan being created with a first 
		   billing date less than or equal to the current system date.
		   Modified to set ln.bldt=ln.dtnt in cases where the ln.bndt
		   is less than the date of note (ln.dtnt). This is to prevent
		   the billing last date from being set to a date that was before
		   the loan was created.  This will only take place for HP loans.
	
	10/13/09 - Varakrit Loykulnant - GSB
		   Make sure calculated interest last change date is not
		   greater than system date.

	09/14/09 - Siripong Prayoonhong (14Sep09) - Profile Upgrade
		   Modified PROC section to set ln.crlmt to ln.amtreq if 
		   ln.crlmt has no value. This was causing the wrong 
		   calculation of interest spread from the matrix using 
		   credit limit.

	08/27/09 - Varakrit GSB
		   Clear Interest Change Frequency in case Interest Index
		   has no value but Related Deposit Account has value.
	
	07/14/09 - Sedtha (Profile Upgrade)
		   Add Code to default passbook data.

	12/23/08 - Anchalee Ch. (23Dec08) (Profile Upgrade)
		   Added custom code as the following
		   o 12/15/05 by Siripong - Added two more arguments, 
		   maturity date and renewal code, in DFP^PROCLN to consider
		   maturity date when calculating the date of first payment.
	
	02/04/08 - TAOC - CR 31691
		   Modified the PROC section with the following changes
		   1. To test the new Offset Period Billing option [PRODCTL]OPB
		   and to generate offset period bills. Offset period bill generation will
		   either be handled by UANTICLN (backdated opening) or during 
		   the 1st dayend following account creation (not backdated). 
		   2. To skip defaulting next distribution dates, if the
		   frequency is "*".
		   3. To handle payment schedule to set AMBAS and ONP if LNPS1
		   already set up.
		   4. not to allow the creation of a loan if
		   the next billing date is the same as the next payment due
		   date (i.e., don't allow zero day offset periods for bills). 
		   
	
	12/24/07 - KumarB - CR 30758
		   Modified section PROC to calculate account level interest
		   changes only for non segmented account, to avoid account
		   level integrity error for index change date.
	
	07/01/07 - KinI - CR 27406
		   Modified to add additional argument "type" to NBROPMT^PROCLN
		   calls. 
	
	06/21/07 - MBUIM - 27755
		   The Company Code defaulted to null when ln.co was null and
		   set to cif.co which was also null.
		   Modified the PROC section to check if cif.co is null then
		   set to CUVAR.CO 
	
	04/26/07 - KUMARB - CR 26550
		   Modified section PROC to remove the check 'ln.segments
		   while defaulting of interest rate (LN.IRN).
	
	01/05/07 - KUMARB - CR24680
		   Modified section PROC, to set NULL for Last Change Date
		   (LN.ICHLD) and Interest Next Change Date (LN.ICHND) fields
		   if Segments Allowed (LN.SEGMENTS) is selected, and the
		   Interest Change Frequency (LN.INTFRE) is defined.
		   Also skipped the defaulting of (LN.IRN) for segmented
		   accounts with index (LN.INDEX) defined.

	10/10/06 - NATRAJAH - CR 23054
		   Modified PROC section, set TRATE and TREXD value to in() 
		   array, since these values are required for promotional rate
		   based P&I calculation.
		   
	6/2/06  -  Ravindra Rathi - CR 21521
	           Modified LN.EPPENDAT for setting correct values.Method roundDec 
	           is used for rounding the expression while setting ln.eppendat. 
	           However, ln.odd was not included in this, due to which difference 
	           in days was comming.Added brackets to include ln.odd and 
	           this corrected the difference.

	06/01/06 - KUMARB - CR 21464
		   Modified PROC section to add "+" in front of cif.ellpls
		   in the setting of ln.ellpls=cif.ellpls.
	
	05/08/06 - TITOVE - CR 21103
		   Restored original logic when setting LN.EPPENDAT.

	03/03/06 - KELLYP - CR 19907
		   Modified PROC section to return a more informative error
		   message when the CIF doesn't exist.  Previously this would
		   just log a %PSL-E-RECNOFL error.
	
	11/18/05 - KELLYP - CR 18288
		   Modified code that sets INTOFF=0 if ICHND<TJD and INTOFF="".
		   INTOFF="" and INTOFF=0 are treated differently and INTOFF
		   should not be defaulted to zero if it's not defined.
	
	06/01/05 - KinI - 16153
		   Removed GLFLTR^ACNFUNCS call as obsoleted. GLSC value is 
		   defaulted from the product level.

	02/19/05 - KELLYP - CR 13662
		   Removed code that set PAR("IPMODE")=1 prior to calling
		   CTL^UINDX.  This incorrectly suppressed error messages
		   coming from UINDX.  Also cleaned up procedure and modified 
		   entire procedure to conform to current PSL standards.  Also
		   removed pre-2003 revision history.

	09/10/03 - CARROLLJ - 51630
		   Removed the use of the toArray.

	03/18/03 - Allan Mattson - 51351
		   Eliminated references to Membership Processing (obsoleted
		   in V7.0).
 */

	quit  	// Dummy quit for compiler

public PROC(RecordLN ln)	// Entry point for BEFORE_INSERT trigger of LN filer

	type public Boolean ER
	type public String RM
	
	do ln.setAuditFlag(1)
	
	if '%EffectiveDate.exists() set %EffectiveDate=""

	// Data required in data item ~p1
	if ln.cid.isNull() do Runtime.setErrMSG("LN",7531,"LN.CID") quit:ER
	if ln.type.isNull() do Runtime.setErrMSG("LN",7531,"LN.TYPE") quit:ER
	if ln.acn.isNull() do Runtime.setErrMSG("LN",7531,"LN.ACN") quit:ER
 
	// Default currency code
	if ln.crcd.isNull() set ln.crcd=%SystemCurrency
	
	// Instantiate records to be used throughout procedure
	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:ln.type")
	type RecordPRODDFTL proddftl=Db.getRecord("PRODDFTL","TYPE=:ln.type")
	type RecordUTBLBRCD utblbrcd=Db.getRecord("UTBLBRCD","BRCD=:ln.boo")
	type RecordCIF cif=Db.getRecord("CIF","ACN=:ln.acn",1)
	
	// Invalid customer number
	if 'cif.getMode() do Runtime.setErrMSG("CIF",1295) quit:ER
 
	// Branch ~p1 is inactive
	if utblbrcd.inactv do Runtime.setErrMSG("LN",3830,ln.boo) quit:ER
	
	// Need these field values at ths point in time, .vs. LLD logic after the loan is filed.
	if 'ln.subt.isNull() do {
		type RecordZUTBLHPDFT hpdft=Db.getRecord("ZUTBLHPDFT","GRP=:ln.grp,SUBT=:ln.subt",1)
		if 'hpdft.getMode() quit
		if 'hpdft.pcm.isNull() set ln.pcm=hpdft.pcm
		if 'hpdft.iam.isNull() set ln.iam=hpdft.iam
		if 'hpdft.ichm.isNull() set ln.ichm=hpdft.ichm
		if 'hpdft.icpa.isNull() set ln.icpa=hpdft.icpa
		if 'hpdft.irb.isNull() set ln.irb=hpdft.irb
		
		// Alway override popt even if null. This allows for backdating to get correct late charges.
		set ln.popt=hpdft.popt
		
		if 'ln.iam set ln.irb=""  // irb cannot have a value if iam is 0.
	}
	
	if ln.alprtyd>0 set ln.alprty=1
	if ln.alprty=1,('ln.alprtyd) set ln.alprtyd=999
 
	// Check validity of type to currency, and class and group
	do { quit:ER
		// Product class or group does not match product type
		if proddftl.cls'="L" do Runtime.setErrMSG("LN",8472) quit:ER

		if ln.grp.isNull() set ln.grp=proddftl.grp quit
		
		// Product class or group does not match product type
		if ln.grp'=proddftl.grp do Runtime.setErrMSG("LN",8472) quit:ER
		}
 
	// Set up general defaults
	set ln.cls="L"
 
	// Accrual processed date
	set ln.acs=%SystemDate-1
 
	// Always 1 for loans
	set ln.minopt=1
 
	// Orig disbursement date
	if ln.odd.isNull() set ln.odd=%SystemDate
 
	// Opening date always today
	set ln.odt=%SystemDate

	// Default values from CIF	
	if ln.title1.isNull() set ln.title1=cif.nam
	set ln.mf=cif.mf
	if 'cif.darcovr.isNull() do {
		set ln.darcovr=cif.darcovr
		set ln.suspect=1
		}
	if ln.co.isNull() do {
		if cif.co.isNull() set ln.co=CUVAR.CO
		else  set ln.co=cif.co
		}
	if ln.pers.isNull() set ln.pers=cif.pers
	if ln.ccode.isNull() set ln.ccode=cif.ccode
 
	// Int Calc Prin Adj
	if ln.icpa.isNull() set ln.icpa=proddftl.icpa

	set ln.trb=proddftl.trb

	if ln.pap.isNull() set ln.pap=proddftl.pap
 	if ln.pas.isNull() set ln.pas=proddftl.pas
 
	if 'ln.dist1fre.isNull() do {
		if ln.pdag.isNull() set ln.pdag=proddftl.pdag
		if ln.pcm.isNull() set ln.pcm=proddftl.pcm
		}

	type String PCMVAL
	set PCMVAL=$$PCMVAL^LNCDI(ln.pcm)

	// PIACM only set to "Y" with a PCM containing a P&I element
	if ln.piacm=1,'PCMVAL.extract(1) do Runtime.setErrXBAD("LN","PIACM-PCM") quit:ER

	// 27.08.09 Varakrit added
	if ln.index.isNull(),'ln.zreldcid.isNull() set ln.intfre = ""

	// Int/div index required when int/div change frequency contains a value
	if ln.index.isNull(),'ln.intfre.isNull() do Runtime.setErrMSG("LN",2109) quit:ER
	
	#IF ('CUVAR.NOSEGMENTS!(CUVAR.NOSEGMENTS=3))!($$SEGUSE^BTTOPTMZ("L"))
		if ln.segments,('ln.intfre.isNull()) do {
			set ln.ichld = ""
			set ln.ichnd = ""
			}
	#ENDIF
	
	if ('ln.index.isNull()) do { quit:ER

		type Date EFDDATE
		type Number RATE,RRATE,SRATE,URATE
		type String PAR()

		if %EffectiveDate.isNull() set EFDDATE=ln.dtnt
		else  set EFDDATE=%EffectiveDate

		// Siripong - 14Sep09 - Added
		if ln.crlmt.isNull() set ln.crlmt = ln.amtreq

		set PAR("ROUND")=1

		do CTL^UINDX(.ln,EFDDATE,ln.crlmt,.PAR) quit:ER

		if ln.irn="" set ln.irn=RATE
		set ln.indo=SRATE
		
 		// Annual rate limit last index value
		if ln.anirnd,'ln.aniriv set ln.aniriv=SRATE
		}
 
	// Get Promotional Rate using PROIND,PROBAL or AMTREQ
	if 'ln.proind.isNull(),ln.trate.isNull() do { quit:ER

		type Number BASE,RATE
		type String PAR()

		if 'ln.probal.isNull() set BASE=ln.probal
		else  set BASE=ln.amtreq

		set PAR("ROUND")=1
		set PAR("INDEX")=ln.proind

		do CTL^UINDX(.ln,%EffectiveDate,BASE,.PAR) quit:ER

		set ln.trate=RATE
		}

	if 'ln.dist1fre.isNull() do { quit:ER
		// Calculate DFP
		if ln.bloff.isNull() set ln.bloff=$$BLOFF^LNFUNCS(ln.type)
		//12/23/2008 - Added custom code by Anchalee Ch. (Profile Upgrade) (23Dec08)
		//Siripong - 15Dec05 - Replaced
		//if ln.dfp.isNull() set ln.dfp=$$DFP^PROCLN(ln.type,ln.crcd,ln.odd,ln.dist1fre,ln.dist1nd,ln.dfp,ln.bloff) quit:ER
		if ln.dfp.isNull() set ln.dfp=$$DFP^PROCLN(ln.type,ln.crcd,ln.odd,ln.dist1fre,ln.dist1nd,ln.dfp,ln.bloff) quit:ER
		//End of 12/23/2008
 
		// Data required in data item ~p1
		if ln.dfp.isNull() do Runtime.setErrMSG("LN",7531,"LN.DFP") quit:ER
		}
 
	// Set up first dates if not provided
	if 'ln.dfp.isNull() do {
		if ln.schnd.isNull() set ln.schnd=ln.dfp
		if ln.dist1nd.isNull() set ln.dist1nd=ln.dfp
		}
    
	// Invalid date ~p1
	if ln.schnd'=ln.dfp do Runtime.setErrMSG("LN",1308,"LN.SCHND") quit:ER
	if ln.dist1nd'=ln.dfp do Runtime.setErrMSG("LN",1308,"LN.DIST1ND") quit:ER

	if ln.schld.isNull() set ln.schld=ln.odd
 
	// Escrow analysis info
	if 'ln.anfre.isNull() do { quit:ER
		type Date JD
		set JD=$$FRSTDATE^ACNFUNCS(ln.dist1nd,ln.anfre,"10",ln.anoff) quit:ER
		set ln.apcnd=JD
		}
	
	if ln.pbfre do { quit:ER
		set ln.pblstdt=%SystemDate	
		if ln.pbnxtdt.isNull() set ln.pbnxtdt=$$NJD^UFRE(ln.pblstdt,ln.pbfre) quit:ER
		}	
	
	if ln.adjcol do { quit:ER
		type Number TOTAMT
		set TOTAMT=0
		
		type ResultSet rs=Db.select("PLDGAMT","LNCOL","CID=:ln.cid")
		if rs.isEmpty() quit
		while rs.next() set TOTAMT=TOTAMT+rs.getCol(1)
		
		set ln.collim=TOTAMT
		}
	
	if ln.wdlmtp set ln.wdlmt=ln.crlmt
	
	if ln.collimpr do {
		if (ln.crlmt<ln.collim) set ln.wdlmt=ln.crlmt
		else  set ln.wdlmt=ln.collim
		}

	// Default payment term to term if product indicates to do so
	if ln.ptrm.isNull(),prodctl.ptmf set ln.ptrm=ln.trm

	// Calculate Value for AMODT
	type Date AMDT,LSTPMTDT
	set ln.amodt=$$AMODT^PROCLN(ln.type,ln.crcd,ln.odd,ln.dist1fre,ln.dfp,.LSTPMTDT) quit:ER
	set ln.mdt=$$MDT^PROCLN(ln.dtnt,ln.odd,ln.ptrm,ln.trm,ln.busopt,ln.nbdc,LSTPMTDT,ln.pcmval,ln.dist1fre,.AMDT,ln.mdt) quit:ER

	// Set Credit Limit before call to URSCH, otherwise IRN will not be calculated.
	if ln.iam.extract()'=2 set ln.crlmt=ln.amtreq+ln.iun

	if ln.irn.isNull(),'ln.sch.isNull() set ln.irn=$$RSCH^URSCH(ln.sch,ln.crlmt,ln.odd,ln.mdt,ln.rsintspr,ln.rsrndmtd) quit:ER

	// Interest related info 
	if ln.irn do {

		// Teaser Rate
		if 'ln.trate.isNull(),(ln.trexd>ln.odd) set ln.iro=ln.trate

		// Original int rate
		else  set ln.iro=ln.irn
		
		// Daily factor
		set ln.idf=$$^SCARND(ln.irn/365,0,,,5)
		}

	// Annual rate limit information
	if ln.anirnd.isNull(),(ln.intmxiy!ln.intmxdy) set ln.anirnd=$$FRSTDATE^ACNFUNCS(ln.amodt,"1YA","00") quit:ER
	if ln.anirnd do {
		
		// Last change date
		if 'ln.anirld set ln.anirld=ln.odd
		
		// Original rate
		if 'ln.aniro set ln.aniro=ln.iro
                
		// Last index value
		if 'ln.aniriv set ln.aniriv=ln.indo
		}
 
	// Annual payment limit information
	if ln.anptnd.isNull(),(ln.pmxdiy!ln.pmxddy!ln.pmxpiy!ln.pmxpdy) set ln.anptnd=$$FRSTDATE^ACNFUNCS(ln.amodt,"1YA","00") quit:ER
	if ln.anptnd do {
		// Last change date
		if 'ln.anptld set ln.anptld=ln.odd
		}
 
	// Cost Center
	if ln.cc.isNull() set ln.cc=utblbrcd.ccdef
	
	// Deferred interest next annual review
	if ln.diand.isNull(),ln.dimxy set ln.diand=$$FRSTDATE^ACNFUNCS(ln.amodt,"1YA","00") quit:ER

	// Report short name
	if ln.lnm.isNull() do {
		type String SLN
		set SLN=cif.lnm.piece("|",1)
		if ('cif.pers),(SLN.length()<18),('cif.nam.piece(" ",2).isNull()) do {
			set SLN=SLN_","_cif.nam.piece(" ",1)
			}
		set ln.lnm=SLN.extract(1,20)
		}
 
	// Balance for interest
	if ln.iam.extract()=1 do {
		set ln.balint=ln.ipl-ln.iun
		if 'ln.tdr,ln.balint<0 set ln.balint=0	// Never < 0 if add on
		}

	// Adv to reduce undisb
	if ln.cpf set ln.aruf=1
 
	// Late charge action dt
	if ln.dlcaf,ln.lcad.isNull() set ln.lcad=%SystemDate
 
	// Force Bill Print Flag to 0 for loans linked to a builder loan commitment.
	if ln.cbf,'ln.ccl.isNull() S ln.bmet="0"

	// Bill seq # next due dt
	set ln.dseq=1
 
	// Date of note
	if ln.dtnt.isNull() do {
		if ln.odt,ln.odt<ln.odd set ln.dtnt=ln.odt
		else  set ln.dtnt=ln.odd
		}
		
	// Oldest unsatis bill #
	set ln.oseq=1
 
	// Pmt change last date
	if ln.pchnd,'ln.pchld set ln.pchld=ln.odd
 
	// Status
	set ln.stat=0
 
	// Unadvanced balance
	if 'ln.aruf set ln.udbal=ln.crlmt
 
	// Balloon Amount
	if 'ln.ballamt.isNull() do { quit:ER
		
		// Balloon amount cannot be greater than loan amount
		if ln.ballamt>ln.amtreq do Runtime.setErrMSG("LN",3747) quit:ER
		
		// Amount must be greater than zero
		if ln.ballamt=0 do Runtime.setErrMSG("LN",279) quit:ER
		
		set ln.ptrm=ln.trm
		}
 
	// Initialize following to zero if no current values
	if ln.bal.isNull() set ln.bal=0
	if ln.rflg.isNull() set ln.rflg=0
	if ln.cntdr.isNull() set ln.cntdr=0
	if ln.cntcr.isNull() set ln.cntcr=0
	if ln.teb.isNull() set ln.teb=0
	if ln.org.isNull() set ln.org=0
	if ln.tdr.isNull() set ln.tdr=0
	if ln.acr.isNull() set ln.acr=0
	if ln.iun.isNull() set ln.iun=0
	if ln.iytd.isNull() set ln.iytd=0
	if ln.ipy.isNull() set ln.ipy=0
	if ln.itytd.isNull() set ln.itytd=0
	if ln.ipty.isNull() set ln.ipty=0
	if ln.ipl.isNull() set ln.ipl=0
	if ln.intdef.isNull() set ln.intdef=0
	if ln.idefly.isNull() set ln.idefly=0
	if ln.intdeftytd.isNull() set ln.intdeftytd=0
	if ln.intdefpty.isNull() set ln.intdefpty=0
	if ln.pytd.isNull() set ln.pytd=0
	if ln.ppy.isNull() set ln.ppy=0
	if ln.pentytd.isNull() set ln.pentytd=0
	if ln.penpty.isNull() set ln.penpty=0
	if ln.ppl.isNull() set ln.ppl=0
	if ln.lchg.isNull() set ln.lchg=0
	if ln.ppa.isNull() set ln.ppa=0
	if ln.pmttrs.isNull() set ln.pmttrs=0
	if ln.schnum.isNull() set ln.schnum=0
	if ln.schbal.isNull() set ln.schbal=0
	if ln.poamt.isNull() set ln.poamt=0
	if ln.tdue.isNull() set ln.tdue=0
	if ln.cuin.isNull() set ln.cuin=0
	if ln.unin.isNull() set ln.unin=0
	if ln.cupr.isNull() set ln.cupr=0
	if ln.unpr.isNull() set ln.unpr=0
	if ln.cues.isNull() set ln.cues=0
	if ln.unes.isNull() set ln.unes=0
	if ln.schseq.isNull() set ln.schseq=0
	if ln.auo.isNull() set ln.auo=0
	if ln.fpc01.isNull() set ln.fpc01=0
	if ln.fpc02.isNull() set ln.fpc02=0
	if ln.fpc03.isNull() set ln.fpc03=0
	if ln.fpc04.isNull() set ln.fpc04=0
	if ln.fpc05.isNull() set ln.fpc05=0
	if ln.fpc06.isNull() set ln.fpc06=0
	if ln.fpc07.isNull() set ln.fpc07=0
	if ln.fpc08.isNull() set ln.fpc08=0
	if ln.fpc09.isNull() set ln.fpc09=0
	if ln.fpc10.isNull() set ln.fpc10=0
	if ln.fpc11.isNull() set ln.fpc11=0
	if ln.fpc12.isNull() set ln.fpc12=0
	if ln.inta.isNull() set ln.inta=0
	if ln.baola.isNull() set ln.baola=0
	if ln.dpmt.isNull() set ln.dpmt=0
	if ln.tba.isNull() set ln.tba=0
	if ln.orgfp.isNull() set ln.orgfp=0
	if ln.peba.isNull() set ln.peba=0
	if ln.bseq.isNull() set ln.bseq=0
	if ln.dp1.isNull() set ln.dp1=0
	if ln.dp2.isNull() set ln.dp2=0
	if ln.dp3.isNull() set ln.dp3=0
	if ln.dp4.isNull() set ln.dp4=0
	if ln.dp5.isNull() set ln.dp5=0
	if ln.dy1.isNull() set ln.dy1=0
	if ln.dy2.isNull() set ln.dy2=0
	if ln.dy3.isNull() set ln.dy3=0
	if ln.dy4.isNull() set ln.dy4=0
	if ln.dy5.isNull() set ln.dy5=0

	set ln.fpp01=0
	set ln.fpp02=0
	set ln.fpp03=0
	set ln.fpp04=0
	set ln.fpp05=0
	set ln.fpp06=0
	set ln.fpp07=0
	set ln.fpp08=0
	set ln.fpp09=0
	set ln.fpp10=0
	set ln.fpp11=0
	set ln.fpp12=0
 
	// Negative amortization - Maximum % increase over original balance
	do {
		type Number NALPB
		set NALPB=$$NALPB^LNFUNCS(ln.type)
		if NALPB.isNull() quit
		set ln.namxb=$$^SCARND(((NALPB/100)+1)*ln.crlmt,0,,ln.crcd)
		}
 
	// Default net deferred fee plan
	if ln.nfplnorg.isNull() set ln.nfplnorg=prodctl.fpln

	// Default net deferred fee amount if plan set up but no amount defined
	if 'ln.nfplnorg.isNull(),ln.nfamtorg.isNull() do {
		type Number LEXF,LEXV,TMPAMT
		type String EXPINF

		set EXPINF=$$EXPINF^LNFUNCS(ln.type)
		set LEXV=EXPINF.piece("|",1)
		set LEXF=EXPINF.piece("|",2)
		set TMPAMT=(ln.amtreq*((ln.orgfp+ln.comfp)/100))+ln.aprapp+ln.aprapp1
		set TMPAMT=TMPAMT-LEXF-((ln.amtreq*LEXV)/100)
		set ln.nfamtorg=$$^SCARND(TMPAMT,2)
		}
 
	// Default Percent of Balance Payment Plan
	if ln.rpp.isNull(),ln.pcmval=4 do {
		type Number XKEY
		type String RPP
		
		set XKEY=ln.mdt-ln.odd
		set XKEY=((XKEY\365)*12)+(((XKEY#365)+24)-((XKEY\365\4)\30))
                
		type ResultSet rs=Db.select("RPP","UTBLXRPP","KEY NOT >:XKEY","KEY DESC")
		if rs.isEmpty() quit
		if rs.next() set RPP=rs.getCol(1)
 
		if RPP.isNull() quit
		set ln.rpp=RPP
		}

	// Penalty expiration date
	if ln.odd, ln.mdt do {
		
		type Number EPPOFF
		
		// Early Payoff - %AGE of Term
		set EPPOFF = $$EPPOFF^LNFUNCS(ln.type) quit:EPPOFF.isNull()
		
		set ln.eppendat =(ln.odd + (((ln.mdt - ln.odd) * EPPOFF) / 100)).roundDec(0)
		}
 
	/*
	 Add odd days interest to first bill's interest.  Only do this if LNBIL0
	 already set up.  Otherwise, do it when insert LNBIL0
	*/
	if ln.disppi,ln.odio do {

		type RecordLNBIL0 lnbil0=Db.getRecord("LNBIL0","CID=:ln.cid",1)
		if 'lnbil0.getMode() quit

		do {
			if lnbil0.pe01ea="I" set lnbil0.pe01la=ln.disppi quit
			if lnbil0.pe02ea="I" set lnbil0.pe02la=ln.disppi quit
			if lnbil0.pe03ea="I" set lnbil0.pe03la=ln.disppi quit
			if lnbil0.pe04ea="I" set lnbil0.pe04la=ln.disppi quit
			if lnbil0.pe05ea="I" set lnbil0.pe05la=ln.disppi quit
			if lnbil0.pe06ea="I" set lnbil0.pe06la=ln.disppi quit
			if lnbil0.pe07ea="I" set lnbil0.pe07la=ln.disppi quit
			if lnbil0.pe08ea="I" set lnbil0.pe08la=ln.disppi quit
			if lnbil0.pe09ea="I" set lnbil0.pe09la=ln.disppi quit
			if lnbil0.pe10ea="I" set lnbil0.pe10la=ln.disppi quit
			if lnbil0.pe11ea="I" set lnbil0.pe11la=ln.disppi quit
			if lnbil0.pe12ea="I" set lnbil0.pe12la=ln.disppi quit
			if lnbil0.pe13ea="I" set lnbil0.pe13la=ln.disppi quit
			if lnbil0.pe14ea="I" set lnbil0.pe14la=ln.disppi quit
			if lnbil0.pe15ea="I" set lnbil0.pe15la=ln.disppi quit
			if lnbil0.pe16ea="I" set lnbil0.pe16la=ln.disppi quit
			if lnbil0.pe17ea="I" set lnbil0.pe17la=ln.disppi quit
			if lnbil0.pe18ea="I" set lnbil0.pe18la=ln.disppi quit
			if lnbil0.pe19ea="I" set lnbil0.pe19la=ln.disppi quit
			if lnbil0.pe20ea="I" set lnbil0.pe20la=ln.disppi quit
			}

		do lnbil0.save()
		}
 
	// Default values for DIST1AF and if DIST1FRE for DIST1ND, DIST1LD
	if (ln.amodt.isNull())!('ln.dist1af)!('ln.dist1fre.isNull()&(ln.dist1nd.isNull()!(ln.dist1ld.isNull()))) do { quit:ER
		if ln.dist1fre="*" quit

		type String newval()
                
		do PMTFTRIG^LNPPC1(.ln,1,ln.dist1fre,ln.bloff,ln.dist1nd,ln.dist1nd,ln.icm,ln.odd,ln.pcmval,ln.crcd,ln.type,.newval) quit:ER
		if 'ln.dist1af set ln.dist1af=newval("DIST1AF").get()
		if 'ln.dist1fre.isNull() do {
			if ln.dist1nd.isNull() set ln.dist1nd=newval("DIST1ND").get()
			if ln.dist1ld.isNull() set ln.dist1ld=newval("DIST1LD").get()
			}
		}
 
	// Default values for DIST2ND and DIST2LD
	if 'ln.dist2fre.isNull(),ln.dist2nd.isNull()!(ln.dist2ld.isNull()) do { quit:ER 
		if ln.dist2fre = "*" quit
		
		type String newval()
		do PMTFTRIG^LNPPC1(.ln,2,ln.dist2fre,ln.bloff,ln.dist2nd,ln.dist1nd,ln.icm,ln.odd,ln.pcmval,ln.crcd,ln.type,.newval) quit:ER
		if ln.dist2nd.isNull() set ln.dist2nd=newval("DIST2ND").get()
		if ln.dist2ld.isNull() set ln.dist2ld=newval("DIST2LD").get()
		if ln.dist2ld.isNull() set ln.dist2ld=ln.odd
		}
 
	// Default values for DIST3ND and DIST3LD
	if 'ln.dist3fre.isNull(),ln.dist3nd.isNull()!(ln.dist3ld.isNull()) do { quit:ER 
		if ln.dist3fre = "*" quit
		
		type String newval()
		do PMTFTRIG^LNPPC1(.ln,3,ln.dist3fre,ln.bloff,ln.dist3nd,ln.dist1nd,ln.icm,ln.odd,ln.pcmval,ln.crcd,ln.type,.newval) quit:ER
		if ln.dist3nd.isNull() set ln.dist3nd=newval("DIST3ND").get()
		if ln.dist3ld.isNull() set ln.dist3ld=newval("DIST3LD").get()
		if ln.dist3ld.isNull() set ln.dist3ld=ln.odd
		}
 
	// Default values for DIST4ND and DIST4LD
	if 'ln.dist4fre.isNull(),ln.dist4nd.isNull()!(ln.dist4ld.isNull()) do { quit:ER 
		if ln.dist4fre = "*" quit
		
		type String newval()
		do PMTFTRIG^LNPPC1(.ln,4,ln.dist4fre,ln.bloff,ln.dist4nd,ln.dist1nd,ln.icm,ln.odd,ln.pcmval,ln.crcd,ln.type,.newval) quit:ER
		if ln.dist4nd.isNull() set ln.dist4nd=newval("DIST4ND").get()
		if ln.dist4ld.isNull() set ln.dist4ld=newval("DIST4LD").get()
		if ln.dist4ld.isNull() set ln.dist4ld=ln.odd
		}
		
	// Check the MT900 and MT910 flags
	if cif.mt900=1 set ln.mt900=1
	if cif.mt910=1 set ln.mt910=1
	
	if ln.mt900=1 do {
		// SWIFT Address must be defined
		if (ln.mt900a.isNull()),(cif.mt900a.isNull()),(cif.swiftadd.isNull()) do Runtime.setErrMSG("LN","4029") quit:ER
		}
 	
	if ln.mt910=1 do {
		// SWIFT Address must be defined
		if (ln.mt910a.isNull()),(cif.mt910a.isNull()),(cif.swiftadd.isNull()) do Runtime.setErrMSG("LN","4029") quit:ER
		}

	// Payment change method required when payment change frequency contains a value
	if 'ln.pcfre.isNull(),ln.pchm.isNull() do Runtime.setErrMSG("LN",2110) quit:ER

	// Compute payment change next date
	if 'ln.pcfre.isNull(),ln.pchnd.isNull() do {
		type String CTL
		if ln.pcoff.isNull() set CTL=11
		else  set CTL="01"
		set ln.pchnd=$$FRSTDATE^ACNFUNCS(ln.amodt,ln.pcfre,CTL,ln.pcoff,,ln.dist1fre,ln.dist1nd)
		}
 
	if 'ln.rafre.isNull() do { quit:ER
		if ln.rand.isNull() set ln.rand=$$FRSTDATE^ACNFUNCS(ln.amodt,ln.rafre,"00",ln.randoff) quit:ER
		if ln.rald.isNull() set ln.rald=ln.odd
		}

	// Deferred interest
	if 'ln.dirfre.isNull(),ln.dirnd.isNull(),ln.dico="BL"!(ln.dico="FR") set ln.dirnd=$$FRSTDATE^ACNFUNCS(ln.amodt,ln.dirfre,"01") quit:ER
 
	// Calculate maturity date and other values
	if ('ln.mdt.isNull()),(ln.dist1fre'="*") do {
		
		// HP loans with icm=1 will not calculate correctly.  Need a different calculation.
		if ln.zhpflag,ln.icm do { quit
			type Number TRM,ONP
			set TRM=ln.trm
			if TRM.isLike("%D") S ONP=TRM/30.roundDec(0)
			else  if TRM.isLike("%M") set ONP=+TRM
			else  if TRM.isLike("%Y") set ONP=TRM*12
			set ln.onp=ONP
			set ln.ambas=ONP
			
		}
		type Date ODT

		if (ln.dist1nd.isNull())!("*"[ln.dist1fre) set ODT=ln.odd
		else  set ODT=LSTPMTDT
 
		if 'ln.onp set ln.onp=$$NBROPMT^PROCLN(ln.type,ln.mdt,ODT,ln.dist1fre,LSTPMTDT,ln.dist1af)
		
		// Make sure DIST1FRE is defined
		if 'ln.ambas,('ln.dist1fre.isNull()) do {
			if ln.mdt=AMDT set ln.ambas=ln.onp quit
			set ln.ambas=$$NBROPMT^PROCLN(ln.type,AMDT,ODT,ln.dist1fre,LSTPMTDT,ln.dist1af)
			}
		}
 
	if ln.dist1fre="*" do {
		// Ensure that DIST1ND is the oldest of DIST2ND,DIST3ND,DIST4ND
		if 'ln.dist2nd.isNull(),ln.dist2nd<ln.dist1nd set ln.dist1nd=ln.dist2nd
		if 'ln.dist3nd.isNull(),ln.dist3nd<ln.dist1nd set ln.dist1nd=ln.dist3nd
		if 'ln.dist4nd.isNull(),ln.dist4nd<ln.dist1nd set ln.dist1nd=ln.dist4nd
		}
 
	// Ensure that first due date value is reflected in related columns
	set ln.schnd=ln.dist1nd
	set ln.dfp=ln.dist1nd
 
	// Calculate payment string information
	if 'ln.pap.isNull(),'ln.pas.isNull() do { quit:ER

		type Number NPC
		type String PMTDIST,PMTDISTF,PPDCAT()

		set PMTDIST=ln.pmtdist
		set PMTDISTF=ln.pmtdistf
		do ^LNCNVST(.ln,ln.cid,ln.pas,ln.pap,.PMTDIST,.PMTDISTF,.NPC,.PPDCAT) quit:ER
		set ln.pmtdist=PMTDIST
		set ln.pmtdistf=PMTDISTF
		set ln.npc=NPC
		set ln.ppdcat1=PPDCAT(1)
		set ln.ppdcat2=PPDCAT(2)
		set ln.ppdcat3=PPDCAT(3)
		set ln.ppdcat4=PPDCAT(4)
		set ln.ppdcat5=PPDCAT(5)
		set ln.ppdcat6=PPDCAT(6)
		set ln.ppdcat7=PPDCAT(7)
		set ln.ppdcat8=PPDCAT(8)
		set ln.ppdcat9=PPDCAT(9)
		set ln.ppdcat10=PPDCAT(10)
		}
 
	// APR Calculation Method
	if ln.aprmthd.isNull() set ln.aprmthd=1
	else  do { quit:ER			
		// APR calc method must be consistent with the product type
		if proddftl.aprmthd'=ln.aprmthd do Runtime.setErrXBAD("LN","526") quit:ER
		}

	type Boolean calc
 
	// Determine whether call to LNNEW10 is necessary
	do {
		set calc=1
		if PCMVAL.extract(),ln.pmtpi.isNull() quit
		if PCMVAL.extract(),ln.pmt.isNull() quit
		if PCMVAL.extract(2)=2,(ln.fia.isNull()) quit
		if 'ln.dist1fre.isNull(),ln.amodt.isNull() quit
		if ln.disapr.isNull() quit
		if ln.distint.isNull() quit
		if ln.disamf.isNull() quit
		if ln.crlmt.isNull() quit
		if 'ln.trm.isNull(),(ln.mdt.isNull()!(ln.onp.isNull())!(ln.ambas.isNull())) quit
		set calc=0
		}
 
	if calc do {
		
		type String in(),out()
		
		set in("AMBAS")=ln.ambas
		set in("AMODT")=ln.amodt
		set in("AMTREQ")=ln.amtreq
		set in("ANIRND")=ln.anirnd
		set in("ANPTND")=ln.anptnd
		set in("ANPTO")=ln.anpto
		set in("APRAPP")=ln.aprapp
		set in("APRMTHD")=ln.aprmthd
		set in("BALLAMT")=ln.ballamt
		set in("BLOFF")=ln.bloff
		set in("CAF")=ln.caf
		set in("CID")=ln.cid
		set in("COMFA")=ln.comfa
		set in("COMFP")=ln.comfp
		set in("CRCD")=ln.crcd
		set in("CRLMT")=ln.crlmt
		set in("DFP")=ln.dfp
		set in("DISMIP")=ln.dismip
		set in("DISPMP")=ln.dispmp
		set in("DISPPI")=ln.disppi
		set in("DIST1FRE")=ln.dist1fre
		set in("DIST1LD")=ln.dist1ld
		set in("DIST1ND")=ln.dist1nd
		set in("DIST2FRE")=ln.dist2fre
		set in("DIST2ND")=ln.dist2nd
		set in("DIST3FRE")=ln.dist3fre
		set in("DIST3ND")=ln.dist3nd
		set in("DIST4FRE")=ln.dist4fre
		set in("DIST4ND")=ln.dist4nd
		set in("DISTIP")=ln.distip
		set in("DISTPMT")=ln.distpmt
		set in("DSEQ")=ln.dseq
		set in("FIA")=ln.fia
		set in("FPA")=ln.fpa
		set in("IACM")=ln.iacm
		set in("IAM")=ln.iam
		set in("ICHLD")=ln.ichld
		set in("ICHND")=ln.ichnd
		set in("ICPF")=ln.icpf
		set in("IDGP")=ln.idgp
		set in("IDPF")=ln.idpf
		set in("INDEX")=ln.index
		set in("INTFRE")=ln.intfre 
		set in("INTMN")=ln.intmn
		set in("INTMX")=ln.intmx
		set in("INTOFF")=ln.intoff
		set in("IRN")=ln.irn
		set in("IRO")=ln.iro
		set in("IUN")=ln.iun
		set in("LBDD")=ln.lbdd
		set in("LVR")=ln.lvr
		set in("MAXDRCT")=ln.maxdrct
		set in("MDT")=ln.mdt
		set in("MFCB")=ln.mfcb
		set in("NUMCH")=ln.numch
		set in("ODD")=ln.odd
		set in("ONP")=ln.onp
		set in("ORGFA")=ln.orgfa
		set in("ORGFP")=ln.orgfp
		set in("PCFRE")=ln.pcfre
		set in("PCHM")=ln.pchm
		set in("PCHND")=ln.pchnd
		set in("PCM")=ln.pcm
		set in("PCOFF")=ln.pcoff
		set in("PIACM")=ln.piacm
		set in("PLDF")=ln.pldf
		set in("PMNDDC")=ln.pmnddc
		set in("PMNDIC")=ln.pmndic
		set in("PMTMIN")=ln.pmtmin
		set in("PMTORG")=ln.pmtorg		
		set in("PMTPI")=ln.pmtpi
		set in("PMTDIST")=ln.pmtdist
		set in("PMTDISTF")=ln.pmtdistf
		set in("PMTTRS")=ln.pmttrs
		set in("PMXDDC")=ln.pmxddc
		set in("PMXDDL")=ln.pmxddl
		set in("PMXDDY")=ln.pmxddy
		set in("PMXDIC")=ln.pmxdic
		set in("PMXDIL")=ln.pmxdil
		set in("PMXDIY")=ln.pmxdiy
		set in("PMXPDC")=ln.pmxpdc
		set in("PMXPDL")=ln.pmxpdl
		set in("PMXPDY")=ln.pmxpdy
		set in("PMXPIC")=ln.pmxpic
		set in("PMXPIL")=ln.pmxpil
		set in("PMXPIY")=ln.pmxpiy
		set in("PPA")=ln.ppa
		set in("PPINC")=ln.ppinc
		set in("PTRM")=ln.ptrm
		set in("RAFRE")=ln.rafre
		set in("RALD")=ln.rald
		set in("RAND")=ln.rand
		set in("ROPT")=ln.ropt
		set in("RPP")=ln.rpp
		set in("SCHLD")=ln.schld
		set in("SLDTD")=ln.sldtd
		set in("TRM")=ln.trm
		set in("TRATE")=ln.trate
		set in("TREXD")=ln.trexd		
		set in("TYPE")=ln.type

		do RPC^LNNEW10(.in,,,,.out)
 
		if 'out("SCHLD").get().isNull() set ln.schld=out("SCHLD")
		if out("AMODT").exists(),(ln.amodt.isNull()!(ln.amodt=ln.odd)) set ln.amodt=out("AMODT").get()

		if ln.comfa.isNull() set ln.comfa=out("COMFA").get()
		if ln.crlmt.isNull() set ln.crlmt=out("CRLMT").get()
		if ln.disamf.isNull() set ln.disamf=out("DISAMF").get()
		if ln.disapr.isNull() set ln.disapr=out("DISAPR").get()
		if ln.distint.isNull() set ln.distint=out("DISTINT").get()
		if ln.distpmt.isNull() set ln.distpmt=out("DISTPMT").get()
		if ln.disppid.isNull() set ln.disppid=out("DISPPID").get()
		if ln.disppi.isNull() set ln.disppi=out("DISPPI").get()
		if ln.dispmp.isNull() set ln.dispmp=out("DISPMP").get()
		if ln.dismip.isNull() set ln.dismip=out("DISMIP").get()
		if ln.disamf.isNull() set ln.disamf=out("DISAMF").get()
		if ln.fia.isNull() set ln.fia=out("FIA").get()
		if ln.fpa.isNull() set ln.fpa=out("FPA").get()
		if ln.mdt.isNull() set ln.mdt=out("MDT").get()
		if ln.ambas.isNull() set ln.ambas=out("AMBAS").get()
		if ln.onp.isNull() set ln.onp=out("ONP").get()
		if ln.orgfa.isNull() set ln.orgfa=out("ORGFA").get()
		if ln.pmtpi.isNull() set ln.pmtpi=out("PMTPI").get()
		if ln.pmt.isNull() set ln.pmt=out("PMT").get()
		if ln.pmttrs.isNull() set ln.pmttrs=out("PMTTRS").get()
		if ln.iam do {
			set ln.iun=out("IUN").get()
			set ln.crlmt=out("CRLMT").get()
			set ln.udbal=ln.crlmt
			}
		if ln.anirnd.isNull() set ln.anirnd=out("ANIRND").get()
		if ln.anptnd.isNull() set ln.anptnd=out("ANPTND").get()
		if ln.anpto.isNull() set ln.anpto=out("ANPTO").get()
		if ln.dist1ld.isNull() set ln.dist1ld=out("DIST1LD").get()
		if ln.distip.isNull() set ln.distip=out("DISTIP").get()
		if ln.dseq.isNull() set ln.dseq=out("DSEQ").get()
		if ln.ichld.isNull() set ln.ichld=out("ICHLD").get()
		if ln.ichnd.isNull() set ln.ichnd=out("ICHND").get()
		if ln.index.isNull() set ln.index=out("INDEX").get()
		if ln.intfre.isNull() set ln.intfre=out("INTFRE").get()
		if ln.intmn.isNull() set ln.intmn=out("INTMN").get()
		if ln.intmx.isNull() set ln.intmx=out("INTMX").get()
		if ln.intoff.isNull() set ln.intoff=out("INTOFF").get()
		if ln.lbdd.isNull() set ln.lbdd=out("LBDD").get()
		if ln.lvr.isNull() set ln.lvr=out("LVR").get()
		if ln.maxdrct.isNull() set ln.maxdrct=out("MAXDRCT").get()
		if ln.mfcb.isNull() set ln.mfcb=out("MFCB").get()
		if ln.pchnd.isNull() set ln.pchnd=out("PCHND").get()
		if ln.pcoff.isNull() set ln.pcoff=out("PCOFF").get()
		if ln.pmnddc.isNull() set ln.pmnddc=out("PMNDDC").get()
		if ln.pmndic.isNull() set ln.pmndic=out("PMNDIC").get()
		if ln.pmtmin.isNull() set ln.pmtmin=out("PMTMIN").get()
		if ln.pmtorg.isNull() set ln.pmtorg=out("PMTORG").get()
		if ln.pmxddc.isNull() set ln.pmxddc=out("PMXDDC").get()
		if ln.pmxddl.isNull() set ln.pmxddl=out("PMXDDL").get()
		if ln.pmxddy.isNull() set ln.pmxddy=out("PMXDDY").get()
		if ln.pmxdic.isNull() set ln.pmxdic=out("PMXDIC").get()
		if ln.pmxdil.isNull() set ln.pmxdil=out("PMXDIL").get()
		if ln.pmxdiy.isNull() set ln.pmxdiy=out("PMXDIY").get()
		if ln.pmxpdc.isNull() set ln.pmxpdc=out("PMXPDC").get()
		if ln.pmxpdl.isNull() set ln.pmxpdl=out("PMXPDL").get()
		if ln.pmxpdy.isNull() set ln.pmxpdy=out("PMXPDY").get()
		if ln.pmxpic.isNull() set ln.pmxpic=out("PMXPIC").get()
		if ln.pmxpil.isNull() set ln.pmxpil=out("PMXPIL").get()
		if ln.pmxpiy.isNull() set ln.pmxpiy=out("PMXPIY").get()
		if ln.ppa.isNull() set ln.ppa=out("PPA").get()
		if ln.rafre.isNull() set ln.rafre=out("RAFRE").get()
		if ln.rald.isNull() set ln.rald=out("RALD").get()
		if ln.rand.isNull() set ln.rand=out("RAND").get()
		if ln.rpp.isNull() set ln.rpp=out("RPP").get()
		}
 
	// Initialize Original P&I and P&I Last Annual Review to PMTPI
	set ln.pmtorg=ln.pmtpi
	set ln.anpto=ln.pmtpi
 
	/*
	 Build payment schedule from secondary frequencies if secondary
	 frequency is a regular PROFILE frequency
	*/
	if ln.dist1fre="*" do { quit:ER

		if 'ln.dist2fre.isNull(),ln.dist2fre'="*" do { quit:ER
			do PSREGF1^PROCLN(ln.dist2fre,ln.dist2nd,ln.mdt,2,.ln) quit:ER
			set ln.dist2fre="*"
			}
 
		if 'ln.dist3fre.isNull(),ln.dist3fre'="*" do { quit:ER
			do PSREGF1^PROCLN(ln.dist3fre,ln.dist3nd,ln.mdt,3,.ln) quit:ER
			set ln.dist3fre="*"
			}
 
		if 'ln.dist4fre.isNull(),ln.dist4fre'="*" do { quit:ER
			do PSREGF1^PROCLN(ln.dist4fre,ln.dist4nd,ln.mdt,4,.ln) quit:ER
			set ln.dist4fre="*"
			}
		}
 
	// Handle payment schedule to set AMBAS and ONP if LNPS1 already set up
	if ln.dist1fre="*" do { quit:ER
		type Number CNT
		set CNT=0
		type ResultSet rs=Db.select("PDD,PMTPI","LNPS1","CID=:ln.cid")
		if rs.isEmpty() quit
		while rs.next() do {
			if ln.pips,(ln.pmtpi.isNull()) set ln.pmtpi = rs.getCol("PMTPI")
			set CNT=CNT+1
			}
		set ln.ambas=CNT
		set ln.onp=CNT
		}
		
	// Credit Bureau Code
	if ln.cbc.isNull(),'ln.colcd.isNull() do {
		type RecordUTBLCOLCD colcd=Db.getRecord("UTBLCOLCD","GRP=:ln.grp,KEY=:ln.colcd")
		set ln.cbc=colcd.cbc
		}
 
	// Set IRN/EIRN if SAN Processing
 	if ln.irn.isNull() set ln.irn=$$EIRN^PROCSAN(.ln,ln.eirn,ln.iacf,ln.dist1af) quit:ER
	if 'ln.eirn,ln.iacf=2 set ln.eirn=$$IRN^PROCSAN(.ln,ln.irn,ln.iacf,ln.dist1af) quit:ER
 
	// Disclosure APR
	if ln.disapr.isNull() set ln.disapr=ln.irn
 
	// Interest Change Frequency
	if ln.intfre.isNull() do {
		// Int change date
		set ln.ichnd=""
		set ln.ichld=""
		}
	else  do {
		#IF ('CUVAR.NOSEGMENTS!(CUVAR.NOSEGMENTS=3))!($$SEGUSE^BTTOPTMZ("L"))
			if ln.segments quit
		#ENDIF
		
		if ln.ichnd<%SystemDate do { quit:ER	// Cannot be in the past
			type String CTL
			if ln.intoff.isNull() set CTL=11
			else  set CTL="01"
			set ln.ichnd=$$FRSTDATE^ACNFUNCS(ln.amodt,ln.intfre,CTL,ln.intoff,,ln.dist1fre,ln.dist1nd,ln.intoffcl)
			}
		}
		
	// Int change last date
	if ln.ichnd,'ln.ichld do { quit:ER
		type Date JD
		type String FRE

		if ln.odd=%SystemDate set ln.ichld=ln.odd quit
		set JD=ln.ichnd set FRE="-"_ln.intfre
		for  set JD=$$NJD^UFRE(JD,FRE) quit:ER  quit:(JD'>ln.odd)!((JD<%SystemDate)&(JD>ln.odd))
		if JD<ln.odd set ln.ichld=ln.odd
		else  set ln.ichld=JD
		// 10.13.09 Varakrit Add
		if ln.ichld>%SystemDate set ln.ichld=%SystemDate
		}
 
	// Max funding limit
	if $$MAXFND^LNFUNCS(ln.type)>0 do {
		
		type Number AMT
		
		if ln.iam'<10,ln.iam'>14 set AMT=ln.crlmt-ln.iun
		else  set AMT=ln.crlmt

		type RecordHTBLLTYPE hltype=Db.getRecord("HTBLLTYPE","TYPE=:ln.type",1)
		set hltype.crlmt=hltype.crlmt+AMT
		
		do hltype.save()
		}
 
	/*
	 Set up coupon information and dayend file for coupon production
	 Note - similar code exists in the LN BU_COUPON_INFO trigger
	*/
	if ln.cbmet do {
		type Date CBPNDNEW
		type Number NUMCPNS

		if ln.cbmet=2,(ln.apcnd.isNull()),(ln.pchnd.isNull()) set ln.cbmet=1
		if ln.cbmet=1 set NUMCPNS=$$CBMET1^LNFUNCS(ln.onp,ln.cntcr) set CBPNDNEW=%SystemDate
		if ln.cbmet=2 set NUMCPNS=$$CBMET2^LNFUNCS(.CBPNDNEW,ln.cboff,ln.apcnd,ln.anfre,ln.pchnd,ln.pcfre,ln.icm,ln.dist1nd,ln.dist1fre)
		if ln.cbmet=3 set NUMCPNS=$$CBMET3^LNFUNCS(.CBPNDNEW,ln.cboff,ln.cbfre,ln.dist1nd,ln.dist1fre) set CBPNDNEW=%SystemDate
		set ln.cbpnd=CBPNDNEW
		set ln.cbpld=%SystemDate
		}
 
	// Set up defaults if DIST1FRE="*"
	if ln.dist1fre="*" do {
                if ln.amodt.isNull() set ln.amodt=ln.odd
                if ln.dist1ld.isNull() set ln.dist1ld=ln.odd
                if ln.schnd.isNull() set ln.schnd=ln.dist1nd
                if ln.schld.isNull() set ln.schld=ln.odd
                if 'ln.dist1af set ln.dist1af=+$$^SCARND(ln.onp*365/(ln.mdt-ln.odd),0,,,2)
                }

	// Calculate billing next and last dates
	type Date TMPDT
	if ln.bloff="1P" set TMPDT=ln.dist1ld
	else  set TMPDT=ln.dist1nd-ln.bloff
	if TMPDT>0 set ln.bndt=TMPDT
	set ln.bldt=ln.odd-1
	
	// Bill next date is prior to system date
	if (ln.bndt < %SystemDate) do {  quit:ER

		// Offset Period Billing is disabled
		if 'prodctl.opb quit

		/*
		 Otherwise, Offset Period Billing is enabled and the next billing
		 date should be reset to the Date of Note.  Generate the restriction
		 indicating an offset period bill will be produced.  If the account 
		 opening is backdated, UANTICLN will generate the bill.  If not, it
		 will be generated during the next dayend. 
		*/
		if ln.bndt < ln.dtnt do {
			set ln.bndt = ln.dtnt
			
			// Austin Mattson
			if ln.zhpflag,ln.dfp=%SystemDate set ln.bldt=ln.dtnt
			
			// Internal bill will be created without regular offset period
			if 'ln.zhpflag do Runtime.setErrXBAD("LN", "OPBNOBIL") quit:ER
			}
		}

	// Set teaser expiration date if necessary
	if ln.trate,ln.trexd.isNull() do { quit:ER
		type Date MDT,ODT
		type String TRM
		
		set TRM=prodctl.trtrm
		set ODT=ln.odd
		
		// ~p1 - Just displays RM returned by UMDT
		do TOP^UMDT if ER do Runtime.setErrMSG("LN",3333,RM) quit:ER
		set ln.trexd=MDT
		}

	// Set up calculated values Analysis chg offset dt
	if ln.apcnd set ln.anoffdt=ln.apcnd-ln.anoff
        
	// Int chg offset date
	if ln.ichnd,'ln.intoff.isNull() set ln.intoffdt=ln.ichnd-ln.intoff
 
	if ln.intfre="*2" set ln.ichnd=ln.dist2nd

	// Pmt chg offset date
	if ln.pchnd set ln.pcoffdt=ln.pchnd-ln.pcoff
 
	// Re-amort offset date
	if ln.rand set ln.randoff=ln.rand-ln.pcoff
 
	// Prepayment Penalty processing
	if 'ln.ppfreq.isNull() do { quit:ER
		if ln.ppld.isNull(),'ln.dist1fre.isNull() set ln.ppld=$$FRSTDATE^ACNFUNCS(ln.dfp,ln.dist1fre,"00") quit:ER
		if 'ln.ppld.isNull() set ln.ppnd=$$FRSTDATE^ACNFUNCS(ln.ppld,ln.ppfreq,"00") quit:ER
		}

	// Student Loans
	if ln.idpf=1,prodctl.defal=1,cif.semfin,'ln.ptf set ln.ptf=1
 
	/*
	 Inserting Interest Matrix, Interest Spread, and Interest Rounding Method is
	 invalid without an Interest Index
	*/
	if 'ln.intmat.isNull()!('ln.intspr.isNull())!('ln.rndmtd.isNull()) do {
		// Int/Div index must be defined
		if ln.index="" do Runtime.setErrMSG("LN",8745) quit:ER
		}
 
	// Statement Description (Detail)
	if ln.stmdscd.isNull() set ln.stmdscd=prodctl.stmdscd
 
	// Employer number
	if ln.emplno.isNull() set ln.emplno=cif.emplno
 
	// Field Staff Code
	if ln.fldstaff.isNull() do {
		type RecordAGENT agent=Db.getRecord("AGENT","AGENT=:ln.boo",1)
		if agent.getMode() set ln.fldstaff=agent.fldstaff
		}
 
	// Loan Settlement Account
	if ln.lnsa.isNull() set ln.lnsa=cif.lnsa
	
	// A fixed tolerance and tolerance percentage may not be defined together
	if 'ln.paytol.isNull(),'ln.paytolp.isNull() do Runtime.setErrMSG("LN","4482") quit:ER

	// Pmt/Mat Recalculation Opt can only be used with P&I loans
	if 'PCMVAL.extract(),ln.pmro>0 do Runtime.setErrXBAD("LN",236) quit:ER 

	// Define Subsidy next and last dates and rate if Subsidy Plan has a Frequency
	if 'ln.subpln.isNull() do {
		type Date TMPDT
		type RecordUTBLLNSUB lnsub=Db.getRecord("UTBLLNSUB","SUBPLN=:ln.subpln")
		if lnsub.rfre.isNull() quit
		
		if ln.odt<%SystemDate set TMPDT=ln.odt
		else  set TMPDT=%SystemDate
		
		set ln.subnd=$$FRSTDATE^ACNFUNCS(TMPDT,lnsub.rfre,1)
		set ln.subld=%SystemDate
		set ln.subrat=lnsub.prcntg
		}

	// Set Signature Card Change Date to create XSGNCRD entry 
	if ln.sgncrdchgdt.isNull() set ln.sgncrdchgdt=%SystemDate
	set ln.sgncrd=+ln.sgncrd
	set ln.psgncrdr=+ln.psgncrdr
	set ln.osgncrdc=+ln.osgncrdc
	
	// Conversion Date
	if 'ln.cnvdt.isNull(),'ln.stroff.isNull(),ln.srcdt.isNull() do {
		set ln.srcdt=$$FINDATE^LNCDI(ln.cnvdt,ln.stroff,ln.strcal,ln.srcbind)
		}

	// PBI - Passbook Flag
        if ln.pbi do {
                set ln.pbkbal=0
                set ln.pbkld=%SystemDate
                set ln.pbkseq=0
                set ln.pbklin=0
                set ln.pbksn=1
        }

	quit