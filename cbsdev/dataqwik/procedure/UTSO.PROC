//DO NOT MODIFY  TEMP COPY OF UTSO FOR TESTING ONLY|UTSO|||||||||||||||||||||1
UTSO(array,tso)	// TSO UTILITY
	/*
	       ORIG:  CALIENDO -  5 JUL 1990
	       DESC:  Provides translation (both in and out) of IBS TSO variable
	
	      INPUT:   LOCAL ARRAY TO SET/READ FROM
	               ARRAY(mnemonic)=value
	               TSO - transaction source field
	
	----- Revision History ----------------------------------------------
	03/20/10 - rsubasic
		   Modified IN section such that mnemonics "REV" and "EC" will
		   always be at the front of the output TSO string.  This
		   change is per item 8 in the document:
		   982-982-EC-Verify-Account_History.doc.

	05/02/07 - chhabris - CR26889
		   Modified the OUT section to set the array("UNK") if the 
		   value of TSO is not known and is not a valid transaction
		   source. Removed the check for tso to be numeric and also the
		   setting of array() in the for loop as this was not required.
		   Wrong ttx.tso was generated for the return item processing
		   when the transaction was posted from host using @UTLTTX and
		   the transaction source was given only a numeric value.

	11/22/04 - RussellDS - CR13365
		   Add public tag function calls to eliminate PSL warnings.
		   
		   Cleaned up precednece warning.
	
	03/10/04 - GIRIDHARANB - 8457
		   Modified parameters to a isDefined call.
		   
	04/18/01 - ARCILLAZ - 43583
		   Convert to PSL. Removed old revision history.

	---------------------------------------------------------------------
	*/
	
	quit
	

public IN(array,tso)
	/*
	Create TSO from ARRAY
	Call by:  D IN^UTSO(.array,.tso)
	Returns:  tso = data from array
	*/

	new N,X,F

	set N="" 
	set tso=$G(tso)
	if tso'="",$E(tso,$L(tso))'="~" set tso=tso_"~"
	
	/* 
	If there are already entries in tso, then call
	OUT to put in an X array, and only file back into
	tso if there isn't a new entry (in array).  This
	prevents duplicate entries.
	
	Example:  tso="IRAD#101~"
	
	           Due to the transaction being modified,
	           array("IRAD")=105.  By only filing back
	           existing entries if there isn't a new
	           value, tso now = "IRAD#105~" instead of
	           IRAD#101~IRAD#105~.
	*/

	if tso'="" do {
		do OUT(.X,tso)
		set tso=""
		}

	/*
	There are a couple items that have to be first in
	the output TSO string for KTB.  They are EC and REV.
	We will set them into the F array and then always
	output them first.
	*/

	set (F("EC"),F("REV"))=""  // These items come first
	for  set N=$O(F(N)) quit:N=""  do {
		if $D(array(N)) set tso=tso_N_"#"_array(N)_"~" quit
		if $D(X(N)) set tso=tso_N_"#"_X(N)_"~"
		}

	for  set N=$O(X(N)) quit:N=""  if '$D(array(N)),'$D(F(N)) set tso=tso_N_"#"_X(N)_"~"
	for  set N=$O(array(N)) quit:N=""  set:'$D(F(N)) tso=tso_N_"#"_array(N)_"~"

	if $E(tso,$L(tso))="~" set tso=$E(tso,1,$L(tso)-1)

	quit
	

public OUT(array,tso)
	/*
	Interpret TSO from ARRAY
	Call by:  D OUT^UTSO(.array,tso)
	Returns:  array(mnemonic)=value from tso
	*/

	quit:$G(tso)="" 

	new HIT,I,N,TRTYPE
	
	set HIT=0

	for I=1:1 set N=$P(tso,"~",I) quit:N=""  if N["#" set array($P(N,"#",1))=$P(N,"#",2,99) set HIT=1

	// I18N=OFF
	if HIT quit 

	// Make upwardly compatible
	if tso="INT" set array("INT")="" quit 
	if tso="INT ADJ" set array("INTADJ")="" quit 
	if tso="ACR ADJ" set array("ACRADJ")="" quit 
	if tso="PTS" set array("PTS")="PTS" quit
	
	if tso="FEE" set array("FEE")="" quit 
	if tso?1"ACH".E set array("ACH")=$P(tso,"-",2) quit 
	if tso?1"TFR-".E set array("TFR")=+$P(tso,"-",2) quit 

	// I18N=ON
	if tso?1.A.N do { quit:$D(array) 
		for I=$L(tso):-1:1 quit:$E(tso,I)?1A
		set TRTYPE=$E(tso,1,I) 
		if Db.isDefined("LNTRS","TRTYPE") set array("ESC")=tso
		}

	set array("UNK")=tso.extract(1,(tso.length()-1))

	quit


public FIELD(TSO,FIELD)	// Returns the value of field FIELD from TSO

	new ATSO

	if ($G(TSO)="")!($G(FIELD)="") quit ""

	do OUT(.ATSO,TSO)

	quit $G(ATSO(FIELD))
	
	
public FIELDIN(TSO,FIELD,VALUE)
	/*
	Poke value VALUE into field FIELD of TSO
	This function is the complement of FIELD.
	
	ARGUMENTS:
	    . TSO	The existing TSO string
	    . FIELD	The field identifier
	    . VALUE	The value that the field will take on
	
	EXAMPLE:
	    S TSO=$$FIELDIN^UTSO(TSO,"CUSTOMER","BHI")
	*/


	new ARRAY,TEMPTSO
	
	set VALUE=$G(VALUE)

	if $G(FIELD)="" quit $G(TSO)
	if $G(TSO)="" quit FIELD_"#"_VALUE

	do OUT(.ARRAY,TSO)

	set ARRAY(FIELD)=VALUE

	do IN(.ARRAY,.TEMPTSO)

	quit TEMPTSO