//DO NOT MODIFY  CAP Customer Inquiry|ZCAPCIF|||||||1

 /*	 ORIG: Pete Chenard - April 18, 2011
	 DESC: CAP Interfaces

	
	 ---- Comments --------------------------------------------------------
	This procedure contains labels that process each of the CAP interfaces.
	These interfaces include:
	
		CIF Search (individual)
		CIF Search (corporate)
		Deposit Hold Inquiry
		Maintain CIF (individual)
		Maintain CIF (corporate)
		Create Loan Account
		Collateral Inquiry (brief)
		Collateral Inquiry (full detail)
		Add Collateral Record
		Update Collateral
		Customer Exposure by CIF#
		Auto Debit Current Account
		Auto Debit Savings Account
		Account Relationship
		
	The labels for each of these services is stored in ZUTBLTRAN table.  ZMRPC777
	references that table to get the appropriate label^routine to call to
	process the incoming request.
	
	This procedure is called only by ZMRPC777.
	
	Refer to ZMRPC777.proc for specifics about that procedure.	
	
	
	 ---- Revision History ------------------------------------------------
	 
	11/05/12 - Wiphak
		   o Modified LOANCRE - use first payment date from cap
	 
	22/05/12 - Wiphak
		   o Modified COLADD for col type 11
		   CAP send ZRANUM in LOTNO field 
	 
	10/05/12 - Wiphak
		   o Modified CUSTEXP to change field 14th to pcm condition
	 
	24/01/12 - Wiphak
		   o CIFMAINTI - remove moo, tambol, soi, tanon, mooban for - value
	
	17/01/12 - Wiphak
		   o CIFMAINTI - Check for invalid sub occupation code 
	 
	11/11/11 - Wiphak
		   o Modified CUSTIND. Remove response unit field from message 
		   o fix busType in ZTYPE4 section. Use 45th piece instead of 41st
	 
	11/8/11  - Wiphak
		   o Fix bug in LOANCRE , sql update efd error, remove ","  
	 
	11/3/11  - Wiphak
		   o Fix LOANCRE for b-cash line
	 
	10/26/11 - Wiphak
		   o LOANCRE - set auto payment account to null if no account set
	 
	10/21/11 - Wiphak
		   o support type flood 
	
	09/30/11 - Wiphak
		   Modified 
		   o CUSTIND - use CIF.ZRESCD in stead of CITIZENSHIP
		   o LOANCRE - Display product ,program, campaign in error message if the mapping is not found
	 
	04/18/11 - Pete Chenard
		   Created.
	-----------------------------------------------------------------------*/

	#WARN * OFF
 	quit
 	
CUSTIND(String input)

 /* ***************************************************************************
 	CAP Customer Inquiry (individual)
 	
 	Search for and return customer data for all customer records that
 	match the input criteria.  There is a limit of 20 records maximum
 	to be returned.
 	
 	Refer to the spreadsheet Profile-to-CAP_data_mapping_asof_interface_20110105_PT for
 	details of the input and output records.
 
  

   Customer search / inquiry
	
	Input Arguments:
	
	   input	"|" delimited string	/REQ/VAL/READ
	   
	   	custType	Customer Type ("P" for personal)			Required
	   	inqType		Inquiry Type ("CI" Citizen ID; "PP" passport)		Required
	   	typeID		Value for Citizen Card or passport			Not Required
	   	custNum		Customer Number						Required if CI Num and passport are null
	   	custName	Customer Name						Not Required
	   	custSurname	Customer Surname					Not Required
	   	searchCond	Search Condition (how is this used?)			Not Required
	   	
	   
	Returns:
	
	   output	"|" delimited string containing customer properties.  Note that there are some columns that
	   		are returned multiple times.  This is intentional.
																	*/
	
	type public Number ER = 0
	type public String RM = ""
	type String custName, custNum, custSurname, custType, header, inqType, record = "", output, searchCond, typeValue
	type String respCode = "0000", respDesc = ""
	type Number ACN = "", CNT = 0, recordCount = 0
	type String ZCUSTDTL
	
	set header 		= input.piece("|",1,10)	// Common header
	set custType 		= input.piece("|",11)	// Customer Type: P=personal; C=Corporate
	set inqType 		= input.piece("|",12)	// Inquiry Type: "CI"=citizen ID card; "PP"=passport)
	set typeValue 		= input.piece("|",13)	// Citizen ID number or passport number
	set custNum 		= input.piece("|",14)	// Customer Number
	set custName 		= input.piece("|",15)	// Customer Name
	set custSurname 	= input.piece("|",16)	// Customer surname
	set searchCond 		= input.piece("|",17)	// Search condition (not currently used)
	set output = ""
	
	/* Search for the customer based on customer citizenship card ID, passport number, or
	   customer number.
	   
	   Get the customer number from the database and use that for the main select statement below */
	
	// Base search on citizenship ID number
	if inqType = "CI" do {
		// Search by customer citizen ID card
		if 'typeValue.isNull() do {
			type ResultSet rs = Db.select("ACN","CIF","ZCIZID=:typeValue")
			if 'rs.next() set ER = 1, RM = "Customer Citizenship ID Not Found: "_ typeValue quit
			set ACN = rs.getCol("ACN")
		}
		
		// if no citizenship ID was passed in, use customer number, if it was passed in
		else  if 'custNum.isNull() do {
			type RecordCIF cif = Db.getRecord("CIF","ACN=:custNum",1)
			if 'cif.getMode() set ER = 1, RM = "Invalid Customer Number "_custNum quit
			set ACN = cif.acn
		}
		
		// otherwise return an error indicating there is missing input data.
		//else  set ER = 1, RM = "Customer Number or Identifier Required" quit
	}
	
	// Base search on passport number
	else  if inqType = "PP" do {
		// search by customer passport number
		if 'typeValue.isNull() do {
			type ResultSet rs = Db.select("ACN","CIF","PASNUM=:typeValue")
			if 'rs.next() set ER = 1, RM = "Passport Number Not Found: "_ typeValue quit
			set ACN = rs.getCol("ACN")
		}
		
		// if no passport number was passed in, use customer number, if it was passed in.
		else  if 'custNum.isNull() do {
			type RecordCIF cif = Db.getRecord("CIF","ACN=:custNum",1)
			if 'cif.getMode() set ER = 1, RM = "Invalid Customer Number "_custNum quit
			set ACN = cif.acn
		}
	}
	
	// Base search on passport number
	else  if inqType = "TN" do {
		// search by customer passport number
		if 'typeValue.isNull() do {
			type ResultSet rs = Db.select("ACN","CIF","TAXID=:typeValue")
			if 'rs.next() set ER = 1, RM = "Tax ID Not Found: "_ typeValue quit
			set ACN = rs.getCol("ACN")
		}
		
		// if no tax id was passed in, use customer number, if it was passed in.
		else  if 'custNum.isNull() do {
			type RecordCIF cif = Db.getRecord("CIF","ACN=:custNum",1)
			if 'cif.getMode() set ER = 1, RM = "Invalid Customer Number "_custNum quit
			set ACN = cif.acn
		}
	}
	
	
	// else search by customer name, surname, and finally number if it was passed in
	else  do {
		if 'custName.isNull() set inqType = "NAME" quit
		else  if 'custSurname.isNull() set inqType = "SURNAME" quit
		else  if custNum.isNull() set ER = 1, RM =  "Customer Number or Identifier Required" quit
		// else return an error indicating missing inuput data
		if 'Db.isDefined("CIF","ACN=:custNum") set ER = 1, RM = "Invalid Customer Number "_custNum quit
		set ACN = custNum
	}
		
	if ER set output.piece("|",113) = "" quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_output)	// 1404 is the 'record not found' failure code
	
	type String SELECT1, WHERE
	
	
	// build WHERE clause based on the type of request this is.
	if inqType = "CI" set WHERE = "ZCIZID='"_typeValue_"'"
	else  if inqType = "PP" set WHERE = "PASNUM='"_typeValue_"'"
	else  if inqType = "TN" set WHERE = "TAXID='"_typeValue_"'"
	else  if inqType = "NAME" set WHERE = "NAM='"_custName_"'"
	else  if inqType = "SURNAME" set WHERE = "LNM='"_custSurname_"'"
	else  set WHERE = "ACN="_ACN
	if custType = "P" set WHERE = WHERE_" AND PERS=0"
	if custType = "C" set WHERE = WHERE_" AND PERS=1"


	/*
	do {
		// We need to determine if we have more than 1 record in the result set.  If we have more than 1, then
		//  build the output using the Personal List section of the record layout.  If we only have 1 record, then
		// build the output using the personal detail section of the layout.

		type String exe()
		
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Dynamic
		type ResultSet recCount = Db.select("COUNT(ACN)","CIF",WHERE)
		if recCount.next() set recordCount = recCount.getCol(1)
	}
	
	*/	
	
	
	do {
		catch error@"LOGERR" {
			set respCode = "1999"	// default failure code
			set respDesc = error.description
			quit
		}

		
		// We need to determine if we have more than 1 record in the result set.  If we have more than 1, then
		//   build the output using the Personal List section of the record layout.  If we only have 1 record, then
		// build the output using the personal detail section of the layout.

		
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Dynamic
		//type ResultSet cifrs1 = Db.select(SELECT1,"CIF",WHERE)
		type DbSet ds = Db.selectDbSet("CIF",WHERE)
		
		// Grab a maximum of 20 records
		while ds.next() do { quit:CNT = 20
			type Number acn
			
			// We need to replace the literals 'ZINSTDESC', 'ZEINSTDESC', 'FINSTDESC' in the
			// result set with the actual descriptions from ZUTBLINSTRRT based on the values of
			// CIF.ZINSTCD, CIF,ZEINSTCD, and CIF.ZFINSTCD
			type RecordCIF cif = ds.getRecord()

			new ZCIZID
			set ZCIZID=""
			if (",CI,PP,")[(","_inqType_",") do { if 1
				// search by citizend and passport 
				// return id type and id val as inq
				set ZCIZID=typeValue
			}
			else  do {
				if (cif.zcizid'="") set inqType="CI",ZCIZID=cif.zcizid
				else  set inqType="PP",ZCIZID=cif.pasnum
			}
			
			set record.piece("|",1) = cif.acn
			set record.piece("|",2) = cif.ztitle			// title
			set record.piece("|",3) = cif.xname			// name
			set record.piece("|",4) = inqType			// Passport or citizen card
			set record.piece("|",5) = ZCIZID			//cif.zcizid // citizen id
			set record.piece("|",7) = cif.crcd			// currency code
			set record.piece("|",8) = cif.boo			// Branch or ownership
			set record.piece("|",9) = cif.type			// customer type
			set record.piece("|",13) = cif.dob.toString("DD/MM/YEAR")	// date of birth
			// Only a single customer is selected, so send back full detail
		
			
			set ZCUSTDTL = ""
			if CNT=0 do {
				new pos
				set pos = 0
				set ZCUSTDTL.piece("|",pos+1) = cif.acn
				set ZCUSTDTL.piece("|",pos+2) = cif.ztitle			// title
				set ZCUSTDTL.piece("|",pos+3) = cif.nam				// name
				set ZCUSTDTL.piece("|",pos+4) = cif.zenam
				set ZCUSTDTL.piece("|",pos+5) = inqType				// Passport or citizen card
				set ZCUSTDTL.piece("|",pos+6) = ZCIZID				// citizen id
				set ZCUSTDTL.piece("|",pos+7) = cif.zcizmdt.toString("DD/MM/YEAR") // citizen card maturity date
				set ZCUSTDTL.piece("|",pos+9) = cif.bph				// business phone
				set ZCUSTDTL.piece("|",pos+10) = cif.bphext			// extension
				set ZCUSTDTL.piece("|",pos+11) = "B"
				set ZCUSTDTL.piece("|",pos+12) = cif.hph				// Home phone
				set ZCUSTDTL.piece("|",pos+13) = cif.zhphext			// extension
				set ZCUSTDTL.piece("|",pos+14) = "R"
				set ZCUSTDTL.piece("|",pos+15) = cif.aph				// alternate phone
				set ZCUSTDTL.piece("|",pos+17) = "M"
				set ZCUSTDTL.piece("|",pos+18) = cif.faxnum			// Fax number
				set ZCUSTDTL.piece("|",pos+20) = "F"
				set ZCUSTDTL.piece("|",pos+21) = cif.boo				// branch of ownership
				
				// wiphak
				// 11/11/11
				// remove response unit from return message
				// set ZCUSTDTL.piece("|",pos+22) = cif.zresunit			// response unit
				
				set ZCUSTDTL.piece("|",pos+23) = cif.dob.toString("DD/MM/YEAR")	// date of birth
				set ZCUSTDTL.piece("|",pos+24) = cif.sex
				set ZCUSTDTL.piece("|",pos+25) = cif.educ				// education level
				
				//Wiphak 30/09/2011
				// set ZCUSTDTL.piece("|",pos+26) = cif.nation			// nationality
				set ZCUSTDTL.piece("|",pos+26) = cif.zrescd
				
				set ZCUSTDTL.piece("|",pos+27) = cif.mar				// marital status
				set ZCUSTDTL.piece("|",pos+28) = cif.zreligioncd			// religion code
				
				// Wiphak 30/09/2011
				// set ZCUSTDTL.piece("|",pos+29) = cif.citzshp			// citizenship
				set ZCUSTDTL.piece("|",pos+29) = cif.nation
				
				set ZCUSTDTL.piece("|",pos+30) = cif.zresstat			// own rent
				set ZCUSTDTL.piece("|",pos+31) = cif.dep				// dependents
				//set ZCUSTDTL.piece("|",32) = cif.spouse				
				set ZCUSTDTL.piece("|",pos+32) = cif.zspounm				// spouse name
				set ZCUSTDTL.piece("|",pos+33) = cif.zspouid				// spouse id
				set ZCUSTDTL.piece("|",pos+34) = cif.zspoudob.toString("DD/MM/YEAR")	// spouse dob
				
				// there's no working company name in cbs, so user has to key in 
				set ZCUSTDTL.piece("|",pos+36) = cif.zoad1				// work address
				set ZCUSTDTL.piece("|",pos+37) = cif.zocity				// work city
				set ZCUSTDTL.piece("|",pos+38) = cif.bph				// work phone
				set ZCUSTDTL.piece("|",pos+39) = cif.bphext			// extension
				// set ZCUSTDTL.piece("|",pos+40) = cif.zposcd			// job title
				set ZCUSTDTL.piece("|",pos+40) = cif.zperpos.extract(1,15)
				//set ZCUSTDTL.piece("|",42) = cif.zocc				// occupation code
				set ZCUSTDTL.piece("|",pos+42) = cif.zsocc			// occupation code
				set ZCUSTDTL.piece("|",pos+43) = cif.inc				// salary
				set ZCUSTDTL.piece("|",pos+44) = +(cif.zsrcinc)			// source of income
				set ZCUSTDTL.piece("|",pos+45) = cif.zipc				// customer type
				set ZCUSTDTL.piece("|",pos+46) = "A0000000"
				set ZCUSTDTL.piece("|",pos+49) = cif.mad1_" "_cif.mad2		// address line 1
				set ZCUSTDTL.piece("|",pos+50) = cif.mad3_" "_cif.mad4		// address line 2
				
				type String ZCNTRY,ZSTATE,ZDIST,ZSUBDIST,ZTAMBOND
				set ZCNTRY=cif.mcntry
				set ZSTATE=cif.mstate
				set ZDIST=cif.mcity
				set ZSUBDIST=cif.zmsdiscd
				set ZTAMBOND=""
				if ZCNTRY'="",(ZSTATE'=""),(ZDIST'=""),(ZSUBDIST'="") do {
					if Db.isDefined("ZUTBLSDISTCD","CNTRY=:ZCNTRY,STATE=:ZSTATE,DIST=:ZDIST,SUBDIST=:ZSUBDIST") do {
						type RecordZUTBLSDISTCD zdis=Db.getRecord("ZUTBLSDISTCD","CNTRY=:ZCNTRY,STATE=:ZSTATE,DIST=:ZDIST,SUBDIST=:ZSUBDIST")
						set ZTAMBOND=zdis.desc
					}
				}
				set ZCUSTDTL.piece("|",pos+51) = $C(181)_"."_ZTAMBOND
                                set ZCUSTDTL.piece("|",pos+52) = ZSTATE_ZDIST
				set ZCUSTDTL.piece("|",pos+53) = ZSTATE			// coty
				set ZCUSTDTL.piece("|",pos+54) = cif.mzip				// zip code
				set ZCUSTDTL.piece("|",pos+56) = cif.mcntry			// country
				
				set ZCNTRY=cif.pcntry
				set ZSTATE=cif.pstate
				set ZDIST=cif.pcity
				set ZSUBDIST=cif.zpsdiscd
				set ZTAMBOND=""
				if ZCNTRY'="",(ZSTATE'=""),(ZDIST'=""),(ZSUBDIST'="") do {
					if Db.isDefined("ZUTBLSDISTCD","CNTRY=:ZCNTRY,STATE=:ZSTATE,DIST=:ZDIST,SUBDIST=:ZSUBDIST") do {
						type RecordZUTBLSDISTCD zdis=Db.getRecord("ZUTBLSDISTCD","CNTRY=:ZCNTRY,STATE=:ZSTATE,DIST=:ZDIST,SUBDIST=:ZSUBDIST")
						set ZTAMBOND=zdis.desc
					}
				}
				set ZCUSTDTL.piece("|",pos+57) = cif.pad1_" "_cif.pad2
				set ZCUSTDTL.piece("|",pos+58) = cif.pad3_" "_cif.pad4
				set ZCUSTDTL.piece("|",pos+59) = $C(181)_"."_ZTAMBOND
				set ZCUSTDTL.piece("|",pos+60) = ZSTATE_ZDIST
				set ZCUSTDTL.piece("|",pos+61) = ZSTATE
				set ZCUSTDTL.piece("|",pos+62) = cif.pzip
				set ZCUSTDTL.piece("|",pos+64) = cif.pcntry
				
				set ZCNTRY=cif.zocntry
				set ZSTATE=cif.zostate
				set ZDIST=cif.zocity
				set ZSUBDIST=cif.zosdiscd
				set ZTAMBOND=""
				if ZCNTRY'="",(ZSTATE'=""),(ZDIST'=""),(ZSUBDIST'="") do {
					if Db.isDefined("ZUTBLSDISTCD","CNTRY=:ZCNTRY,STATE=:ZSTATE,DIST=:ZDIST,SUBDIST=:ZSUBDIST") do {
						type RecordZUTBLSDISTCD zdis=Db.getRecord("ZUTBLSDISTCD","CNTRY=:ZCNTRY,STATE=:ZSTATE,DIST=:ZDIST,SUBDIST=:ZSUBDIST")
						set ZTAMBOND=zdis.desc
					}
				}
				
				set ZCUSTDTL.piece("|",pos+65) = cif.zoad1_" "_cif.zoad2
				set ZCUSTDTL.piece("|",pos+66) = cif.zoad3_" "_cif.zoad4
				set ZCUSTDTL.piece("|",pos+67) = $C(181)_"."_ZTAMBOND
				set ZCUSTDTL.piece("|",pos+68) = ZSTATE_ZDIST
				set ZCUSTDTL.piece("|",pos+69) = ZSTATE
				set ZCUSTDTL.piece("|",pos+70) = cif.zozip
				set ZCUSTDTL.piece("|",pos+72) = cif.zocntry
				set ZCUSTDTL.piece("|",pos+74) = $S(cif.ta.isNull():"0.00",1:cif.ta)
				set ZCUSTDTL.piece("|",pos+89) = cif.zbph2
				set ZCUSTDTL.piece("|",pos+90) = cif.zbphext2
				set ZCUSTDTL.piece("|",pos+91) = "B"
				set ZCUSTDTL.piece("|",pos+92) = cif.zhph2
				set ZCUSTDTL.piece("|",pos+93) = cif.zhphext2
				set ZCUSTDTL.piece("|",pos+94) = "H"
				set ZCUSTDTL.piece("|",pos+95) = cif.zaph2
				set ZCUSTDTL.piece("|",pos+97) = "M"
				set ZCUSTDTL.piece("|",pos+98) = cif.zfaxnum2
				set ZCUSTDTL.piece("|",pos+100) = "F"
				set ZCUSTDTL.piece("|",pos+101) = ""
				}		
			set CNT = CNT + 1
			if CNT>1 set output = output_124.char()	// add tab between the second and nth record
		
			set output = output_record
			}
		}
	if CNT = 1 set output=output_124.char()_ZCUSTDTL
	
	if ER.get() quit (header_"|"_$$GETTIME()_"|0||1999|"_RM.get()_"|"_output)	
	set header.piece("|",7) = CNT		
	quit (header_"|"_$$GETTIME()_"|0||0||"_output)





CUSTCORP(String input)

 /* ***************************************************************************
 	CAP Customer Inquiry (corporate)
 	
 	Search for and return customer data for all customer records that
 	match the input criteria.  There is a limit of 20 records maximum
 	to be returned.
 	
 	Refer to the spreadsheet Profile-to-CAP_data_mapping_asof_interface_20110105_PT for
 	details of the input and output records.
 
  

   Customer search / inquiry
	
	Input Arguments:
	
	   input	"|" delimited string	/REQ/VAL/READ
	   
	   	custType	Customer Type ("P" for personal)
	   	inqType		Inquiry Type ("CI" Citizen ID; "PP" passport)
	   	typeID		Value for Citizen Card or passport
	   	custNum		Customer Number
	   	custName	Customer Name
	   	custSurname	Customer Surname
	   	searchCond	Search Condition (how is this used?)
	   	
	   
	Returns:
	
	     output	"|" delimited string containing customer properties
	   
		CIF.ACN
		CIF.ZKTBCCODE
		CIF.ZCIZID
		CIF.ZTITLE
		CIF.NAM
		send null
		CIF.CRCD
		CIF.BOO
		CIF.TYPE
		CIF.PAD1
		'B'
		CIF.BPH
		CIF.ZJRDATE
		CIF.ACN
		CIF.ZTITLE
		CIF.NAM
		send null
		send null
		CIF.ZENAM
		send null
		send null
		CIF.ZKTBCCODE
		if TAXID is not null send CIF.TAXID else if Juristic_ID is not null send CIF.ZJIN
		CIF.ZJRDATE
		CIF.MCNTRY
		CIF.MAD1
		CIF.MAD2
		CIF.ZMSDISCD
		CIF.MCITY
		CIF.MSTATE
		CIF.MZIP
		CIF.MCNTRY
		CIF.ZRESCD
		CIF.EMAIL
		CIF.PAD1
		CIF.PAD2
		CIF.ZPSDISCD
		CIF.PCITY
		CIF.PSTATE
		CIF.PCNTRY
		CIF.PCNTRY
		send null
		'B'
		CIF.BPH
		CIF.BPHEXT
		CIF.ZCNTITLE
		CIF.ZCNNM
		CIF.ZCNHPH
		CIF.ZCNPOS
		CIF.ZESTOBJ
		CIF.ZCNOWN
		CIF.AS
		CIF.NE
		CIF.ZCNSME
		CIF.PERS=1
		CIF.ZISICSD
		CIF.ZISICGC
		CIF.BOO
		CIF.ZRESUNIT
		send null
		CIF.TA
		send null
		send null
		CIF.ZREGCAP
		CIF.ZPAIDCAP
		CIF.CRERTSC
		CIF.ZRRTDT
		CIF.ZINSTDESC
		CIF.ZRRTLTD
		CIF.ZRRTNTD
		CIF.ZRRTDFLG
		CIF.ZECRRT
		CIF.ZERRTDT
		CIF.ZEINSTDESC
		CIF.ZFCRRT
		CIF.ZFRRTDT
		CIF.ZFINSTDESC
		'B'
		CIF.ZBPH2
		CIF.ZBPHEXT2
		'M'
		CIF.APH
		send null
		'M'
		CIF.ZAPH2
		send null
		'F'
		CIF.FAXNUM
		send null
		'F'
		CIF.ZFAXNUM2
		send null
		send null
		send null
		send null
		send null
		send null
		send null
	   
	*/
	
	type public Number ER = 0
	type public String RM = ""
	type String custName, custNum, custType, header, inqType, output, record = "", searchCond, typeValue
	type String respCode = "0000", respDesc = ""
	type Number ACN = "", CNT = 0, recordCount = 0
	


	set header 		= input.piece("|",1,10)	// Common Header
	set custType 		= input.piece("|",11)	// Customer Type: P=personal; C=Corporate
	set inqType 		= input.piece("|",12)	// Inquiry Type: "TN":Tax ID; "SC":Juristic ID)
	set typeValue 		= input.piece("|",13)	// Citizen ID number or passport number
	set custNum 		= input.piece("|",14)	// Customer Number
	set custName 		= input.piece("|",15)	// Customer Name
	set searchCond 		= input.piece("|",16)	// Search condition
	set output = ""
	
	/* Search for the customer based on customer citizenship card ID, passport number, or
	   customer number.
	   
	   Get the customer number from the database and use that for the main select statement below */
	   
	if inqType = "TN" do {
		// Search by customer citizen ID card
		if 'typeValue.isNull() do {
			type ResultSet rs = Db.select("ACN","CIF","TAXID=:typeValue")
			if 'rs.next() set ER = 1, RM = "Tax ID Not Found: "_ typeValue quit
			set ACN = rs.getCol("ACN")
		}
		
		else  if 'custNum.isNull() do {
			type RecordCIF cif = Db.getRecord("CIF","ACN=:custNum",1)
			if 'cif.getMode() set ER = 1, RM = "Invalid Customer Number "_custNum quit
			set ACN = cif.acn
		}
		
		else  set ER = 1, RM = "Customer Number or Identifier Required" quit
	}
	
	else  if inqType = "SC" do {
		// search by customer passport number
		if 'typeValue.isNull() do {
			type ResultSet rs = Db.select("ACN","CIF","ZJIN=:typeValue")
			if 'rs.next() set ER = 1, RM = "Juristic Number Not Found: "_ typeValue quit
			set ACN = rs.getCol("ACN")
		}
		
		else  if 'custNum.isNull() do {
			type RecordCIF cif = Db.getRecord("CIF","ACN=:custNum",1)
			if 'cif.getMode() set ER = 1, RM = "Invalid Customer Number "_custNum quit
			set ACN = cif.acn
		}
		
		else  set ER = 1, RM = "Customer Number or Identifier Required" quit
	}
	
	// else search by customer name, surname, and finally number if it was passed in
	else  do {
		if 'custName.isNull() set inqType = "NAME" quit
		else  if custNum.isNull() set ER = 1, RM =  "Customer Number or Identifier Required" quit
		// else return an error indicating missing inuput data
		if 'Db.isDefined("CIF","ACN=:custNum") set ER = 1, RM = "Invalid Customer Number "_custNum quit
		set ACN = custNum
	}
	
	if ER set output.piece("|",102) = "" quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_output)	// 1404 is the 'record not found' failure code
	
	type String SELECT, SELECT1, WHERE
	
	// build WHERE clause based on the type of request this is.
	if inqType = "TN" set WHERE = "TAXID='"_typeValue_"'"
	else  if inqType = "SC" set WHERE = "ZJIN='"_typeValue_"'"
	else  if inqType = "NAME" set WHERE = "NAM='"_custName_"'"
	else  set WHERE = "ACN="_ACN
	if custType = "P" set WHERE = WHERE_" AND PERS=0"
	if custType = "C" set WHERE = WHERE_" AND PERS=1"

	/*
	do {
		// We need to determine if we have more than 1 record in the result set.  If we have more than 1, then
		//  build the output using the Personal List section of the record layout.  If we only have 1 record, then
		// build the output using the personal detail section of the layout.

		type String exe()
		
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Dynamic
		type ResultSet recCount = Db.select("COUNT(ACN)","CIF",WHERE)
		if recCount.next() set recordCount = recCount.getCol(1)
	}
	*/	
	type String ZCUSTDTL
	
	type DbSet ds = Db.selectDbSet("CIF",WHERE)
	// Grab a maximum of 20 records
	while ds.next() do { quit:CNT = 20
		type Number acn
			
		// We need to replace the literals 'ZINSTDESC', 'ZEINSTDESC', 'FINSTDESC' in the
		// result set with the actual descriptions from ZUTBLINSTRRT based on the values of
		// CIF.ZINSTCD, CIF,ZEINSTCD, and CIF.ZFINSTCD
		type RecordCIF cif = ds.getRecord()

		
		// if recordCount > 1 do {
		do {
			set record.piece("|",1) = cif.acn
			set record.piece("|",2) = cif.zktbccode			// ktb code
			set record.piece("|",3) = cif.zcizid			// citizen id
			set record.piece("|",4) = cif.ztitle			// corp. title
			set record.piece("|",5) = cif.nam			// name
			set record.piece("|",7) = cif.crcd			// currency cod
			//set record.piece("|",8) = cif.dob.toString("DD/MM/YEAR")	// Branch or ownership
			set record.piece("|",8) = cif.boo
			set record.piece("|",9) = cif.zktbccode			// ktb code
			set record.piece("|",10) = cif.pad1_" "_cif.pad2	// address
			set record.piece("|",12) = cif.bph			// phone
			set record.piece("|",13) = cif.zjrdate.toDate("DD/MM/YEAR")	// 
		}
		//set record = cifrs1.getRow().toString()
			
		
		set ZCUSTDTL = ""
		// Only a single customer is selected, so send back full detail
		if CNT=0 do {
			
			set ZCUSTDTL.piece("|",1) = cif.acn
			set ZCUSTDTL.piece("|",2) = cif.ztitle			// title
			set ZCUSTDTL.piece("|",3) = cif.xname			// name
			set ZCUSTDTL.piece("|",6) = cif.zenam			// english name
			set ZCUSTDTL.piece("|",9) = cif.ccode			// customer code	
			set ZCUSTDTL.piece("|",10) = inqType			// CI or TN
			set ZCUSTDTL.piece("|",11) = cif.zjrdate.toString("DD/MM/YEAR")
			set ZCUSTDTL.piece("|",12) = cif.zrescd			// resident. code
			set ZCUSTDTL.piece("|",13) = cif.mad1
			set ZCUSTDTL.piece("|",14) = cif.mad2
			set ZCUSTDTL.piece("|",15) = cif.zmsdiscd		
			set ZCUSTDTL.piece("|",16) = cif.mcity
			set ZCUSTDTL.piece("|",17) = cif.mstate
			set ZCUSTDTL.piece("|",18) = cif.mzip
			set ZCUSTDTL.piece("|",19) = cif.mcntry
			set ZCUSTDTL.piece("|",21) = cif.email
			set ZCUSTDTL.piece("|",22) = cif.pad1
			set ZCUSTDTL.piece("|",23) = cif.pad2
			set ZCUSTDTL.piece("|",24) = cif.zpsdiscd
			set ZCUSTDTL.piece("|",25) = cif.pcity
			set ZCUSTDTL.piece("|",26) = cif.pstate
			set ZCUSTDTL.piece("|",27) = cif.pcntry
			set ZCUSTDTL.piece("|",30) = "B"
			set ZCUSTDTL.piece("|",31) = cif.bph
			set ZCUSTDTL.piece("|",32) = cif.bphext
			set ZCUSTDTL.piece("|",37) = cif.zestobj
			set ZCUSTDTL.piece("|",39) = cif.as
			set ZCUSTDTL.piece("|",40) = cif.ne
			set ZCUSTDTL.piece("|",42) = cif.zktbccode
			set ZCUSTDTL.piece("|",45) = cif.boo
			set ZCUSTDTL.piece("|",48) = cif.ta
			set ZCUSTDTL.piece("|",51) = cif.zregcap
			set ZCUSTDTL.piece("|",52) = cif.zpaidcap
			set ZCUSTDTL.piece("|",53) = cif.crertsc
			set ZCUSTDTL.piece("|",56) = cif.schrvld.toString("DD/MM/YEAR")
			set ZCUSTDTL.piece("|",57) = cif.schrvnd.toString("DD/MM/YEAR")
			//Suriya D.,shifted the columns by -1
			set ZCUSTDTL.piece("|",65) = "B"
			set ZCUSTDTL.piece("|",66) = cif.bph
			set ZCUSTDTL.piece("|",67) = cif.bphext
			set ZCUSTDTL.piece("|",68) = "O"
			set ZCUSTDTL.piece("|",69) = cif.aph
			set ZCUSTDTL.piece("|",72) = cif.aph3
			//Suriya D.,end of modification
			set ZCUSTDTL.piece("|",85) = ""
		}
	
					
		set CNT = CNT + 1
		// if CNT>1 set output = output_124.char()	// add tab between the second and nth record
		
		set output = output_record
	}
	if CNT = 1 set output=output_ZCUSTDTL
		
	set header.piece("|",7) = CNT		
	quit (header_"|"_$$GETTIME()_"|0||0||"_output)

		
public LOGERR(Error error)

	type String ERRMSG = ""
	
	set ERRMSG = error.description
 	do LOG^UTLEXC($T(+0), "*", , "*", "", ERRMSG)
	quit


public LOANCRE(String input)

	/* Create Loan Account */
	
	type public Number ER = 0
	type public String RM = ""
	type String custName, custNum, custType, header, inp, inqType, output, reqID, searchCond, typeValue
	type String ARR(), CRCD, ODT, respCode = "0000", respDesc = "", RETURN
	type Number ACN = "", BOO, CNT = 0, count, i, pos, TYPE, ZTYPE
	type Number ZRPMTHD = 0


	set header = input.piece("|",1,10)	// Common Header
	set output = ""

	// Build Column=Value input string for MRPC044
	set pos = 11
	set inp = "LN.ACN="_input.piece("|",11), ACN = input.piece("|",11)				// Account
	
	// Fac. Code contains keys to ZUTBLPRODCAP.  Go to that table and get account type,
	// subtype, market code, and dealer code and set those into the ln object.
	type String acctype, campaign, prod, prog
	
	// Wiphak 06/06/2011
	set prod = input.piece("|",12)
	set prog = input.piece("|",17)
	set campaign = input.piece("|",20)
	/*
	set acctype = input.piece("|",12)								// Facility code
	set prod = acctype.piece(",",1)
	set prog = acctype.piece(",",2)
	set campaign = acctype.piece(",",3)
	*/
	
	type String ZODTYPE
	set ZODTYPE = ""
	do {
		if prod.isNull() ! prog.isNull() ! campaign.isNull() set ER = 1, RM = "Facility Code Data is Null" quit
		type RecordZUTBLPRODCAP prodcap = Db.getRecord("ZUTBLPRODCAP","MPROD=:prod, PPROG=:prog, PCAMPAIGN=:campaign",1)
		
		// Wiphak 30/09/2011
		// if 'prodcap.getMode() set ER = 1, RM = "Facility Code not defined in ZUTBLPRODCAP table" quit
		if 'prodcap.getMode() set ER = 1, RM = "MPRCD:"_prod_",PROG:"_prog_",CAMPAIGN:"_campaign_" not defined in ZUTBLPRODCAP table" quit
		
		set inp = inp_",LN.TYPE="_prodcap.type, TYPE = prodcap.type
		set inp = inp_",LN.SUBT="_prodcap.subt
		set inp = inp_",LN.ZMKTCD="_prodcap.zmktcd
		set inp = inp_",LN.ZDLRCD="_prodcap.zdlrcd
		set ZTYPE = prodcap.ztype	// ZTYPE: 1-Financing, 2-Committment, 3-Committment (discount), 4-OD
		set ZODTYPE = prodcap.odtyp
	}
	
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_output)
	
	type Number ODCID
	// Overdraft account
	if ZTYPE = 4 do { 	
		type Number cbCount, cbPos, mtCount, pos, SEQ
		set mtCount 	= input.piece("|",49)	// multi tier row count
		set cbPos 	= 50 + (mtCount * 8)		// co-borrower position
		set cbCount 	= input.piece("|",cbPos)	// co-borower count 		
		set pos 	= cbPos + (cbCount * 10)	// first position after co-borrower information
		// set ODCID 	= +input.piece("|", pos + 3)	// ovefdraft account
		
		set ODCID 	= +input.piece("|",43)	// ovefdraft account
		if ODCID=0 set ER = 1,RM="OD Account is not specified" quit
		if 'Db.isDefined("DEP","CID=:ODCID") set ER=1,RM="Invalid OD Account: "_ODCID quit
		
		set SEQ 	= ^ZODTIER(ODCID,"").order(-1) + 1	// get next sequence
		type RecordZODTIER zodtier 	= Db.getRecord("ZODTIER","CID=:ODCID, SEQ=:SEQ",1)
		//set zodtier.active = 1
		type RecordDEP zoddep	= Db.getRecord("DEP","CID=:ODCID", 1)
		do zoddep.setAuditFlag(1)
		if zoddep.zstatcd=4 set ER=1,RM="OD Account closed" quit
		do ZTYPE4(.zodtier, zoddep)	// Create ZODTIER entry and update the DEP overdraft account
		if 'ZODTYPE.isNull() set zodtier.odtyp = ZODTYPE

		do zoddep.save()
		if ER do { quit
			set RM=RM.get()
			if RM.isNull() set RM="Save DEP error"
		}

		do zodtier.save()
		if ER do { quit
			set RM=RM.get()
			if RM.isNull() set RM="Save OD Tier error"
		}
		
	}
	
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_output)
	
	if ZTYPE = 4 quit (header_"|"_$$GETTIME()_"|0||0||"_ODCID)
	
	//set inp = inp_",LN.ZMKTCD="_input.piece("|",12)						// Facility Code
	
	
	set inp = inp_",LN.BOO="_input.piece("|",13), BOO = input.piece("|",13)				// Branch of Ownership
	//set inp = inp_",LN.TYPE="_input.piece("|",17), TYPE = input.piece("|",17)			// Product type
	set inp = inp_",LN.ODT="_input.piece("|",15).toDate("DD/MM/YEAR"), ODT = input.piece("|",15).toDate("DD/MM/YEAR")	// Open date
	set inp = inp_",LN.ZREQAMT="_input.piece("|",16)						// amount requested
	set inp = inp_",LN.CRCD="_input.piece("|",18), CRCD = input.piece("|",18)			// Currency code						// Purpose code
	
	if ZTYPE = 1 set inp = inp_",LN.ZPERCONS="_input.piece("|",19)					// Purpose code
	else  if ZTYPE = 2 ! (ZTYPE = 3) set inp = inp_",LN.ZARRPUR="_input.piece("|",19)		
	
	
	
	//set inp = inp_",LN.ZDLRCD="_input.piece("|",20)						// Dealer Code
	set inp = inp_",LN.ZACCOID="_input.piece("|",21)						// User
	set inp = inp_",LN.TRM="_input.piece("|",22,23).translate("|")
	set inp = inp_",LN.ONP="_input.piece("|",22)
	
	
	//set inp = inp_",LN.PMTPI="_input.piece("|",24)						// P&I
	//set inp = inp_",LN.LPDTAMT="_input.piece("|",25)						// Last payment amount
	// hello
	
	type Number ZPMTAMT
	type String ZCOLLREQ
	// set ZPMTAMT = input.piece("|",24)
	set ZCOLLREQ = input.piece("|",27)

	// Grace period fields
	type String gp = input.piece("|",26)								// Grace per. method
	type String gpTerm = input.piece("|",28)							// Grace per. method
	if gp = "I" set gpTerm = ""
	if gp = "E" set gpTerm = +gpTerm
	
	// Wiphak
	// update these fields after loan created, since we need PCM from MRPC
	// if gp = "E" set inp = inp_",LN.PCM=3,LN.FPA=0,LN.PMTPI=,LN.FIA="  //,LN.EFD="_(ODT + input.piece(pos+2) + 1)
	
	type String profit = input.piece("|",30)	// to be used later in this process		// interest rate
	//if profit = input.piece("|",51) set inp = inp_",LN="

	set autoDebit = input.piece("|",40)				// auto debit account
	set autoDebit = autoDebit.trim()
	if ZTYPE = 1 do {
		type String ZCOLRST
		set ZCOLLREQ=ZCOLLREQ.trim()
		set ZCOLRST=""
		if ZCOLLREQ=1 set ZCOLRST="000000"
		if ZCOLLREQ=0 set ZCOLRST="286082"
		
		set inp = inp_",LN.ZSP="_input.piece("|",31)							// Selling price
		set inp = inp_",LN.ZSELRATE="_(100*input.piece("|",32)) 
		set inp = inp_",LN.ZCOLLREQ="_ZCOLRST
		
		if 'autoDebit.isNull() do {
			set autoDebit=+autoDebit
			if 'Db.isDefined("DEP","CID=:autoDebit") set ER=1,RM="Invalid auto debit a/c: "_autoDebit quit
		}
	}
	if ER.get() quit (header_"|"_$$GETTIME()_"|0||1404|"_RM.get()_"|"_output)
	
	if ZTYPE = 2 ! (ZTYPE = 3) set inp = inp_",ZRECBY="_input.piece("|",33)			
		
	// test
	/*
	set input.piece("|",34)=100
	set input.piece("|",47)="012001"
	set input.piece("|",41)=""
	*/
								// Recommended by
	set inp = inp_",LN.ZAPPRVCD="_input.piece("|",34)						// Approved by
	set inp = inp_",LN.ZDATEREC="_input.piece("|",35)						// Date recommended
	set inp = inp_",LN.ZAPPDT="_input.piece("|",36).toDate("DD/MM/YEAR")				// Date approved
	set inp = inp_",LN.MDT="_input.piece("|",37).toDate("DD/MM/YEAR")				// Maturity date

	if ZTYPE = 1 set inp = inp_",LN.DFP="_input.piece("|",38).toDate("DD/MM/YEAR")		// Next payment date
	
	type String ZCALDOM
	type Number dom = input.piece("|",39)								// Payment frequency
	// if dom.isNull() ! (dom = 31) set inp = inp_",LN.DIST1FRE=1MNE",ZCALDOM="MAE"
	// else set inp = inp_",LN.DIST1FRE=1MN"_dom,ZCALDOM="MA"_dom
	
	/*
	if (TYPE=7100)!(TYPE=7200)!(TYPE=7300)!(TYPE=7400) do {	
		if dom.isNull() ! (dom = 31) set inp = inp_",LN.DIST1FRE=1MPE",ZCALDOM="MPE"
		else set inp = inp_",LN.DIST1FRE=1MP"_dom,ZCALDOM="MP"_dom
	}
	else  do {	
		if dom.isNull() ! (dom = 31) set inp = inp_",LN.DIST1FRE=1MNE",ZCALDOM="MNE"
		else set inp = inp_",LN.DIST1FRE=1MN"_dom,ZCALDOM="MN"_dom
	}
	*/
	if dom.isNull() ! (dom = 31) set inp = inp_",LN.DIST1FRE=1MPE",ZCALDOM="MPE"
	else  set inp = inp_",LN.DIST1FRE=1MN"_dom,ZCALDOM="MN"_dom
	
	
	
	set agentCode = input.piece("|",41)				// agent code
	set empCode = input.piece("|",42)				// employee code
	set depAcct = input.piece("|",43)				// deposit overdraft account
	
	set agentCode = agentCode.trim()
	type String ZCBSAGEN
	set ZCBSAGEN = ""
	if agentCode '= "" do {
		type ResultSet zrsagent = Db.select("AGENT","AGENT","ZCPNAME=:agentCode")
		if zrsagent.next() set ZCBSAGEN = zrsagent.getCol("AGENT")
	}
	set autoDebit=autoDebit.trim() 
	if autoDebit'="" do {
		set inp = inp_",LN.AUPTCID="_autoDebit
		set inp = inp_",LN.ALPDUE=1"
	}
	set inp = inp_",LN.ZAGENT="_ZCBSAGEN
	set inp = inp_",LN.ZPROJCODE="_empCode
	//set inp = inp_",LN.="_depAcct
	// depAcct = need to find out what to do with this field.
	
	if 'ZCBSAGEN.isNull() set ZRPMTHD = 1
	if (ZTYPE=1),(autoDebit'=0) set ZRPMTHD = 2
	
	// 0 no agent and no debitAcct
	// 1 if agent defined
	// 2 if debitAcc exists
	set inp = inp_",LN.ZRPAYMETH="_ZRPMTHD	
	
	// Wiphak 06/06/2011
	type String busType = input.piece("|",45)						// Business type
	set inp = inp_",LN.ZISICSD="_busType.extract(2,4)
	set inp = inp_",LN.ZISICGC="_busType.extract(5)


	set inp = inp_",LN.ZISICTS="_busType.extract(6,8)
	
	set inp = inp_",LN.ZARRPUR="_input.piece("|",47)						// Purpose code
	
	if ZTYPE = 1 do {
		type String sptf = input.piece("|",51)								// SPTF Dual Mode
		if sptf = "X" set inp = inp_",LN.PCM=3,LN.FPA=0,LN.FIA=,LN.PMTPI="
		else  if sptf = "Q" set inp = inp_",LN.DIST1FRE=*,LN.DIST2FRE=1MN"_dom_",LN.DIST3FRE=3MN"_dom	
		else  if sptf = "H" set inp = inp_",LN.DIST1FRE=*,LN.DIST2FRE=1MN"_dom_",LN.DIST3FRE=6MN"_dom	
		else  if sptf = "A" set inp = inp_",LN.DIST1FRE=*,LN.DIST2FRE=1MN"_dom_",LN.DIST3FRE=12MN"_dom	
	}
	
	
	
	set inp = inp_",LN.AMTREQ="_input.piece("|",52)							// Amount requested
	
	
	
	// Wiphak 06/06/2011 
	// move down since CID is needed to save to EFD
	// Multi-tiered Information...this data is stored in EFD

	
	set count = input.piece("|",53)		
	set pos = 54		
	
	// wiphak 06/06/2011
	type String ZSQLCON
	set ZSQLCON = ""								// # of tier rows to process
	for i = 1:1:count do {
		type String index, pmtpi, sql, seq, spread, tier, tprofit, var
		type Date ZEFD
		
		set tier = input.piece("|",pos)								// Tier sequence number
		set tprofit = input.piece("|",pos+1)							// profit (rate)
		set index = input.piece("|",pos+2)							// Interest index
		set spread = input.piece("|",pos+3)							// Rate spread
		set var = input.piece("|",pos+4)							// Variance (+ or -)
		set ZEFD = input.piece("|",pos+5)							// Effective date
		set pmtpi = input.piece("|",pos+6)							// P&I amount
		
		// Wiphak 06/06/2011
		// if i = 1, profit = tprofit set inp = inp_",LN.INDEX="_index_",LN.INTSPR="_spread_var set pos = pos + 8 quit
		if i = 1 do {
			// fixed rate (one tier)
			if var="+" set var=""
			// multi tier
			set spread=spread*100
			set ZSQLCON = ",LN.INDEX="_index_",LN.INTSPR="_var_spread
			set inp = inp_",LN.PMT="_pmtpi
		}
	
		/*
		set sql = "UPDATE LN SET "
		set sql = sql_"INTRRAT="_tier
		set sql = sql_",IRN="_tprofit
		set sql = sql_",INDEX="_index
		set sql = sql_",INTSPR="_spread
		
		set seq = $$GETSEQ^SQLDD()
		type RecordEFD efd = Class.new("RecordEFD")
		set efd.efdate = EFD
		set efd.buff = seq
		
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Global
		set efd.seq = ^EFD(EFD,seq,"").order(-1) + 1
		
		set efd.sql = sql
		set efd.table = "LN"
		set efd.tjd = %SystemDate
		
		do efd.save()
		*/
		set pos = pos + 8								// increment field pointer
		
	}
	
	// set inp = inp_",LN.INDEX=FN0600,LN.INTSPR="_spread_var
	set inp = inp_ZSQLCON
	
	

	// Co-borrower Information
	set count = input.piece("|",pos), pos = pos + 1
	set inp = inp_",RELCIF1.ACN="_ACN_",RELCIF1.ROLE=1"				// Set up primary owner

	type Number ZCNTINX
	set ZCNTINX = 2
	type Boolean coBorrower = false
	for i = 1:1:count do {
		type String coACN, divPct, guarAmt, guarPct, mail, nameConj, profitPct, role, relOwner, sharePct
		
		set role = input.piece("|",pos), pos = pos + 1			// RELCIF.ROLE
		set relOwner = input.piece("|",pos), pos = pos + 1		// LN.ACNRELC
		set mail = input.piece("|",pos), pos = pos + 1
		set guarAmt = input.piece("|",pos), pos = pos + 1
		set guarPct = input.piece("|",pos), pos = pos + 1
		set sharePct = input.piece("|",pos), pos = pos + 1
		set profitPct = input.piece("|",pos), pos = pos + 1
		set divPct = input.piece("|",pos), pos = pos + 1
		set coACN = input.piece("|",pos), pos = pos + 1			// co-borrower
		set nameConj = input.piece("|",pos), pos = pos + 1		// name conjunction (not used)
		quit:coACN.isNull()

		if role="GO" quit
		
		set coBorrower = true
				
		quit:coACN.isNull()

		set inp = inp_",RELCIF"_ZCNTINX_".ROLE=2"
		set inp = inp_",RELCIF"_ZCNTINX_".ACN="_coACN
		set ZCNTINX = ZCNTINX + 1	
		set coBorrower 	= true
	}

	if 'coBorrower set inp = inp_",LN.ACNRELC=1"
	else  set inp = inp_",LN.ACNRELC=2"
	
	// Wiphak 06/06/2011 set RETURN to null 
	set RETURN = ""
	
	// TEST
	// set ^ZPAKIN=inp_",LN.ZDACTYP="""",LN.ZSIGNED=1"
	
	do {
		
		catch loanError {
			set ER = 1
			set RM = loanError.description
		}
	
		// this is needed to get past the after_insert trigger
		set inp = inp_",LN.ZDACTYP="""",LN.ZSIGNED=1"
		
		
		kill EFD
		
		set RM = $$^MRPC044(.RETURN, 1, TYPE, CRCD, inp, ACN, BOO)
		if $D(verrors) do { quit
			set ER=1
			set RM="Create Loan Error"
			new ZVESEQ
			set ZVESEQ=""
			set ZVESEQ=$O(verrors(ZVESEQ))
			if $D(verrors(ZVESEQ,1)) do {
				new ZXBERR
				set ZXBERR=verrors(ZVESEQ,1)
				set RM=ZXBERR.piece("|",8)
			}
			kill verrors
		}
		new ZARER,XX,ZRM1
		set ZRM1 = ""
		set XX = $$LV2V^MSG(RM,.ZARER(),1)
		if $D(ZARER(5)) set ZRM1 = ZARER(5)
		if 'ZRM1.isNull() set RM = ZRM1
	}

	// Error occured.  Set error data into messate and quit
	if 'RM.isNull() set ER=1 quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|")
	if ER  quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|")

	set RETURN = $$LV2V^MSG(RETURN,.ARR(),1)
	type Number CID = +ARR(1).get().toNumber()
	
	type String ZSYSPCM
	type RecordLN zlncid=Db.getRecord("LN","CID=:CID")
	set ZSYSPCM = zlncid.pcm
	
	
	// Wiphak 06/06/2011  move to here	
	// Multi-tiered Information...this data is stored in EFD
	set count = input.piece("|",53)		
	set pos = 54											// # of tier rows to process
	type Number ZSUMMONT
	set ZSUMMONT = 0
	set ZPMTAMT=""
	new ZFPMTDT
	set ZFPMTDT=""
	
	// type Flood
	type Number ZFLDFLG,ngpTerm
	set ZFLDFLG = 0
	
	// new gp term for the second tier
	set ngpTerm = 0
	for i = 1:1:count do {
		type String index, pmtpi, sql, seq, spread, tier, tprofit, var
		type Date ZSAVEEFD
		type String ZSTRUPD
		type Number ZTMONTH,ZSKIPFLG
		
		set tier = input.piece("|",pos)								// Tier sequence number
		set tprofit = input.piece("|",pos+1)							// profit (rate)
		set index = input.piece("|",pos+2)							// Interest index
		set spread = input.piece("|",pos+3)							// Rate spread
		set var = input.piece("|",pos+4)							// Variance (+ or -)
		set ZTMONTH = +input.piece("|",pos+5)							// Effective date
		set pmtpi = input.piece("|",pos+6)							// P&I amount
		
		
		set EFD=""
		set ZSKIPFLG = 0
		if i = 1 do {
			
			// Wiphak 11/06/2012
			// use first payment date from cap 
			/*
			// calculate first payment
			set ZFPMTDT=$$NJD^UFRE(ODT,"1"_ZCALDOM)
			*/
			// Use first pmt date from cap
			if input.piece("|",38).toDate("DD/MM/YEAR").trim().isNull() set RM="Invalid Null First Payment Date",ER=1 quit
			set ZFPMTDT=input.piece("|",38).toDate("DD/MM/YEAR")
			
			if ZFPMTDT.isNull() set RM="Invalid Null First Payment Date",ER=1 quit
			if ZFPMTDT=-1 set RM="Invalid First Payment Date:"_input.piece("|",38),ER=1 quit
			
			set ZPMTAMT=pmtpi
			set ZSUMMONT=ZTMONTH
			// no grace, set EFD to ODT
			if gpTerm = "" set EFD=ODT quit
			
			// grace equal to first tier term
			if ZTMONTH = gpTerm do { quit
				// skip this tier
				set ZSKIPFLG = 1
			} 
			 
			// grace less than first tier term
			if gpTerm < ZTMONTH do { quit
				// set start of tier to end of gpTerm+1day
				set EFD = $$NJD^UFRE(ZFPMTDT,(gpTerm-1)_ZCALDOM) + 1	
			}
			
			// Wiphak 21/10/2011
			if gpTerm > ZTMONTH do { quit
				set ZFLDFLG = 1
				set ZSKIPFLG = 1
				set ngpTerm = gpTerm - ZTMONTH
			}
		}
		
		if ZSKIPFLG set pos = pos + 8 quit
		
		if i > 1 do {
			set EFD = $$NJD^UFRE(ZFPMTDT,(ZSUMMONT-1)_ZCALDOM) + 1
			set ZSUMMONT = ZSUMMONT + ZTMONTH
		}
		
		// if i = 1, profit = tprofit set inp = inp_",LN.INDEX="_index_",LN.INTSPR="_spread_var set pos = pos + 8 quit
		
		
		// second tier of flood type
		if (i = 2),(ZFLDFLG = 1) do { if 1

			set spread=spread*100
			set sql = "UPDATE LN SET "
			set sql = sql_"INDEX='"_index_"'"
			set sql = sql_",INTSPR="_var_spread
			set sql = sql_" WHERE CID="_CID
			
			set seq = $$GETSEQ^SQLDD()
			type RecordEFD efd = Class.new("RecordEFD")
			set efd.efdate = EFD
			set efd.buff = seq
			
			#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Global
			set efd.seq = ^EFD(EFD,seq,"").order(-1) + 1
			
			set efd.sql = sql
			set efd.table = "LN"
			set efd.tjd = %SystemDate
			set efd.akey = CID
			
			do efd.save()
			
			// add one more tier to the second tier
			
			
			// left grace equal to second tier term , do nothing
			if ZTMONTH = ngpTerm quit
			
			set EFD = $$NJD^UFRE(ZFPMTDT,(gpTerm-1)_ZCALDOM) + 1
			
			
			if (ZSYSPCM = 14)!(ZSYSPCM = 15) set ZSTRUPD = ",PMTPI="_pmtpi_",FPA=0"
			if (ZSYSPCM = 2)!(ZSYSPCM = 3) set ZSTRUPD = ",PMTPI=0,FPA="_pmtpi
			
			// Wiphak 06/06/2011
			// Remove tier number and IRN 
			if var="+" set var=""
			set spread=spread*100
			set sql = "UPDATE LN SET "
			set sql = sql_"PCM="_ZSYSPCM
			set sql = sql_ZSTRUPD
			set sql = sql_" WHERE CID="_CID
			
			set seq = $$GETSEQ^SQLDD()
			type RecordEFD efd = Class.new("RecordEFD")
			set efd.efdate = EFD
			set efd.buff = seq
			
			#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Global
			set efd.seq = ^EFD(EFD,seq,"").order(-1) + 1
			
			set efd.sql = sql
			set efd.table = "LN"
			set efd.tjd = %SystemDate
			set efd.akey = CID
			
			do efd.save()
			
			
		}
		
		else  do {

			
			
			if (ZSYSPCM = 14)!(ZSYSPCM = 15) set ZSTRUPD = ",PMTPI="_pmtpi_",FPA=0"
			if (ZSYSPCM = 2)!(ZSYSPCM = 3) set ZSTRUPD = ",PMTPI=0,FPA="_pmtpi
			
			// Wiphak 06/06/2011
			// Remove tier number and IRN 
			if var="+" set var=""
			set spread=spread*100
			set sql = "UPDATE LN SET "
			set sql = sql_"INDEX='"_index_"'"
			set sql = sql_",INTSPR="_var_spread
			set sql = sql_",PCM="_ZSYSPCM
			set sql = sql_ZSTRUPD
			set sql = sql_" WHERE CID="_CID
			/*
			set sql = "UPDATE LN SET "
			set sql = sql_"INTRRAT="_tier
			set sql = sql_",IRN="_tprofit
			set sql = sql_",INDEX="_index
			set sql = sql_",INTSPR="_spread
			*/
			
			
			set seq = $$GETSEQ^SQLDD()
			type RecordEFD efd = Class.new("RecordEFD")
			set efd.efdate = EFD
			set efd.buff = seq
			
			#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Global
			set efd.seq = ^EFD(EFD,seq,"").order(-1) + 1
			
			set efd.sql = sql
			set efd.table = "LN"
			set efd.tjd = %SystemDate
			set efd.akey = CID
			
			do efd.save()
		}
		
		set pos = pos + 8								// increment field pointer
		
	}
	
	// grace
	if gp = "E" do {
		set zlncid.pcm = 2
		set zlncid.fpa=0
		set zlncid.pmtpi=""
		set zlncid.fia=""	
	}
	else  do {
		// no grace
		if (ZSYSPCM = 14)!(ZSYSPCM = 15) do {
			set zlncid.pmtpi = ZPMTAMT
			set zlncid.fpa = 0	
		}
		if (ZSYSPCM = 2)!(ZSYSPCM = 3) do {
			set zlncid.pmtpi = 0
			set zlncid.fpa = ZPMTAMT		
		}
	}
	do zlncid.save()
	
	// Error occured.  Set error data into messate and quit
	if 'RM.isNull() quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|")
	if ER  quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|")

	// no error, set error flags to 0.
	quit (header_"|"_$$GETTIME()_"|0||0||"_CID)

private ZTYPE4(RecordZODTIER zodtier, RecordDEP dep)

	type Number count, i, pos
	// set dep.boo 		= input.piece("|",13)		// branch of ownership
	
	set zodtier.ctrcdate 	= input.piece("|",15).toDate("DD/MM/YEAR")		// contract date
	// set dep.zlimacr	 	= input.piece("|",16)		// ACR limit
	
	set dep.crcd 		= input.piece("|",18)		// currency code
	set dep.zarrpur 	= "012001"
	set dep.zpercons 	= input.piece("|",19)		// Purpose
	set dep.zaccoid 	= input.piece("|",21)		// Account id
	set dep.zsp 		= input.piece("|",31)		//
	set dep.znegirn 	= input.piece("|",32)		// Negative interest rate
	// set zodtier.zrecby 	= input.piece("|",33)		// Recommended by
	set zodtier.zapprvcd 	= input.piece("|",34)		// approved date
	set zodtier.zdaterec 	= input.piece("|",35).toDate("DD/MM/YEAR")		// date recorded
	set zodtier.zappdt 	= input.piece("|",36).toDate("DD/MM/YEAR")	// app. date
	set zodtier.expdt 	= input.piece("|",37).toDate("DD/MM/YEAR")	// exp. date
	set zodtier.clamt	= +input.piece("|",52)

	type String busType = input.piece("|",45)		// Business type
	
	
	// wiphak 3/11/2011
	/*
	set inp = inp_",LN.ZISICSD="_busType.extract(2,4)
	set inp = inp_",LN.ZISICGC="_busType.extract(5)
	set inp = inp_",LN.ZISICTS="_busType.extract(6,8)
	*/
	set dep.zisicsd = busType.extract(2,4)
	set dep.zisicgc = busType.extract(5)
	set dep.zisicts = busType.extract(6,8)
	
	
	
	// set dep.zarrpur 	= input.piece("|",43)		//
	// set dep.odlim 		= input.piece("|",48)		// overdraft limit
	
	set zodtier.activate = 1
	


	// Multi-tiered Information...this data is stored in EFD
	set count = input.piece("|",53)		
	set pos = 54										// # of tier rows to process
	for i = 1:1:count do {
		type String index, pmtpi, sql, seq, spread, tier, tprofit, var
		type Date EFD
		
		set tier 	= input.piece("|",pos)		// Tier sequence number
		set tprofit 	= input.piece("|",pos+1)	// profit (rate)
		set index 	= input.piece("|",pos+2)	// Interest index
		set spread 	= input.piece("|",pos+3)	// Rate spread
		set var 	= input.piece("|",pos+4)	// Variance (+ or -)
		set EFD 	= input.piece("|",pos+5)	// Effective date
		set pmtpi 	= input.piece("|",pos+6)	// P&I amount

		set pos = pos + 8	
		quit:i>1					// only 1 row for OD account
		
		if tier '= 1 quit
		
		// set zodtier.rate  = index
		set zodtier.rate  = "FN0600"
		// set zodtier.irdif = $S(var.isNull():"",var="+":"",var="-":"-",1:"")_spread
		set zodtier.irdif = (tprofit*100)
	}
	
	// now add co-borrower information to DEP
	
			
	quit

	
public CIFMAINTI(String input)

 /* ***************************************************************************
 	CAP Customer Maintenance (individual)
 	
	Modify customer report.
	 	
	
	Input Arguments:
	
	   input	"|" delimited string	/REQ/VAL/READ
	   
		ACN
		ZTITLE
		FNAM
		LNM
		NULL
		NULL
		ZETITLE
		ZEFNAME
		ZELNM
		NULL
		NULL
		NULL
		ZCIZID
		ZCIZMDT
		DOB
		SEX
		NATION
		CITZSHP
		EDUC
		MAR
		SPOUSE
		CIF.ZSPOUID
		CIF.ZSPOUDOB
		DEP
		CIF.ZCNOWN
		MAD1
		MAD2
		MAD3
		MAD4
		MCITY
		MZIP
		MCNTRY
		PAD1
		PAD2
		PAD3
		PAD4
		PCITY
		PZIP
		PCNTRY
		ZSPOUBNM
		ZOAD1
		ZOAD2
		ZOAD3
		ZOAD4
		ZOCITY
		ZOZIP
		ZOCNTRY
		EMAIL
		ZOCC
		INC
		ZSRCINC
		EMPTITLE
		PERS
		CIF.ZISICSD/CIF.ZISICGC
		ZVIPFLG
		ZRELIGIONCD
		ZKTBCCODE
		ZISIC
		BOO
		NULL
		AS
		NE
		NULL
		ZNFA
		NULL
		NULL
		CIF.ZCRRT
		CIF.ZRRTDT
		CIF.ZINSTDESC
		CIF.ZRRTLTD
		CIF.ZRRTNTD
		CIF.ZRRTDFLG
		CIF.ZEINSTDESC
		CIF.ZECRRT
		CIF.ZERRTDT
		CIF.ZFINSTDESC
		CIF.ZFCRRT
		CIF.ZFRRTDT
		NULL
		CIF.HPH
		CIF.ZHPHEXT
		NULL
		CIF.ZHPH
		CIF.ZHPHEXT2
		NULL
		CIF.APH
		NULL
		NULL
		CIF.FAXNUM
		NULL
		NULL
		CIF.BPH
		CIF.BPHEXT
		NULL
		CIF.ZBPH2
		CIF.ZBPHEXT2
		NULL
		CIF.ZAPH2
		NULL
		CIF.ZFAXNUM2
		NULL

	   	
	   
	Returns:
	
	   output	Customer Number
	   
	   */


	type public Number ER = 0
	type public String RM = ""
	type String header, output
	type Number ACN = "", CNT = 0, pos
	type Boolean newCIF = false
	
	set header = input.piece("|",1,10)	// Common header - first 10 pieces.
	set pos = 11
	set ACN = input.piece("|",pos)
	
	/*
	type RecordCIF cif = Db.getRecord("CIF","ACN=:ACN",1)
	if 'cif.getMode() set ER = 1, RM = "Record Not Found: "_ACN
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_ACN)	// 1404 is the 'record not found' failure code
	if cif.pers '= 0 set ER = 1, RM = "Not an individual customer record"
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_ACN)	// 1404 is the 'record not found' failure code
	
	do cif.setAuditFlag(1)
	*/
	
	// if ACN is null, then check citizen ID.  If found, get ACN based on that.  If citizen ID
	// is also null, then create a new customer record.
	if ACN.isNull() do {
		set CITZID = input.piece("|",23)
		if CITZID.isNull() set newCIF = true, ACN = $$GETACN^MRPC082() quit
		type ResultSet rs = Db.select("ACN","CIF","ZCIZID=:CITZID")
		if 'rs.next() set newCIF = true, ACN = $$GETACN^MRPC082() quit
		else  set ACN = rs.getCol("ACN")
		//set ER = 1, RM = "Citizen ID not found: "_CITZID 
		set newCIF = false
	}
	
	// record not found
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_ACN)
	
	type RecordCIF cif = Db.getRecord("CIF","ACN=:ACN",1)
	if 'newCIF, 'cif.getMode() set ER = 1, RM = "Record Not Found: "_ACN
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_ACN)	// 1404 is the 'record not found' failure code
	
	if 'newCIF, cif.pers '= 0 set ER = 1, RM = "Not an individual customer record"
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_ACN)	// 1404 is the 'record not found' failure code
	
	do cif.setAuditFlag(1)
	if newCIF do {
		set cif.acn = ACN							// Cif Number
		set cif.pers = 0							// personal CIF
		set cif.type = 0							// personal CIF	
		//set cif.zipc = 176001							// involved party group
		set cif.ccode = 1
	}
	
	set pos = pos + 1 set cif.ztitle = input.piece("|",pos)		// ZTITLE
	set pos = pos + 1 set cif.fname = input.piece("|",pos)		// FBAM
	set pos = pos + 1 set cif.lnm = input.piece("|",pos)		// LNM
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)	// Name line 2
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)	// Name line 3
	set pos = pos + 1 set cif.zetitle = input.piece("|",pos)	// English title
	set pos = pos + 1 set cif.zefname = input.piece("|",pos)	// English first name
	set pos = pos + 1 set cif.zelnm = input.piece("|",pos)		// English last name
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)	// English name line 2
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)	// English name line 3
	
	new inqType
	set inqType=""
	set pos = pos + 1 set inqType = input.piece("|",pos)		// Card Type
	set pos = pos + 1 
	do {
		if inqType="CI" set cif.zcizid = input.piece("|",pos)		// Citizen ID
		else  if inqType="PP" set cif.pasnum = input.piece("|",pos)	// Passport No
		else  if inqType="TN" set cif.taxid = input.piece("|",pos)	// Tax ID
		else  if inqType="DL" set cif.dlnum = input.piece("|",pos)	// Driving License
		else  set cif.oin = input.piece("|",pos)			// Other
	}
	
	set pos = pos + 1 set cif.zcizmdt = input.piece("|",pos)	// CI card exp date
	if cif.zcizmdt.contains("/") set cif.zcizmdt = cif.zcizmdt.toDate("DD/MM/YEAR")
	set pos = pos + 1 set cif.dob = input.piece("|",pos)		// date of birth
	if cif.dob.contains("/") set cif.dob = cif.dob.toDate("DD/MM/YEAR")				// convert to internal format
	if 'cif.dob.isNull() set cif.zdobcd = 1
	set pos = pos + 1 set cif.sex = input.piece("|",pos)		// sex
	set pos = pos + 1 set cif.nation = input.piece("|",pos)	// nationality
	set pos = pos + 1 set cif.zrescd = input.piece("|",pos)	// citizenship
	set pos = pos + 1 set cif.educ = input.piece("|",pos)		// education
	set pos = pos + 1 set cif.mar = input.piece("|",pos)		// Marital status
	//set pos = pos + 1 set cif.spouse = input.piece("|",pos)	// spouse
	set pos = pos + 1 set cif.zspounm = input.piece("|",pos)	// spouse
	set pos = pos + 1 set cif.zspouid = input.piece("|",pos)	// spouse id
	set pos = pos + 1 set cif.zspoudob = input.piece("|",pos)	// spouse DOB
	if cif.zspoudob.contains("/") set cif.zspoudob = cif.zspoudob.toDate("DD/MM/YEAR")		// convert to internal format
	set pos = pos + 1 set cif.dep = input.piece("|",pos)		// # dependents
	//set pos = pos + 1 set cif.zcnown = input.piece("|",pos)	// Resident status
	set pos = pos + 1 set cif.zresstat = input.piece("|",pos)	// Resident status
	
	
	/*
	set pos = pos + 1 set cif.mad1 = input.piece("|",pos)	// Address line 1
	set pos = pos + 1 set cif.mad2 = input.piece("|",pos)	// Address line 2

	set pos = pos + 1 set cif.mad3 = input.piece("|",pos)	// Address Line 3
	set pos = pos + 1 set cif.mad4 = input.piece("|",pos)	// Address Line 4
	*/
	type String ZMAD12,ZMAD34
	set pos = pos + 1 set ZMAD12 = $$REMHYP(input.piece("|",pos))
	if 'ZMAD12.piece("$",1).isNull() set cif.mad1 = ZMAD12.piece("$",1)
	if 'ZMAD12.piece("$",2).isNull() set cif.mad2 = ZMAD12.piece("$",2)
	set pos = pos + 1 set ZMAD34 = $$REMHYP(input.piece("|",pos))
	if 'ZMAD34.piece("$",1).isNull() set cif.mad3 = ZMAD34.piece("$",1)
	if 'ZMAD34.piece("$",2).isNull() set cif.mad4 = ZMAD34.piece("$",2)
	
	set pos = pos + 1 set cif.zmsdiscd=$E(input.piece("|",pos),5,6)  // tambon
	set pos = pos + 1 set cif.mcity=$E(input.piece("|",pos),3,4)    // amphur

	set pos = pos + 1 set cif.mstate = input.piece("|",pos)	// City
	set pos = pos + 1 set cif.mzip = input.piece("|",pos)	// Zip Code
	set pos = pos + 1 set cif.mcntry = input.piece("|",pos)	// Country
	
	/*
	set pos = pos + 1 set cif.pad1 = input.piece("|",pos)	// Address line 1
	set pos = pos + 1 set cif.pad2 = input.piece("|",pos)	// Address line 2

	set pos = pos + 1 set cif.pad3 = input.piece("|",pos)	// Address line 3
	set pos = pos + 1 set cif.pad4 = input.piece("|",pos)	// Address line 4

	*/
	type String ZPAD12,ZPAD34
	set pos = pos + 1 set ZPAD12 = $$REMHYP(input.piece("|",pos))
	if 'ZPAD12.piece("$",1).isNull() set cif.pad1 = ZPAD12.piece("$",1)
	if 'ZPAD12.piece("$",2).isNull() set cif.pad2 = ZPAD12.piece("$",2)
	set pos = pos + 1 set ZPAD34 = $$REMHYP(input.piece("|",pos))
	if 'ZPAD34.piece("$",1).isNull() set cif.pad3 = ZPAD34.piece("$",1)
	if 'ZPAD34.piece("$",2).isNull() set cif.pad4 = ZPAD34.piece("$",2)
	
	set pos = pos + 1 set cif.zpsdiscd=$E(input.piece("|",pos),5,6)  // tambon
	set pos = pos + 1 set cif.pcity=$E(input.piece("|",pos),3,4)    // amphur	
	
	set pos = pos + 1 set cif.pstate = input.piece("|",pos)	// City
	set pos = pos + 1 set cif.pzip = input.piece("|",pos)		// Zip code
	set pos = pos + 1 set cif.pcntry = input.piece("|",pos)	// Country
	set pos = pos + 1 //set cif.zspoubnm = input.piece("|",pos)	// ZSPOUBNM


	/*
	set pos = pos + 1 set cif.zoad1 = input.piece("|",pos)	// ZAddress line 1
	set pos = pos + 1 set cif.zoad2 = input.piece("|",pos)	// ZAddress line 2

	set pos = pos + 1 set cif.zoad3 = input.piece("|",pos)	// ZAddress line 3
	set pos = pos + 1 set cif.zoad4 = input.piece("|",pos)	// ZAddress line 4
	*/
	type String ZOAD12,ZOAD34
	set pos = pos + 1 set ZOAD12 = $$REMHYP(input.piece("|",pos))
	if 'ZOAD12.piece("$",1).isNull() set cif.zoad1 = ZOAD12.piece("$",1)
	if 'ZOAD12.piece("$",2).isNull() set cif.zoad2 = ZOAD12.piece("$",2)
	set pos = pos + 1 set ZOAD34 = $$REMHYP(input.piece("|",pos))
	if 'ZOAD34.piece("$",1).isNull() set cif.zoad3 = ZOAD34.piece("$",1)
	if 'ZOAD34.piece("$",2).isNull() set cif.zoad4 = ZOAD34.piece("$",2)
	
	set pos = pos + 1 set cif.zosdiscd=$E(input.piece("|",pos),5,6)  // tambon
	set pos = pos + 1 set cif.zocity=$E(input.piece("|",pos),3,4)    // amphur	
	
	
	set pos = pos + 1 set cif.zostate = input.piece("|",pos)	// ZCity
	//56
	set pos = pos + 1 set cif.zozip = input.piece("|",pos)	// ZZip code
	set pos = pos + 1 set cif.zocntry = input.piece("|",pos)	// ZCountry
	set pos = pos + 1 set cif.email = input.piece("|",pos)	// Email address
	//set pos = pos + 1 set cif.zocc = input.piece("|",pos)		// Occ. Code
	
	set pos = pos + 1 set cif.zsocc = input.piece("|",pos)	// Occ. Code
	new ZSOCC
	set ZSOCC=input.piece("|",pos)
	type ResultSet rs = Db.select("OCC","ZUTBLSOC","SOCC=:ZSOCC")
	if rs.next() set cif.zocc = rs.getCol("OCC")
	else  set ER = 1, RM = "Invalid sub occupation code :"_ZSOCC
	
	// check error if cap sends invalid sub occupation code
	// wiphak 17/01/2012
	if ER quit (header_"|"_$$GETTIME()_"|0||1999|"_RM_"|"_ACN)	
	
	
	//60
	set pos = pos + 1 set cif.inc = input.piece("|",pos)		// Income
	set pos = pos + 1 set cif.zsrcinc = "0"_input.piece("|",pos)	// Source of Incode
	
	// set pos = pos + 1 set cif.emptitle = input.piece("|",pos)	// Employee title
	set pos = pos + 1 set cif.zperpos = input.piece("|",pos)	// Employee title
	
	set pos = pos + 1 set cif.pers = input.piece("|",pos)		// Personal flag
	
	/*
	set pos = pos + 1 
	do {
		type String tmp										// Bus. Type Code
		set tmp = input.piece("|",pos)
		set cif.zisicsd = tmp.piece("/",1)
		set cif.zisicgc = tmp.piece("/",2)
	}*/
	set pos = pos + 1 //set cif.zisicsd = input.piece("|",pos)	// Bus. Type Code
	
	set pos = pos + 1 //set cif.zvipflg = input.piece("|",pos)	// VIP flag
	//66
	set pos = pos + 1 set cif.zreligioncd = input.piece("|",pos) // Religion code
	set pos = pos + 1 set cif.zktbccode = input.piece("|",pos)	// KTB Customer code
	
	new ZCODE
	set ZCODE=input.piece("|",pos)
	
	if 'ZCODE.isNull() do {
		type RecordZUTBLKTBCUST zktbcode = Db.getRecord("ZUTBLKTBCUST","KTBCCODE=:ZCODE",1)
		set cif.zipc = zktbcode.ipcode
	}
	
	//68
	set pos = pos + 1 //set cif.zisic = input.piece("|",pos)	// ISIC Code
	
	if 'input.piece("|",68).isNull() do {
		type String tmp = input.piece("|",68)					// ZISIC code
		set cif.zisicsd = tmp.extract(2,4)					// ZISICSD code
		set cif.zisicgc = tmp.extract(5)					// ZISICSD code
		set cif.zisicts = tmp.extract(6,8)					// ZISICSD code
	}
	//69
	
	
	new ZNBOO
	set pos = pos + 1 set ZNBOO = +(input.piece("|",pos))	// Branch opening code
	if ZNBOO=898 do {
		set ZNBOO = 8
	}
	set cif.boo = ZNBOO
	
	// set pos = pos + 1 set cif.boo = +(input.piece("|",pos))	// Branch opening code
	
	set pos = pos + 1 //set cif.boo = input.piece("|",pos)	// Branch opening code
	set pos = pos + 1 set cif.as = input.piece("|",pos)		// Annual Sale
	set pos = pos + 1 set cif.ne = input.piece("|",pos)		// Number of employees
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	set pos = pos + 1 set cif.znfa = input.piece("|",pos)		// Fixed Assets
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	set pos = pos + 1 //set cif.zcrrt = input.piece("|",pos)		// Customer rating
	set pos = pos + 1 //set cif.zrrtdt = input.piece("|",pos).toDate("DD/MM/YEAR")	// date of rating
	set pos = pos + 1 //set cif.zinstcd = input.piece("|",pos)	// Rated by Bank
	set pos = pos + 1 //set cif.zrrtltd = input.piece("|",pos).toDate("DD/MM/YEAR")	// Last review date
	set pos = pos + 1 //set cif.zrrtntd = input.piece("|",pos).toDate("DD/MM/YEAR")	// Next review date
	set pos = pos + 1 //set cif.zrrtdflg = input.piece("|",pos)	// 
	set pos = pos + 1 //set cif.zeinstcd = input.piece("|",pos)	// Local rating by
	set pos = pos + 1 //set cif.zecrrt = input.piece("|",pos)		// Local rating
	set pos = pos + 1 //set cif.zerrtdt = input.piece("|",pos).toDate("DD/MM/YEAR")	// Local rating date
	set pos = pos + 1 //set cif.zfinstcd = input.piece("|",pos)	// Foreign Rating by
	set pos = pos + 1 //set cif.zfcrrt = input.piece("|",pos)		// Foreign rating
	set pos = pos + 1 //set cif.zfrrtdt = input.piece("|",pos).toDate("DD/MM/YEAR")	// Foreign rating date
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	
	set pos = pos + 1 set cif.bph = input.piece("|",pos)		// business phone 1
	set pos = pos + 1 set cif.bphext = input.piece("|",pos)		// Business phone 1 extension
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	set pos = pos + 1 set cif.hph = input.piece("|",pos)		// Home phone 1
	set pos = pos + 1 set cif.zhphext = input.piece("|",pos)	// Home phone 1 extension
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	set pos = pos + 1 set cif.aph = input.piece("|",pos)		// Mobile Phone 1
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	set pos = pos + 1 set cif.faxnum = input.piece("|",pos)		// Fax Number 1
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	set pos = pos + 1 set cif.zbph2 = input.piece("|",pos)		// Business phone 2
	set pos = pos + 1 set cif.zbphext2 = input.piece("|",pos)	// Business phone 2 extension
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	set pos = pos + 1 set cif.zhph2 = input.piece("|",pos)		// Home phone 2
	set pos = pos + 1 set cif.zhphext2 = input.piece("|",pos)	// Home phone 2 extension
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)	// 
	set pos = pos + 1 set cif.zaph2 = input.piece("|",pos)		// Mobile phone 2
	set ZREFPOS = pos
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	set pos = pos + 1 set cif.zfaxnum2 = input.piece("|",pos)	// Fax number 2
	set pos = pos + 1 //set cif.ztitle = input.piece("|",pos)
	
	new ZOFFCD
	set ZOFFCD = input.piece("|",114)
	set ZOFFCD = ZOFFCD.trim()
	if 'ZOFFCD.isNull() do {
		set ZOFFCD=+ZOFFCD
		if ZOFFCD=0 quit
		set cif.zoffcd = input.piece("|",114)    // officer code (updated by)
	}
	
	set output = ACN
	
	do {
		catch error {
			do ZE^UTLERR
			// set output = (header_"|"_$$GETTIME()_"|0||1999|"_error.description_"|"_output)
			// set ER = 1
			set ER = 1
			if RM.get()="" set RM = error.description
			set RM="CIF save error: "_RM
		}
		do cif.save()
	}
	
	// if ER.get() quit output
	if ER.get() quit (header_"|"_$$GETTIME()_"|0||1999|"_RM_"|"_output.get())
	
	
	// no error, set error flags to 0.
	quit (header_"|"_$$GETTIME()_"|0||0||"_output)
	
	
public CIFMAINTC(String input)

 /* ***************************************************************************
 	CAP Customer Maintenance (Corporate)
 	
	Modify customer report.
	 	
	
	Input Arguments:
	
	   input	"|" delimited string	/REQ/VAL/READ
	   
		ACN
		ZTITLE
		FNAM
		LNM
		NULL
		NULL
		ZETITLE
		ZEFNAME
		ZELNM
		NULL
		NULL
		NULL
		ZCIZID
		ZCIZMDT
		DOB
		SEX
		NATION
		CITZSHP
		EDUC
		MAR
		SPOUSE
		CIF.ZSPOUID
		CIF.ZSPOUDOB
		DEP
		CIF.ZCNOWN
		MAD1
		MAD2
		MAD3
		MAD4
		MCITY
		MZIP
		MCNTRY
		PAD1
		PAD2
		PAD3
		PAD4
		PCITY
		PZIP
		PCNTRY
		ZSPOUBNM
		ZOAD1
		ZOAD2
		ZOAD3
		ZOAD4
		ZOCITY
		ZOZIP
		ZOCNTRY
		EMAIL
		ZOCC
		INC
		ZSRCINC
		EMPTITLE
		PERS
		CIF.ZISICSD/CIF.ZISICGC
		ZVIPFLG
		ZRELIGIONCD
		ZKTBCCODE
		ZISIC
		BOO
		NULL
		AS
		NE
		NULL
		ZNFA
		NULL
		NULL
		CIF.ZCRRT
		CIF.ZRRTDT
		CIF.ZINSTDESC
		CIF.ZRRTLTD
		CIF.ZRRTNTD
		CIF.ZRRTDFLG
		CIF.ZEINSTDESC
		CIF.ZECRRT
		CIF.ZERRTDT
		CIF.ZFINSTDESC
		CIF.ZFCRRT
		CIF.ZFRRTDT
		NULL
		CIF.HPH
		CIF.ZHPHEXT
		NULL
		CIF.ZHPH
		CIF.ZHPHEXT2
		NULL
		CIF.APH
		NULL
		NULL
		CIF.FAXNUM
		NULL
		NULL
		CIF.BPH
		CIF.BPHEXT
		NULL
		CIF.ZBPH2
		CIF.ZBPHEXT2
		NULL
		CIF.ZAPH2
		NULL
		CIF.ZFAXNUM2
		NULL

	   	
	   
	Returns:
	
	   output	Customer Number
	   
	   */


	type public Number ER = 0
	type public String RM = ""
	type String header, output, typeValue = "", inqType = ""
	type Number ACN = "", CNT = 0, pos
	type Boolean newCIF = false
	
	set header = input.piece("|",1,10)	// Common header - first 10 pieces.
	set pos = 11
	set ACN = input.piece("|",pos)
	
	/*
	type RecordCIF cif = Db.getRecord("CIF","ACN=:ACN",1)
	if 'cif.getMode() set ER = 1, RM = "Record Not Found: "_ACN
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_ACN)	// 1404 is the 'record not found' failure code
	if cif.pers '= 1 set ER = 1, RM = "Not a corporate customer record"
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_ACN)	// 1404 is the 'record not found' failure code
	
	do cif.setAuditFlag(1)
	*/
	
	// if ACN is null, then check citizen ID.  If found, get ACN based on that.  If citizen ID
	// is also null, then create a new customer record.
	if ACN.isNull() do {
		set CITZID = input.piece("|",23)
		if CITZID.isNull() set newCIF = true, ACN = $$GETACN^MRPC082() quit
		type ResultSet rs = Db.select("ACN","CIF","ZCIZID=:CITZID")
		if 'rs.next() set newCIF = true, ACN = $$GETACN^MRPC082() quit
		else  set ACN = rs.getCol("ACN")
		//if 'rs.next() set ER = 1, RM = "Citizen ID not found: "_CITZID quit
		//set ACN = rs.getCol("ACN")
		set newCIF = false
	}
	
	// record not found
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_ACN)
	
	type RecordCIF cif = Db.getRecord("CIF","ACN=:ACN",1)
	if 'newCIF, 'cif.getMode() set ER = 1, RM = "Record Not Found: "_ACN
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_ACN)	// 1404 is the 'record not found' failure code

	if 'newCIF, cif.pers '= 1 set ER = 1, RM = "Not a corporate customer record"
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_ACN)	// 1404 is the 'record not found' failure code
	
	do cif.setAuditFlag(1)
	set cif.pers = 1
	set cif.acn = ACN
	
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.ztitle = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.nam = input.piece("|",pos)		// NAM
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.lnm = input.piece("|",pos)	// LNM
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.ztitle = input.piece("|",pos)	// Name line 2
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zenam = input.piece("|",pos)	// English first name
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zelnm = input.piece("|",pos)	// English last name
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.ztitle = input.piece("|",pos)	// English name line 2
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.idType = input.piece("|",pos)	// ID type
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zcizid = input.piece("|",pos).toDate("DD/MM/YEAR")	// Citizen ID
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.dob = input.piece("|",pos).toDate("DD/MM/YEAR")		// date of birth

	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zrescd = input.piece("|",pos)	// resident code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.mad1 = input.piece("|",pos)		// Address line 1
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.mad2 = input.piece("|",pos)		// Address line 2
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zmsdiscd = input.piece("|",pos)	// Subdistrict
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zmsdiscd = input.piece("|",pos)	// District
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.mcity = input.piece("|",pos)	// City
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.mzip = input.piece("|",pos)		// Zip Code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.mcntry = input.piece("|",pos)	// Country

	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.email = input.piece("|",pos)	// email Adress

	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zoad1 = input.piece("|",pos)	// ZAddress line 1
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zoad2 = input.piece("|",pos)	// ZAddress line 2
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zosdiscd = input.piece("|",pos)	// zSubdistrict
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zosdiscd = input.piece("|",pos)	// zDistrict
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zocity = input.piece("|",pos)	// ZCity
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zozip = input.piece("|",pos)	// ZZip code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zocntry = input.piece("|",pos)	// ZCountry

	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.email = input.piece("|",pos)	// email
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.ztitle = input.piece("|",pos)	// Contact title
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zcntitle = input.piece("|",pos)	// Contact name (surname)
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zcnhph = input.piece("|",pos)	// Contact Namr home phone
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zcnpos = input.piece("|",pos)	// Contact position

	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.pers = input.piece("|",pos)	// Personal flag
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zvipflg = input.piece("|",pos)	// VIP flag
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zreligioncd = input.piece("|",pos) // Religion code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zktbccode = input.piece("|",pos)	// KTB Customer code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.ztitle = input.piece("|",pos)	// Branch Response
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.as = input.piece("|",pos)	// Annual Sale
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.ne = input.piece("|",pos)	// Number of employees
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.ztitle = input.piece("|",pos)

	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zrbnam = input.piece("|",pos)	// Business description
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zcnown = input.piece("|",pos)	// contaction own
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.as = input.piece("|",pos)		// Annual sales
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.ne = input.piece("|",pos)		// Number of employees
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zcnsme = input.piece("|",pos)	// Small business flag
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zktbccode = input.piece("|",pos)	// KTB Customer code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zisicsd = input.piece("|",pos)	// Business type code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.boo = input.piece("|",pos)		// Branch opening code

	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzz = input.piece("|",pos)	// Branch response headquarter
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.co = input.piece("|",pos)	// co

	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.ta = input.piece("|",pos)		// Net Fixed Asset

	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzzz = input.piece("|",pos)	// SEM/MEM code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzzz = input.piece("|",pos)	// SRO Code

	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zregcap = input.piece("|",pos)	// Capital Registered Account
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zpaidcap = input.piece("|",pos)	// Capital Registered Amount
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.crertsc = input.piece("|",pos)	// Customer rating

	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zrrtdt = input.piece("|",pos).toDate("DD/MM/YEAR")	// date of rating
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zinstcd = input.piece("|",pos)	// Rated by Bank
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zrrtltd = input.piece("|",pos).toDate("DD/MM/YEAR")	// Last review date
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zrrtntd = input.piece("|",pos).toDate("DD/MM/YEAR")	// Next review date
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zrrtdflg = input.piece("|",pos)	// 

	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zecrrt = input.piece("|",pos)	// Local rating
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zerrtdt = input.piece("|",pos).toDate("DD/MM/YEAR")	// Local rating date
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zeinstcd = input.piece("|",pos)	// Local rating by

	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zfcrrt = input.piece("|",pos)	// Foreign rating
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zfrrtdt = input.piece("|",pos).toDate("DD/MM/YEAR")	// Foreign rating date
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zfinstcd = input.piece("|",pos)	// Foreign Rating by

	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzz = input.piece("|",pos)	// telephone type
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.bph = input.piece("|",pos)		// Business phone
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.bphext = input.piece("|",pos)	// Business phoen extension
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzzzz = input.piece("|",pos)	// Telephone type 2
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zbph2 = input.piece("|",pos)	// Business phone 2
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zbphext2 = input.piece("|",pos)	// Business phone 2 extension
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzzz = input.piece("|",pos)	// Telephone type 3
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.aph = input.piece("|",pos)		// Phone 3

	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.ztitle = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.ztitle = input.piece("|",pos)	// FILLER

	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zaph2 = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.ztitle = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.ztitle = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.faxnum = input.piece("|",pos)	// Fax Number
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.ztitle = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.ztitle = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.zfaxnum2 = input.piece("|",pos)	// Fax number 2
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzzz = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzzz = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzzz = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzzz = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzzz = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzzz = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set cif.zzzzz = input.piece("|",pos)	// FILLER
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set cif.email = input.piece("|",pos)	// email
	set output = ACN
	
	do {
		
		catch error {
			do ZE^UTLERR
			set output = (header_"|"_$$GETTIME()_"|0||1999|"_error.description_"|"_output)
			set ER = 1
		}
		
		do cif.save()
	}
	if ER quit output
	
	// no error, set error flags to 0.
	quit (header_"|"_$$GETTIME()_"|0||0||"_output)


public COLINQ(String input)
	/* Customer Collateral Inquiry - Brief */

	type public Number ER = 0
	type public String RM = ""
	type String header, output = "", record = ""
	type Number ACN = "", CNT = 0, pos
	
	set header = input.piece("|",1,10)	// Common header - first 10 pieces.
	set pos = 11
	set ACN = input.piece("|",pos)
	
	type RecordCIF cif = Db.getRecord("CIF","ACN=:ACN",1)
	if 'cif.getMode() set ER =1, RM = "Customer record does not exist "_ACN
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_output)	// 1404 is the 'record not found' failure code
	
	type ResultSet rs = Db.select("ZCOL.COLL","ZCOL,ZCOLOWNLINK","ZCOL.COLL=ZCOLOWNLINK.COLL AND ZCOLOWNLINK.ACN=:ACN")
	while rs.next() do {
			type String COL
			set CNT = CNT + 1
			set COL = rs.getCol("ZCOL.COLL")
			
			type RecordZCOL zcol = Db.getRecord("ZCOL","COLL=:COL")		
			set record.piece("|",1) = COL					// Collateral ID
			set record.piece("|",2) = zcol.coltyp				// Collateral type
			set record.piece("|",3) = zcol.colsubt				// Collateral subtype
			set record.piece("|",4) = zcol.desc				// Description
			set record.piece("|",5) = zcol.appval				// Colateral value
			set record.piece("|",6) = zcol.crcd				// Currency
			if zcol.appdt="" set record.piece("|",7) = "123"		// Issue date
			else  set record.piece("|",7) = zcol.appdt.toString("DD/MM/YEAR")	
			
			type ResultSet rs1 = Db.select("CCSTAT,CTRCT","ZCTRCTCOL","ZCTRCTCOL.COLL = :COL")
			if rs1.next() do {
				type String CCSTAT 
				set CCSTAT = rs1.getCol("CCSTAT")
				if (CCSTAT = "R") set output.piece("|",8) = 1
				else  if (CCSTAT = "P") do {
					type RecordZCONTRACT zcontract = Db.getRecord("ZCONTRACT","CTRCT=:rs1.getCol(""CTRCT"")",1)
					set record.piece("|",8) = zcontract.ctrstat
				}
				else  set record.piece("|",8) = "ABC"
			}
			else  set record.piece("|",8) = "ABC"

			/* isActive field not sent back per 9-May-2011 email with cnage in record layout
			// Set Active staus based on collateral type
			if zcol.coltyp = 3 do {
				if zcol.useage <= 0 set output.piece("|",9) = 0
				else  set output.piece("|",9) = 1
			}
			else  if zcol.coltyp = 4 do {
				if zcol.cid.isNull() set output.piece("|",9) = 1 quit
				type RecordDEP dep = Db.getRecord("DEP","CID=:zcol.cid",1)
				if (dep.dtc - %SystemDate) <= 0 set output.piece("|",9) = 0
				else  set output.piece("|",9) = 1
			}
			else  if zcol.coltyp = 5 do {
				if (zcol.bexpdate - %SystemDate) <= 0 set output.piece("|",9) = 0
				else  set output.piece("|",9) = 1
			}
			else  if zcol.coltyp = 10 do {
				if zcol.useage <= 0 set output.piece("|",9) = 0
				else  set output.piece("|",9) = 1
			}
			else  if zcol.coltyp = 11 do {
				if (zcol.zraexp - zcol.appdt) <=0  <= 0 set output.piece("|",9) = 0
				else  set output.piece("|",9) = 1
			}
			else  if zcol.coltyp = 12 do {
				if (zcol.zateexp - %SystemDate)  <= 0 set output.piece("|",9) = 0
				else  set output.piece("|",9) = 1
			}
			else  if zcol.coltyp = 14 do {
				if zcol.cid.isNull() ! zcol.zcertccid.isNull() set output.piece("|",9) = 0 quit
				
				type RecordZCERT zcert = Db.getRecord("ZCERT","CID=:zcol.cid,CCID=:zcol.zcertccid",1)
				if (zcert.mdt - %SystemDate) <= 0 set output.piece("|",9) = 0
				else  set output.piece("|",9) = 1
			}
			else  set output.piece("|",9) = 1  
			*/
			
			set record.piece("|",9) = "123"
			
			// Account Number
			type ResultSet rs3 = Db.select("CID","ZCTRCTACN","ZCTRCTACN.CTRCT=:rs1.getCol(""CTRCT"")")
			if rs3.next() set record.piece("|",10) = rs3.getCol("CID")
			else  set record.piece("|",10) = "ABC"
			
			if CNT > 1 set output = output_124.char()
			set output = output_record	
	}
	
	set header.piece("|",7) = CNT
	quit (header_"|"_$$GETTIME()_"|0||0||"_output)
	
	
public COLINQF(String input)
	/* Customer Collateral Inquiry - Full Detail */

	type public Number ER = 0
	type public String RM = ""
	type String header, output = ""
	type Number CID, CNT = 0, COACN, COL, CTRCT, pos
	
	set header = input.piece("|",1,10)	// Common header - first 10 pieces.
	set pos = 11
	set COL = input.piece("|",11)
	set CID = input.piece("|",12)
	
	type ResultSet rs = Db.select("CTRCT","ZCTRCTCOL,ZCTRCTACN","ZCTRCTCOL.CTRCT = ZCTRCTACN.CTRCT AND ZCTRCTCOL.COLL=:COL AND ZCTRCTACN.CID=:CID")
	if rs.next() set CTRCT = rs.getCol("CTRCT")
	else set CTRCT = ""
	
	type RecordLN ln = Db.getRecord("LN","CID=:CID",1)
	if 'ln.getMode() set ER = 1, RM = "Invalid account "_CID
	
	type RecordZCOL zcol = Db.getRecord("ZCOL","COLL=:COL",1)
	if 'zcol.getMode() set ER = 1, RM = "Invalid collateral record "_COL
	
	type RecordZCONTRACT zcontract = Db.getRecord("ZCONTRACT","CTRCT=:CTRCT",1)
	if 'zcontract.getMode() set ER = 1, RM = "Invalid contract number "_CTRCT
	
	//type RecordZACNCTRCOL zacnctrcol = Db.getRecord("ZACNCTRCOL","CID=:CID, CTRCT=:CTRCT, COLL=:COL",1)
	
	type RecordZUTBLCOLSUBT zcolsubt = Db.getRecord("ZUTBLCOLSUBT","COLCD=:COL,COLSUBT=:zcol.colsubt",1)

	type ResultSet rs1 = Db.select("ACN","ZCOLOWNLINK","COLL=:COL")
	if rs1.next() set COACN = rs1.getCol("ACN")
	else  set COACN= ""
		
	set output = CID
	set output.piece("|",2) = ln.type
	set output.piece("|",3) = ""
	set output.piece("|",4) = COL
	set output.piece("|",5) = zcol.coltyp
	set output.piece("|",6) = zcol.colsubt
	set output.piece("|",7) = zcol.bldcode
	set output.piece("|",8) = zcol.province
	set output.piece("|",9) = zcol.tambol
	set output.piece("|",10) = zcol.amphur
	set output.piece("|",11) = zcol.desc
	if zcol.coltyp = 1 set output.piece("|",12) = zcolsubt.desc
	else  set output.piece("|",12) = ""
	set output.piece("|",13) = zcol.rscd
	set output.piece("|",14) = zcol.lndvol1 + zcol.lndvol2 + zcol.lndvol3 + zcol.lndvol4
	set output.piece("|",15) = zcol.lndno
	set output.piece("|",16) = ""
	set output.piece("|",17) = zcolsubt.phc
	set output.piece("|",18) = zcontract.reldate.toString("DD/MM/YEAR")
	set output.piece("|",19) = ln.acn
	if 'zcontract.mctrct.isNull() set output.piece("|",20) = "N"
	else  set output.piece("|",20) = "Y"
	set output.piece("|",21) = zcol.lndno
	set output.piece("|",22) = zcol.rscd
	set output.piece("|",23) = zcol.ravang
	set output.piece("|",24) = ""
	set output.piece("|",25) = zcol.appby
	set output.piece("|",26) = zcol.appdt.toString("DD/MM/YEAR")
	set output.piece("|",27) = zcol.appval
	set output.piece("|",28) = zcol.bldval
	set output.piece("|",29) = zcol.lndval
	set output.piece("|",30) = zcol.mkprice
	
	set output.piece("|",41) = zcontract.PLDGAMT
	set output.piece("|",42) = zcontract.RELDATE.toString("DD/MM/YEAR")
	set output.piece("|",43) = ""			//zcontract.contrrel
	set output.piece("|",44) = ""
	set output.piece("|",45) = COACN		// Co owner
	
	set output.piece("|",52) = ""			//zcol.insreq
	
	set output.piece("|",54) = zcol.appoff1 - zcol.appoff3
	set output.piece("|",55) = zcol.condpar
	set output.piece("|",56) = zcontract.totpldg
	
	set output.piece("|",67) = zcol.mcode1
	set output.piece("|",68) = zcol.mcode1 - zcol.mcode2
	set output.piece("|",69) = zcol.mkprice
	
	set output.piece("|",72) = zcol.bstrtid // to-zcol.blastid	???????
	set output.piece("|",73) = zcol.bondname
	set output.piece("|",74) = zcol.bexpdate.toString("DD/MM/YEAR")
	set output.piece("|",75) = zcol.bondtype
	set output.piece("|",76) = zcol.issyear
	set output.piece("|",77) = zcol.cid
	
	//type RecordDEP dep = Db.getRecord("DEP","CID",1)
	//set output.piece("|",78) = dep.mdt	// deposit maturity date
	//set output.piece("|",79) = zcol.issname
	//set output.piece("|",80) = dep.xname		
	if zcol.coltyp = 4 set output.piece("|",84) = zcol.APPVAL
	else  set output.piece("|",84) = ""
	
	set output.piece("|",87) = zcol.ZINSTRUMENT
	set output.piece("|",88) = zcol.ZISSUENAME
	set output.piece("|",89) = zcol.GTYPE
	set output.piece("|",90) = zcol.ZUNIT
	set output.piece("|",91) = zcol.appval
	set output.piece("|",92) = zcol.appcname
	set output.piece("|",93) = zcol.appdt.toString("DD/MM/YEAR")
	set output.piece("|",100) = zcol.bintrate
	set output.piece("|",101) = ""
	
	set header.piece("|",7) = 1
	quit (header_"|"_$$GETTIME()_"|0||0||"_output)
	
	
public COLMAINT(String input)

	/* Collateral maintenance  */

	type public Number ER = 0
	type public String RM = ""
	type String header, output
	type Number CID, CNT = 0, COL, CTRCT, pos, SEQNO, TYPE
	type RecordZUTBLCOLSUBT zcolsubt
	
	set header = input.piece("|",1,10)	// Common header - first 10 pieces.
	set pos = 11
	set CID = input.piece("|",pos)
	set pos = pos + 1, TYPE = input.piece("|",pos)
	set pos = pos + 1, SEQNO = input.piece("|",pos)
	set pos = pos + 1, COL = input.piece("|",pos)
	
	if COL.isNull() set ER = 1, RM = "Collateral ID cannot be null" quit (header_"|"_$$GETTIME()_"|4|"_RM_"|1404"_RM_"|"_output)
	
	type RecordZCOL zcol = Db.getRecord("ZCOL","COLL=:COL",1)
	if 'zcol.getMode() set ER = 1, RM = "Record not found"
	
	type ResultSet rs = Db.select("CTRCT","ZACNCTRCOL","CID=:CID AND COLL=:COL")
	if 'rs.next() set ER = 1, RM = "Record not found in ZACNCTRCOL table"
	else  set CTRCT = rs.getCol("CTRCT")
	
	if ER if ER quit (header_"|"_$$GETTIME()_"|4|"_RM_"|1404"_RM_"|"_output)	// 1404 is the 'record not found' failure code
	
	type RecordZACNCTRCOL zacnctrcol = Db.getRecord("ZACNCTRCOL","CID=:CID,CTRCT=:CTRCT,COLL=:COL",1)
	
	type RecordZCONTRACT zcontract = Db.getRecord("ZCONTRACT","CTRCT=:CTRCT",1)
	if 'zcontract.getMode() set ER = 1, RM = "Record not found in ZCONTRACT table"
	if ER if ER quit (header_"|"_$$GETTIME()_"|4|"_RM_"|1404"_RM_"|"_output)	// 1404 is the 'record not found' failure code
	
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.coltyp = input.piece("|",pos)	// collateral type
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.colsubt = input.piece("|",pos)	// collateral subtype
	
	if 'zcol.coltyp.isNull(), 'zcol.colsubt.isNull() set zcolsubt = Db.getRecord("ZUTBLCOLSUBT","COLCD=:zcol.coltyp,COLSUBT=:zcol.colsubt",1)

	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.bldcode = input.piece("|",pos)	// Building code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.province = input.piece("|",pos)	// province code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.tambol = input.piece("|",pos)	// tempor code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.amphur = input.piece("|",pos)	// Amphur code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.desc = input.piece("|",pos)	// desctiption
	
	
	set pos = pos + 1 set zcontract.contrrel = input.piece("|",pos)		// description	
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.rscd = input.piece("|",pos)	// property type
	
	// This field is comma-separated list of values.  Assign each to each of the land area columns
	type String vol
	set pos = pos + 1 set vol = input.piece("|",pos)
	if zcol.coltyp = 1 do {
		set zcol.lndvol1 = vol.piece(";",1)
		set zcol.lndvol2 = vol.piece(";",2)
		set zcol.lndvol3 = vol.piece(";",3)
		set zcol.lndvol4 = vol.piece(";",4)
	}
	else  if zcol.coltyp = 8 do {
		set zcol.rmarea = vol.piece(";",1)
		set zcol.rmarea = zcol.rmarea + vol.piece(";",2)
		set zcol.rmarea = zcol.rmarea + vol.piece(";",3)
		set zcol.rmarea = zcol.rmarea + vol.piece(";",4)
	}
		
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// Title prefix number
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.lndno = input.piece("|",pos)	// title number
	
	#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Deprecated
	set pos = pos + 1 if 'input.piece("|",pos).isNull(), zcolsubt.getPointer() set zcolsubt.phc = input.piece("|",pos)

	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// UPDATE ZCONTRACT - set to nothing
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// UPDATE ZACNCTRCOL - set to nothing

	// need clarification on how to handle this.
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// Master Title Flag
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcontract.crtdate = input.piece("|",pos)	// Master Title Number

	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.rscd = input.piece("|",pos)	// Category of land
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.ravang = input.piece("|",pos)	// lot number
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// redemption value
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.apdcode = input.piece("|",pos)	// Valuer name
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.appdt = input.piece("|",pos)	// valuation date
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.appval = input.piece("|",pos)	// valuation value
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.bldval = input.piece("|",pos)	// building value
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.lndval = input.piece("|",pos)	// land value
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.mkprice = input.piece("|",pos)	// market value
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	
	// Need clarification on where to get contract number to update the next 2 fields
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcontract.pldgamt = input.piece("|",pos)	// UPDATE ZCONTRACT.PLDGAMT
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcontract.reldate = input.piece("|",pos)	// UPDATE ZCONTRACT.RELDATE

	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// UPDATE ZCONTRACT
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zacnctrcol.cid = input.piece("|",pos)	// UPDATE ZACNTRCOL
	
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.insreq = input.piece("|",pos)	// insurence
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.appoff1 = input.piece("|",pos)	// official valuer
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.condpar = input.piece("|",pos)	// pledged status
	
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcontract.pldgamt = input.piece("|",pos)	// amount pledged

	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.mcode1 = input.piece("|",pos)	// Chassis number
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.mcode2 = input.piece("|",pos)	// engine number
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.mkprice = input.piece("|",pos)	// mkprice
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.bstrtid = input.piece("|",pos)	// BSTRTID-to-BLASTID??
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.bondname = input.piece("|",pos)	// Bond issuer name
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.bexpdate = input.piece("|",pos)	// Bond maturity date
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.bondtype = input.piece("|",pos)	// Bond type
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.issyear = input.piece("|",pos)	// Date registered
	
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.cid = input.piece("|",pos)		// account number	
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set dep.mdt = input.piece("|",pos)	// UPDATE DEP.MDT
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.isname = input.piece("|",pos)	// Issuing institution name
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.xnam = input.piece("|",pos)	// UPDATE DEP.XNAME
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.eodbal = input.piece("|",pos)	// UPDATE DEP.EODBAL

	type String trm1 = "", trm2 = ""
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set trm1 = input.piece("|",pos)		// Term part 1
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set trm2 = input.piece("|",pos)		// term part 2
	//set dep.trm = trm1_trm2
	
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.zinstrument = input.piece("|",pos)	// Promisary Note Number
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.zissuename = input.piece("|",pos)	// Payee name
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.gtype = input.piece("|",pos)	// Gold code
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.zunit = input.piece("|",pos)	// Weight
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.appval = input.piece("|",pos)	// Appraised value
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.appby = 3, zcol.apptid = input.piece("|",pos)	// Appraiser name
	set pos = pos + 1 if 'input.piece("|",pos).isNull() set zcol.appdt = input.piece("|",pos)	// Appraisal date
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.bintrate = input.piece("|",pos)	// profit rate
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE

	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// guarantee amount
	set pos = pos + 1 if 'input.piece("|",pos).isNull() //set zcol.coltyp = input.piece("|",pos)	// ZTITLE
	
	// save data
	do {
		catch error {
			do ZE^UTLERR
			set ER = 1, RM = error.description
		}
		do zcol.save()
		do zcontract.save()
		do zacnctrcol.save()
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Deprecated
		if zcolsubt.getPointer() do zcolsubt.save()
	}
	
	if ER quit (header_"|"_$$GETTIME()_"|0||1999|"_RM_"|"_output.get())	// 1404 is the 'record not found' failure code

	set RM = ""
	quit (header_"|"_$$GETTIME()_"|0|"_RM_"|0"_RM_"|")

	
public COLADD(String input)
	/* Add a collateral record  */
	
	type public Number ER = 0
	type public String RM = ""
	type String ARR(), header, isMaster, output, tieToMaster
	type Number CID, CNT = 0, COL, CTRCT, pos, SEQNO ="", TYPE	
	type RecordZCONTRACT zcontract
	type RecordZCTRCTCOL zctrctcol
	type RecordZCOLOWNLINK link
	type String ZTXTYPE
	type Number ZMCTRCT,ZCNUM
	set ZTXTYPE=""
	set ZMCTRCT=""
	set ZCNUM=""
	
	set header = input.piece("|",1,10)	// Common header - first 10 pieces.
	/*
	set ER = $$^ZMRPC920(.COL,1,"COL",9997)					// Collateral ID
	set ER = $$LV2V^MSG(COL,.ARR,0)
	set COL = ARR(1).get()
	*/
	set CID = +input.piece("|",12)							// Account number
	
	set ER = 0
	
	/*
	type RecordZCOL zcol = Db.getRecord("ZCOL","COLL=:COL",1)
	if zcol.getMode() set ER = 1, RM = "Collateral record already exists "_COL quit (header_"|"_$$GETTIME()_"|0||1999|"_RM_"|"_output.get())
	
	if CID.isNull() set ER = 1, RM = "Account is null" quit (header_"|"_$$GETTIME()_"|0||1999|"_RM_"|"_output.get())
	type RecordACN acn = Db.getRecord("ACN","CID=:CID",1)	
	if 'acn.getMode() set ER = 1, RM = "Account "_CID_" not found" quit (header_"|"_$$GETTIME()_"|0||1999|"_RM_"|"_output.get())
	*/
	
	do {
		catch error {
			do ZE^UTLERR
			set ER = 1
			set RM = error.description
		}
	set isMaster =  input.piece("|",40)						// Master contract flag
	set tieToMaster = input.piece("|",41)						// Tie to master indicator
	
	
	
	// We will either create a new contract record, or use an existing one if the isMaster flag is turned on.
	if isMaster = "Y" do {
		// create contract only
		set ZTXTYPE = "CONTRACT"
	}
	
	else  if isMaster = "N", ('tieToMaster.isNull()) do {
		// many coll to one contract
		set ZTXTYPE = "MCOLL"

	}
	
	else  if isMaster = "N", (tieToMaster.isNull()) do {
		// many coll to one contract
		set ZTXTYPE = "1COLL"
	}
		
	if ZTXTYPE.isNull() set ER=1,RM="Invalid ZTXTYPE" quit
	if (ZTXTYPE = "CONTRACT")!(ZTXTYPE = "1COLL") do {
	// create contract ,zctrctacn, zctrctcif
	
		type String ARR()
		set zcontract = Class.new("RecordZCONTRACT")
		do zcontract.setAuditFlag(1)
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Global
		set ER = $$^ZMRPC920(.SEQNO,1,"COL",9996) 
		set ER = $$LV2V^MSG(SEQNO,.ARR(),0)
		set ZMCTRCT = ARR(1).get()
		set zcontract.ctrct = ZMCTRCT
		set zcontract.contrrel = input.piece("|",32)					// Contract relation
										// Branch and Cost Center
		type String boo								// Also response unit
		set boo = input.piece("|",20)
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Scope
		set zcontract.boo = boo
		
		type RecordUTBLBRCD brcd = Db.getRecord("UTBLBRCD","BRCD=:boo",1)
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Scope
		set zcontract.cc = brcd.ccdef
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Scope
		set zcontract.respunit = brcd.ccdef
		
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Scope
		set zcontract.ctrctdt = input.piece("|",21)					// Contract date
		if zcontract.ctrctdt.contains("/") set zcontract.ctrctdt = $$FDAT^%ZM(zcontract.ctrctdt,"DD/MM/YEAR")
		
		set zcontract.reldate = input.piece("|",62)					// Pledge date
		if zcontract.reldate.contains("/") set zcontract.reldate = $$FDAT^%ZM(zcontract.reldate,"DD/MM/YEAR")
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Scope
		set zcontract.ctrstat = 0							// Contract status
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Scope
		set zcontract.pldgamt = input.piece("|",61)
		
		// amount pledged
		// if zcontract.pldgamt.isNull() set zcontract.pldgamt = input.piece("|",77)
		
		// if coll type is deposit a/c use 
		if input.piece("|",14)=4 set zcontract.pldgamt = input.piece("|",120)
		do zcontract.save()
		if ER.get() set RM="Cannot save ZCONTRACT : "_RM.get() quit
		
		if CID=0 set ER=1 set RM="A/C is not specified" quit
		if 'Db.isDefined("ACN","CID=:CID") set ER=1,RM="Invalid a/c : "_CID quit
		
		type RecordACN zacn1 = Db.getRecord("ACN","CID=:CID")
		type RecordZCTRCTACN zctracn = Db.getRecord("ZCTRCTACN","CTRCT=:ZMCTRCT,CID=:CID",1)
		do zctracn.save()
		if ER.get() set RM="Error save ZCTRCTACN : "_RM.get() quit
		
		type RecordZCTRCTCIF zctrcif = Db.getRecord("ZCTRCTCIF","CTRCT=:ZMCTRCT,ACN=:zacn1.acn",1)
		do zctrcif.save()
		if ER.get() set RM="Error save ZCTRCTCIF: "_RM.get() quit
	
		
	}
	
	
	// if ER.get() quit (header_"|"_$$GETTIME()_"|0||1999|"_RM_"|"_output.get())
	if ER.get() quit
	
	if (ZTXTYPE = "MCOLL")!(ZTXTYPE = "1COLL") do {

			/////////////////////////////////  check col dup
		
		// these fields must be set before constructing primkey to check col dup
		/*
		zcol.lndno
		zcol.province
		zcol.amphur
		zcol.tambol
		zcol.grpno
		zcol.bknumber
		zcol.pageno
		zcol.seqno
		zcol.province
		zcol.amphur
		zcol.tambol
		zcol.bldcode
		zcol.province
		zcol.amphur
		zcol.tambol
		zcol.mcode1
		zcol.cid
		zcol.bondcode
		zcol.issyear
		zcol.bseq
		zcol.bstrtid	
		zcol.taxid
		zcol.cerno
		zcol.pacn
		zcol.rmnumber
		zcol.buildno
		zcol.province
		zcol.bootfr
		zcol.ccrnum
		zcol.ccrdt	
		zcol.mcode1
		zcol.province
		zcol.amphur
		zcol.tambol
		zcol.zranum
		zcol.province
		zcol.amphur
		zcol.tambol    
		zcol.zatenum
		zcol.zlgnum
		zcol.zlcid
		zcol.zlcissdate
		zcol.zcertcid
		zcol.zcertlotl
		zcol.zcertgrp
		zcol.zcertperiod
		zcol.zinstrument
		zcol.zissuedate
		zcol.zissuemdt
		zcol.boo
		zcol.coll
		zcol.boo
		zcol.coll
		*/
		
		type Number ZCOLEX
		set ZCOLEX = 0
		// TO CHECK DUP
			/////////////////////////////////////
		do {
			type RecordZCOL zcolchk = Db.getRecord("ZCOL","COLL=99999",1)
			set zcolchk.coltyp = input.piece("|",14)						// Collateral type
			set zcolchk.colsubt = input.piece("|",15)	
			set zcolchk.lndno = input.piece("|",36)
			set zcolchk.province = input.piece("|",28)
			set zcolchk.tambol = input.piece("|",29)
			set zcolchk.amphur = input.piece("|",30)	
			
			if (zcolchk.coltyp = 1),(("4,5")[(zcolchk.colsubt)) set zcolchk.grpno = input.piece("|",24)
			else  set zcolchk.ravang = input.piece("|",24)		
	
			// Wiphak
			// 22/05/2012
			// CAP sends zranum (Rental Agreement Register Number) in LOTNO
			if zcolchk.coltyp = 11 set zcolchk.zranum=input.piece("|",43)
	
			set zcolchk.bknumber = input.piece("|",25)						// Book number
			set zcolchk.pageno = input.piece("|",26)						// Page number
			set zcolchk.seqno = input.piece("|",27)
			set zcolchk.bldcode = input.piece("|",22)						// Building code
			set zcolchk.mcode1 = input.piece("|",88)						// Chassis number
			if zcolchk.coltyp = 3 do {
				type String tmp
				set tmp = input.piece("|",89)
				set zcolchk.mcode1 = input.piece(";",1)					// Engine number
				// set zcolchk.mcode2 = input.piece(";",2)					// Engine number
			}
	
			set zcolchk.cid = +input.piece("|",98)
			if zcolchk.coltyp=5 do {
				set zcolchk.bondcode = input.piece("|",16)						// Bond code
				set zcolchk.issyear = input.piece("|",17)						// Issue year
				set zcolchk.bseq = input.piece("|",18)						// Bond sequence
			}
			
			
			set zcolchk.bstrtid = input.piece("|",93)
			
			if zcolchk.coltyp = 7 do {
				type String cid = input.piece("|",19)					// Citizen ID
				type ResultSet rs = Db.select("ACN","CIF","ZCIZID=:cid")
				if rs.next() set zcolchk.pacn = rs.getCol("ACN")
			}
			
			// condo room number
			set zcolchk.rmnumber = input.piece("|",149)
			
			// building register number
			set zcolchk.buildno = input.piece("|",150)
			
			/*
			zcol.bootfr
			zcol.ccrnum
			zcol.ccrdt	
			zcol.zranum  
			zcol.zatenum
			zcol.zlgnum
			zcol.zlcid
			zcol.zlcissdate
			zcol.zcertcid
			zcol.zcertlotl
			zcol.zcertgrp
			zcol.zcertperiod
			*/
			
			set zcolchk.zinstrument = input.piece("|",107)
			// zcol.zissuedate
			// zcol.zissuemdt
			set zcolchk.boo = input.piece("|",20)
			
			type String ZPRIMKEY,ZFIELD
			set ZFIELD=""
			do {
				new ZCOLTYP,ZCOLSUBT
				set ZCOLTYP=zcolchk.coltyp
				set ZCOLSUBT=zcolchk.colsubt
				if ZCOLTYP=1,("1,2,3"[ZCOLSUBT) do {
					if zcolchk.lndno="" set ER=1,ZFIELD="LNNO" quit
					if zcolchk.province="" set ER=1,ZFIELD="PROVINCE" quit
					if zcolchk.amphur="" set ER=1,ZFIELD="AMPHUR" quit
					if zcolchk.tambol="" set ER=1,ZFIELD="TAMBOL" quit
				}
				if ZCOLTYP=1,("4,5"[ZCOLSUBT) do {
					if zcolchk.grpno="" set ER=1,ZFIELD="GRPNO" quit
					if zcolchk.bknumber="" set ER=1,ZFIELD="BKNUMBER" quit
					if zcolchk.pageno="" set ER=1,ZFIELD="PAGENO" quit
					if zcolchk.seqno="" set ER=1,ZFIELD="SEQNO" quit
					if zcolchk.province="" set ER=1,ZFIELD="PROVINCE" quit
					if zcolchk.amphur="" set ER=1,ZFIELD="AMPHUR" quit
					if zcolchk.tambol="" set ER=1,ZFIELD="TAMBOL" quit
				}
				if ZCOLTYP=2,(ZCOLSUBT=0) do {
					if zcolchk.bldcode="" set ER=1,ZFIELD="BLDCODE" quit
					if zcolchk.province="" set ER=1,ZFIELD="PROVINCE" quit
					if zcolchk.amphur="" set ER=1,ZFIELD="AMPHUR" quit
					if zcolchk.tambol="" set ER=1,ZFIELD="TAMBOL" quit
				}
				if ZCOLTYP=8,(ZCOLSUBT=0) do {
					if zcolchk.rmnumber="" set ER=1,ZFIELD="RMNUMBER" quit
					if zcolchk.buildno="" set ER=1,ZFIELD="BUILDNO" quit
					if zcolchk.province="" set ER=1,ZFIELD="PROVINCE" quit
				}		
			}
			if ER set RM="Cannot generate coll key, missing field:"_ZFIELD quit 
			set ZPRIMKEY=$$COLKEY^ZCOLKEY(zcolchk,zcolchk.coltyp,zcolchk.colsubt)
			set ZCOLEX=0
			if ZPRIMKEY.isNull() set ER = 1,RM = "Cannot generate Coll primary key" quit
			type ResultSet zcolrs = Db.select("COLL","ZCOL","PRIMKEY=:ZPRIMKEY")
			if zcolrs.next() do {
				set ZCOLEX = zcolrs.getCol("COLL")
			}
		}	
		
		if ER.get() quit
		
		type RecordZCOL zcola
		if ZCOLEX'=0 do {
			// existing coll
			set zcola = Db.getRecord("ZCOL","COLL=:ZCOLEX")
		}
		else  do {
			// new coll
		
			// crate  ZCOL, ZINSURANCE, ZCOLINSLINK, ZCOLWNLINK,ZCTRCTCOL
			set ER = $$^ZMRPC920(.ZCNUM,1,"COL",9997)					// Collateral ID
			set ER = $$LV2V^MSG(ZCNUM,.ARR,0)
			set ZCNUM = ARR(1).get()
			set zcola = Db.getRecord("ZCOL","COLL=:ZCNUM",1)
			do zcola.setAuditFlag(1)
			if zcola.getMode() set ER = 1, RM = "Collateral record already exists "_ZCNUM quit
		}
	
	
		if ER.get() quit
		do zcola.setAuditFlag(1)
		set ZCNUM = zcola.coll
	
	
		if CID.isNull() set ER = 1, RM = "Account is null" quit
		type RecordACN acn = Db.getRecord("ACN","CID=:CID",1)	
		if 'acn.getMode() set ER = 1, RM = "Account "_CID_" not found" quit
	
		set zcola.coltyp = input.piece("|",14)						// Collateral type
		set zcola.colsubt = input.piece("|",15)						// Collateral subtype
		
	
		
	// END CHECK DUP
		
		// BOND
		if zcola.coltyp=5 do {
			set zcola.bondcode = input.piece("|",16)						// Bond code
			set zcola.issyear = input.piece("|",17)						// Issue year
			set zcola.bseq = input.piece("|",18)						// Bond sequence
		}
		
		if zcola.coltyp = 7 do {
			type String cid = input.piece("|",19)					// Citizen ID
			type ResultSet rs = Db.select("ACN","CIF","ZCIZID=:cid")
			if rs.next() set zcola.pacn = rs.getCol("ACN")
		}
	
		do {										// Branch and Cost Center
			type String boo								// Also response unit
			set boo = input.piece("|",20)
			set zcola.boo = boo
			type RecordUTBLBRCD brcd = Db.getRecord("UTBLBRCD","BRCD=:boo",1)
			set zcola.cc = brcd.ccdef
			#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Scope
			set zcola.respunit = brcd.ccdef
		}
		
		set zcola.bldcode = input.piece("|",22)						// Building code
		set zcola.bldtype = input.piece("|",33)
		
		if (zcola.coltyp = 1),(("4,5")[(zcola.colsubt)) set zcola.grpno = input.piece("|",24)
		else  set zcola.ravang = input.piece("|",24)
		
		set zcola.bknumber = input.piece("|",25)						// Book number
		set zcola.pageno = input.piece("|",26)						// Page number
		set zcola.seqno = input.piece("|",27)						// Sequence number
		set zcola.province = input.piece("|",28)						// Province
		set zcola.tambol = input.piece("|",29)						// Tempor code
		set zcola.amphur = input.piece("|",30)						// Amphur code
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Scope
		
		
		type String vol									// Land volume
		set vol = input.piece("|",34)
		if zcola.coltyp = 1 do {
			set zcola.lndvol1 = vol.piece(";",1)	
			set zcola.lndvol2 = vol.piece(";",2)	
			set zcola.lndvol3 = vol.piece(";",3).piece(".",1)	
			set zcola.lndvol4 = vol.piece(";",3).piece(".",2)
		}
		
		// condo
		if zcola.coltyp = 8 set zcola.rmarea = +input.piece("|",34)
		
		// Wiphak
		// 22/05/2012
		// CAP sends zranum (Rental Agreement Register Number) in LOTNO
		if zcola.coltyp = 11 set zcola.zranum=input.piece("|",43)
		
		set zcola.lndno = input.piece("|",36)						// Land deed number	  
		// set zcola.ravang = input.piece("|",43)						// Lot number
		set zcola.apdcode = input.piece("|",45)						// Valuer name
		set zcola.appdt = input.piece("|",46)						// Valuation date
		if zcola.appdt.contains("/") set zcola.appdt = $$FDAT^%ZM(zcola.appdt,"DD/MM/YEAR")
	
		// condo room number
		set zcola.rmnumber = input.piece("|",149)
		
		// building register number
		set zcola.buildno = input.piece("|",150)
		
		
		set zcola.appval = input.piece("|",47)						// Valuation
		if zcola.appval.isNull() set zcola.appval = input.piece("|",111)	
		set zcola.bldval = input.piece("|",48)
		set zcola.lndval = input.piece("|",49)						// Land value
		
		set zcola.appoff1 = input.piece("|",75)						// Official valuer
		set zcola.mcode1 = input.piece("|",88)						// Chassis number
	
		if zcola.coltyp = 3 do {
			type String tmp
			set tmp = input.piece("|",89)
			set zcola.mcode1 = input.piece(";",1)					// Engine number
			set zcola.mcode2 = input.piece(";",2)					// Engine number
		}
		set zcola.mkprice = input.piece("|",90)						// Market price
		set zcola.bstrtid = input.piece("|",93)						// Bond number
		set zcola.bondname = input.piece("|",94)						// Bond name
		set zcola.bexpdate = input.piece("|",95)						// Bond date
		if zcola.bexpdate.contains("/") set zcola.bexpdate = $$FDAT^%ZM(zcola.bexpdate,"DD/MM/YEAR")
	
		set zcola.bondtype = input.piece("|",96)						// Bond type
		
		if zcola.coltyp=4 do {
			set zcola.cid = +input.piece("|",98)	
			set zcola.appval = input.piece("|",120)					// Deposit account number
		}
		
		set zcola.zinstrument = input.piece("|",107)					// Promissory Note Nuber
		set zcola.zissuename = input.piece("|",108)					// Issuer name
		set zcola.gtype = input.piece("|",109)						// Gold code
		set zcola.zunit = input.piece("|",110)						// Weight
								// Appraised value
		set zcola.apptid = input.piece("|",112), zcola.appby = 3				// External / appraiser name
		if 'zcola.appval.isNull() do {
			set zcola.appdt = input.piece("|",113)						// Appraisal date
			if zcola.appdt.contains("/") set zcola.appdt = $$FDAT^%ZM(zcola.appdt,"DD/MM/YEAR")
		}
		#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Scope
		// if zcola.coltyp = 7 set zctrctcol.pldgval = input.piece("|",120)			// pledged value
		// if zcola.coltyp = 4 set zcola.appval = input.piece("|",120)			// pledged value
		
		/*
		type String ZPRIMKEY
		type Number ZCOLEX
		set ZCOLEX=""
		set ZPRIMKEY=$$COLKEY^ZCOLKEY(zcola,zcola.coltyp,zcola.colsubt)
		if ZPRIMKEY.isNull() set ER = 1,RM = "Cannot generate Coll primary key" quit
		type ResultSet zcolrs = Db.select("COLL","ZCOL","PRIMKEY=:ZPRIMKEY")
		if zcolrs.next() do { if 1
			type String ZAR1()
			set ZCOLEX = zcolrs.getCol("COLL")
			//// new ZARCOL1
			//// do zcola.toArray(ZARCOL1)
			type RecordZCOL zcoln = Db.getRecord("ZCOL","COLL=:ZCOLEX")
			
			//// do zcoln.setAuditFlag(1)
			//// do zcoln.setMode(1)
			set zcoln=zcola.copy()
			// do zcoln.setAuditFlag(1)
			//// do zcola.toArray("ZAR1")
			//// do zcoln.fromArray("ZAR1")
			set zcoln.coll = ZCOLEX
			do zcoln.setMode(1)
			do zcoln.save()
			set ZCNUM=ZCOLEX
		}
		else  do zcola.save()
		*/
		
		do zcola.save()
		if ER.get() set RM="Can't save ZCOL: "_RM.get() quit
		
		// create ZCTRCTCOLL
		if ZTXTYPE = "MCOLL" do { quit:ER.get()
		// get contract from cap tieToMaster
			if 'Db.isDefined("ZCONTRACT","CTRCT=:tieToMaster") set ER=1,RM="Invalid contract no" quit
			type RecordZCTRCTCOL zctcoll = Db.getRecord("ZCTRCTCOL","CTRCT=:tieToMaster,COLL=:ZCNUM",1)
			// if coll type is 7
			// if input.piece("|",14) = 7 set zctcoll.pldgval = input.piece("|",120)
			if input.piece("|",14) = 7 set zctcoll.pldgval = input.piece("|",61)
			set zctcoll.ccstat = "P"
			do zctcoll.save()
			if ER.get() set RM="Cannot save ZCTRCTCOL : "_RM.get()
		}	
		if ZTXTYPE = "1COLL" do { quit:ER.get()
		// get new contract
			if 'Db.isDefined("ZCONTRACT","CTRCT=:ZMCTRCT") set ER=1,RM="Invalid contract no" quit
			type RecordZCTRCTCOL zctcoll = Db.getRecord("ZCTRCTCOL","CTRCT=:ZMCTRCT,COLL=:ZCNUM",1)
			// if coll type is 7
			// if input.piece("|",14) = 7 set zctcoll.pldgval = input.piece("|",120)
			if input.piece("|",14) = 7 set zctcoll.pldgval = input.piece("|",61)
			set zctcoll.ccstat = "P"
			do zctcoll.save()
			if ER.get() set RM="Cannot save ZCTRCTCOL : "_RM.get()
		}
		
		// regOwnCIFNo
		type Number ZOWNCIF
		set ZOWNCIF = input.piece("|",65)
		if 'ZOWNCIF.isNull() do {
			if 'Db.isDefined("CIF","ACN=:ZOWNCIF") set ER=1,RM="Coll owner doesn't exist : "_ZOWNCIF quit
			type RecordZCOLOWNLINK zclwn = Db.getRecord("ZCOLOWNLINK","COLL=:ZCNUM,ACN=:ZOWNCIF",1)
			do zclwn.save()
		}
		
		if ER.get() set RM="Can't save ZCOLOWNLINK: "_RM.get() quit
		
		// Create up to 3 insurance policy records
		type String INSCODE, POLICYNUM
		set INSCODE = input.piece("|",125)						// insurance code
		set POLICYNUM = input.piece("|",126)						// policy number
		if 'INSCODE.isNull(), 'POLICYNUM.isNull() do {
			type RecordZINSURANCE zinsurance = Db.getRecord("ZINSURANCE","INSCOCD=:INSCODE,POLICYNUM=:POLICYNUM",1)
			
			set zinsurance.instype = input.piece("|",127)				// insurance type
			set zinsurance.inscovamt = input.piece("|",129)				// Amount insured
			set zinsurance.startdate = input.piece("|",130)				// Start date
			if zinsurance.startdate.contains("/") set zinsurance.startdate = $$FDAT^%ZM(zinsurance.startdate,"DD/MM/YEAR")
			set zinsurance.expiredate = input.piece("|",131)			// Expiration date
			if zinsurance.expiredate.contains("/") set zinsurance.expiredate = $$FDAT^%ZM(zinsurance.expiredate,"DD/MM/YEAR")
			set zinsurance.netprem = input.piece("|",132)				// premium amount
			do zinsurance.save()
			if ER.get() set RM="Can't save INS1: "_RM.get() quit
			
			type RecordZCOLINSLINK zclink = Db.getRecord("ZCOLINSLINK","COLL=:ZCNUM,INSCOCD=:INSCODE,POLICYNUM=:POLICYNUM",1)
			do zclink.save()
			if ER.get() set RM="Can't save ZCOLINSLINK: "_RM.get() quit
		}
		
		set INSCODE = input.piece("|",133)						// insurance code
		set POLICYNUM = input.piece("|",134)						// policy number
		if 'INSCODE.isNull(), 'POLICYNUM.isNull() do {
			type RecordZINSURANCE zinsurance = Db.getRecord("ZINSURANCE","INSCOCD=:INSCODE,POLICYNUM=:POLICYNUM",1)
			
			set zinsurance.instype = input.piece("|",135)				// insurance type
			set zinsurance.inscovamt = input.piece("|",136)				// Amount insured
			set zinsurance.startdate = input.piece("|",137)				// Start date
			if zinsurance.startdate.contains("/") set zinsurance.startdate = $$FDAT^%ZM(zinsurance.startdate,"DD/MM/YEAR")
			set zinsurance.expiredate = input.piece("|",138)			// Expiration date
			if zinsurance.expiredate.contains("/") set zinsurance.expiredate = $$FDAT^%ZM(zinsurance.expiredate,"DD/MM/YEAR")
			set zinsurance.netprem = input.piece("|",139)				// premium amount
			do zinsurance.save()
			if ER.get() set RM="Can't save INS2: "_RM.get() quit
						
			type RecordZCOLINSLINK zclink = Db.getRecord("ZCOLINSLINK","COLL=:ZCNUM,INSCOCD=:INSCODE,POLICYNUM=:POLICYNUM",1)
			do zclink.save()
			if ER.get() set RM="Can't save ZCOLINSLINK: "_RM.get() quit
		}
		
		set INSCODE = input.piece("|",140)						// insurance code
		set POLICYNUM = input.piece("|",141)						// policy number
		if 'INSCODE.isNull(), 'POLICYNUM.isNull() do {
			type RecordZINSURANCE zinsurance = Db.getRecord("ZINSURANCE","INSCOCD=:INSCODE,POLICYNUM=:POLICYNUM",1)
			
			set zinsurance.instype = input.piece("|",142)				// insurance type
			set zinsurance.inscovamt = input.piece("|",143)				// Amount insured
			set zinsurance.startdate = input.piece("|",144)				// Start date
			if zinsurance.startdate.contains("/") set zinsurance.startdate = $$FDAT^%ZM(zinsurance.startdate,"DD/MM/YEAR")
			set zinsurance.expiredate = input.piece("|",145)			// Expiration date
			if zinsurance.expiredate.contains("/") set zinsurance.expiredate = $$FDAT^%ZM(zinsurance.expiredate,"DD/MM/YEAR")
			set zinsurance.netprem = input.piece("|",146)				// premium amount
			do zinsurance.save()
			if ER.get() set RM="Can't save INS3: "_RM.get() quit
						
			type RecordZCOLINSLINK zclink = Db.getRecord("ZCOLINSLINK","COLL=:ZCNUM,INSCOCD=:INSCODE,POLICYNUM=:POLICYNUM",1)
			do zclink.save()
			if ER.get() set RM="Can't save ZCOLINSLINK: "_RM.get() quit
		}
		
		if ER.get() quit	
		
	}
	}
	if ER.get() quit (header_"|"_$$GETTIME()_"|0||1999|"_RM_"|"_output.get())
	
	set RM = ""
	if isMaster = "Y" set output = ZMCTRCT	// Return Contract Number
	else  set output = ZCNUM
	quit (header_"|"_$$GETTIME()_"|0|"_RM_"|0|"_RM_"|"_output)
	
	
public CUSTEXP(String input)
	/*  Customer exposure by CIF #  */
	
	type public Number ER = 0
	type public String RM = ""
	type String COLL, CTRCT, header, output = ""
	type Number ACN = "", CNT = 0, pos
	type Boolean isGuarantor = false
	type RecordLN ln
	type RecordDEP dep
	
	set header = input.piece("|",1,10)	// Common header - first 10 pieces.
	set pos = 11
	set ACN = input.piece("|",pos)

	// The data is either from a guarantor or a customer/account relationship.  First check
	// if it is a guarantor.  If so, pull the data from there.  Otherwise, get account data based on
	// the RELCIF relationship between the supplied customer number and the account it owns.
	
	/*
	type ResultSet rs
	set rs = Db.select("CTRCT,COLL","ZCTRCTCOL,ZCOL,ZCONTRACT","ZCTRCTCOL.COLL=ZCOL.COLL AND ZCOL.COLTYP=7 AND ZCOL.PACN=:ACN AND ZCTRCTCOL.CCSTAT='P' AND ZCONTRACT.CTRCT=ZCTRCTCOL.CTRCT AND ZCONTRACT.CTRSTAT=0")
	if rs.next() do {
		set isGuarantor = true
		set CTRCT = rs.getCol("CTRCT")
		set COLL = rs.getCol("COLL")
	}
	*/

	// primary loan owner and co-borrower

	type ResultSet rs = Db.select("CID,ROLE","RELCIF","ACN=:ACN")
	set pos = 0
	while rs.next() do {
		
		type Number CID, ROLE
		set CID = rs.getCol("CID")
		set ROLE = rs.getCol("ROLE")
		
		type RecordACN acn = Db.getRecord("ACN","CID=:CID",1)
		quit:'acn.getMode()
		
		set ln = {RecordLN}acn
		set dep = {RecordDEP}acn
		
		// ignore dep that has no OD
		if acn.cls="D",(dep.zlimacr '> 0) quit
		
		// ignore ln that tdr=0 and stat=4
		if (ln.tdr = 0),(ln.stat = 4) quit
		
		set output.piece("|",pos+1) = ACN
		set output.piece("|",pos+2) = acn.cid
		set output.piece("|",pos+3) = $S(ROLE=1:"AP",ROLE=2:"JT",1:"")
		
		
					
		if acn.cls="L" do {  //loan account
			
			/*
			type ResultSet mprod = Db.select("MPROD,PCAMPAIGN,PPROG", "ZUTBLPRODCAP","TYPE=:ln.type and SUBT=:ln.subt and ZMKTCD=:ln.zmktcd and ZDLRCD=:ln.zdlrcd")
			if mprod.next() do {
				
				set output.piece("|",pos+4) = mprod.getCol("MPROD")		// product code
				set output.piece("|",pos+5) = mprod.getCol("PCAMPAIGN")		// product group
				set output.piece("|",pos+6) = mprod.getCol("PPROG")		// facility code
			}
			*/
			set output.piece("|",pos+4) = ln.subt
			set output.piece("|",pos+5) = ln.zmktcd
			set output.piece("|",pos+6) = ln.type
			
			
		}
		else  do {  // deposit account
			
			// get od type from zodtier that still active
			// try to get ACTIVE row. if there's no active row, get first row
			type ResultSet zodt = Db.select("SEQ,ODTYP,ACTIVE","ZODTIER","CID=:dep.cid","SEQ DESC")
			while zodt.next() do { quit:zodt.getCol("ACTIVE")
				set output.piece("|",pos+4) = zodt.getCol("ODTYP")
			}
			set output.piece("|",pos+6) = dep.type
			set output.piece("|",pos+5) = ""
		}
		
		if acn.cls = "L" set output.piece("|",pos+7) = ln.crlmt.roundDec(2)
		else  set output.piece("|",pos+7) = dep.zlimacr.roundDec(2)
		
		if acn.cls = "L" do {
			if (ln.tdr=0),(ln.stat=0) set output.piece("|",pos+8) = ln.crlmt.roundDec(2)
			else  set output.piece("|",pos+8) = ln.bal.roundDec(2)
		}
		else  do {
			// if dep.bal '< 0 set output.piece("|",pos+8) = dep.bal.roundDec(2)
			if dep.bal '< 0 set output.piece("|",pos+8) = 0
			else  set output.piece("|",pos+8) = -acn.bal.roundDec(2)
		}
		
		set output.piece("|",pos+9) = 0
		set output.piece("|",pos+10) = ""
		set output.piece("|",pos+11) = ""
		set output.piece("|",pos+12) = ""
		set output.piece("|",pos+13) = ""
		if acn.cls = "L" set output.piece("|",pos+14) = $$INSTALL(.ln)
		else  set output.piece("|",pos+14) = ""
		
		set pos = pos + 14
		set CNT = CNT + 1
	}





	// query for guarantor
	
	type Number ZARRCTR()
	type ResultSet zrszcol=Db.select("COLL,COLTYP","ZCOL","PACN=:ACN")
	while zrszcol.next() do {
		type Number ZCOLX
		if zrszcol.getCol("COLTYP")'=7 quit
		set ZCOLX = zrszcol.getCol("COLL")
		type ResultSet zrsctcol=Db.select("CTRCT,CCSTAT","ZCTRCTCOL","COLL=:ZCOLX")
		while zrsctcol.next() do {
			type Number ZCTRCTX
			if zrsctcol.getCol("CCSTAT")'="P" quit
			set ZCTRCTX = zrsctcol.getCol("CTRCT")
			type RecordZCONTRACT zctrctx = Db.getRecord("ZCONTRACT","CTRCT=:ZCTRCTX")
			if zctrctx.ctrstat'=0 quit
			set ZARRCTR(ZCTRCTX)=ZCOLX
		}
	}
	
	type Number ZCTRCTR,ZARRCID()
	set ZCTRCTR = ""
	for  set ZCTRCTR=ZARRCTR(ZCTRCTR).order() quit:ZCTRCTR=""  do {
		type ResultSet rs2 = Db.select("CID","ZCTRCTACN","CTRCT=:ZCTRCTR")
		while rs2.next() do {
			set ZARRCID(rs2.getCol("CID")) = ZCTRCTR_":"_ZARRCTR(ZCTRCTR)
		}
	}
	
	type Number CID
	set CID = ""
	for  set CID=ZARRCID(CID).order() quit:CID=""  do {
		type RecordACN acn = Db.getRecord("ACN","CID=:CID",1)
		if 'acn.getMode() quit
	
		set output.piece("|",pos+1) = ACN
		set output.piece("|",pos+2) = CID
		set output.piece("|",pos+3) = "GO"
		
		set ln = {RecordLN}acn
		set dep = {RecordDEP}acn
		
		type Number ZYCTR,ZYCOLL
		set ZYCTR=ZARRCID(CID).piece(":",1)
		set ZYCOLL=ZARRCID(CID).piece(":",2)
		
		/*
		if acn.cls="L" set output.piece("|",pos+4) = ln.subt
		else  set output.piece("|",pos+4) = ""
		
		set output.piece("|",pos+5) = acn.type
			
		if acn.cls = "L" set output.piece("|",pos+6) = ln.zmktcd
		else  set output.piece("|",pos+6) = ""
		*/
		
		if acn.cls="L" do {  //loan account
			
			/*
			type ResultSet mprod = Db.select("MPROD,PCAMPAIGN,PPROG", "ZUTBLPRODCAP","TYPE=:ln.type and SUBT=:ln.subt and ZMKTCD=:ln.zmktcd and ZDLRCD=:ln.zdlrcd")
			if mprod.next() do {
				
				set output.piece("|",pos+4) = mprod.getCol("MPROD")		// product code
				set output.piece("|",pos+5) = mprod.getCol("PCAMPAIGN")		// product group
				set output.piece("|",pos+6) = mprod.getCol("PPROG")		// facility code
			}
			*/
			set output.piece("|",pos+4) = ln.subt
			set output.piece("|",pos+5) = ln.zmktcd
			set output.piece("|",pos+6) = ln.type
			
			
		}
		else  do {  // deposit account
			
			// get od type from zodtier that still active
			// try to get ACTIVE row. if there's no active row, get first row
			type ResultSet zodt = Db.select("SEQ,ODTYP,ACTIVE","ZODTIER","CID=:dep.cid","SEQ DESC")
			while zodt.next() do { quit:zodt.getCol("ACTIVE")
				set output.piece("|",pos+4) = zodt.getCol("ODTYP")
			}
			set output.piece("|",pos+6) = dep.type
			set output.piece("|",pos+5) = ""
		}
		
		
		if acn.cls = "L" set output.piece("|",pos+7) = ln.crlmt.roundDec(2)
		else  set output.piece("|",pos+7) = dep.zlimacr.roundDec(2)
		
		// if acn.cls = "L" set output.piece("|",pos+8) = ln.bal.roundDec(2)
		if acn.cls = "L" do {
			if ln.tdr=0 set output.piece("|",pos+8) = ln.crlmt.roundDec(2)
			else  set output.piece("|",pos+8) = ln.bal.roundDec(2)
		}
		else  do {
			if dep.bal '< 0 set output.piece("|",pos+8) = dep.bal.roundDec(2)
			else  set output.piece("|",pos+8) = -acn.bal.roundDec(2)
		}
		
		set output.piece("|",pos+9) = 0
		if ('ZYCTR.isNull()),('ZYCOLL.isNull()) do {
			if 'Db.isDefined("ZCTRCTCOL","CTRCT=:ZYCTR,COLL=:ZYCOLL") quit
			type RecordZCTRCTCOL zyctcol=Db.getRecord("ZCTRCTCOL","CTRCT=:ZYCTR,COLL=:ZYCOLL")
			set output.piece("|",pos+9) = zyctcol.pldgval
		}
		set output.piece("|",pos+10) = ""
		set output.piece("|",pos+11) = ""
		set output.piece("|",pos+12) = ""
		set output.piece("|",pos+13) = ""


		// Wiphak 10/05/2012
		// tassanin requested to change 14th field
		/*
		if acn.cls = "L" set output.piece("|",pos+14) = $$INSTALL(.ln)
		else  set output.piece("|",pos+14) = ""
		*/
		if acn.cls = "L" do { if 1
			if (ln.pcm = 14)!(ln.pcm = 15) do {
				set output.piece("|",pos+14) = ln.pmtpi
			}
			if (ln.pcm = 2)!(ln.pcm = 3) do {
				set output.piece("|",pos+14) = ln.fpa
			}
			if (ln.pcm = 1) do {
				set output.piece("|",pos+14) = ln.fpa + ln.fia
			}
			
		}
		else  set output.piece("|",pos+14) = ""
		
			
		set pos = pos + 14
		set CNT = CNT + 1
	}

		
	
	set header.piece("|",7) = CNT
	quit (header_"|"_$$GETTIME()_"|0||0||"_output)


public CUSTEXPOLD(String input)
	/*  Customer exposure by CIF #  */
	
	type public Number ER = 0
	type public String RM = ""
	type String COLL, CTRCT, header, output = ""
	type Number ACN = "", CNT = 0, pos
	type Boolean isGuarantor = false
	type RecordLN ln
	type RecordDEP dep
	
	set header = input.piece("|",1,10)	// Common header - first 10 pieces.
	set pos = 11
	set ACN = input.piece("|",pos)

	// The data is either from a guarantor or a customer/account relationship.  First check
	// if it is a guarantor.  If so, pull the data from there.  Otherwise, get account data based on
	// the RELCIF relationship between the supplied customer number and the account it owns.
	
	/*
	type ResultSet rs
	set rs = Db.select("CTRCT,COLL","ZCTRCTCOL,ZCOL,ZCONTRACT","ZCTRCTCOL.COLL=ZCOL.COLL AND ZCOL.COLTYP=7 AND ZCOL.PACN=:ACN AND ZCTRCTCOL.CCSTAT='P' AND ZCONTRACT.CTRCT=ZCTRCTCOL.CTRCT AND ZCONTRACT.CTRSTAT=0")
	if rs.next() do {
		set isGuarantor = true
		set CTRCT = rs.getCol("CTRCT")
		set COLL = rs.getCol("COLL")
	}
	*/

	// Not a guarantor, so use RELCIF
	if 'isGuarantor do {
		type ResultSet rs = Db.select("CID,ROLE","RELCIF","ACN=:ACN")
		set pos = 0
		while rs.next() do {
			
			type Number CID, ROLE
			set CID = rs.getCol("CID")
			set ROLE = rs.getCol("ROLE")
			
			type RecordACN acn = Db.getRecord("ACN","CID=:CID",1)
			quit:'acn.getMode()
			
			set output.piece("|",pos+1) = ACN
			set output.piece("|",pos+2) = acn.cid
			set output.piece("|",pos+3) = $S(ROLE=1:"AP",ROLE=2:"JT",1:"")
			
			set ln = {RecordLN}acn
			set dep = {RecordDEP}acn
						
			if acn.cls="L" do {  //loan account
				type ResultSet mprod = Db.select("MPROD,PCAMPAIGN,PPROG", "ZUTBLPRODCAP","TYPE=:ln.type and SUBT=:ln.subt and ZMKTCD=:ln.zmktcd and ZDLRCD=:ln.zdlrcd")
				if mprod.next() do {
					
					set output.piece("|",pos+4) = mprod.getCol("MPROD")		// product code
					set output.piece("|",pos+5) = mprod.getCol("PCAMPAIGN")		// product group
					set output.piece("|",pos+6) = mprod.getCol("PPROG")		// facility code
				}
			}
			else  do {  // deposit account
				set output.piece("|",pos+4) = ""
				set output.piece("|",pos+5) = ""
				set output.piece("|",pos+6) = ""
			}
			
			if acn.cls = "L" set output.piece("|",pos+7) = ln.crlmt.roundDec(2)
			else  set output.piece("|",pos+7) = dep.zlimacr.roundDec(2)
			
			if acn.cls = "L" set output.piece("|",pos+8) = ln.bal.roundDec(2)
			else  do {
				if dep.bal '< 0 set output.piece("|",pos+8) = dep.bal.roundDec(2)
				else  set output.piece("|",pos+8) = -acn.bal.roundDec(2)
			}
			
			set output.piece("|",pos+9) = 0
			set output.piece("|",pos+10) = ""
			set output.piece("|",pos+11) = ""
			set output.piece("|",pos+12) = ""
			set output.piece("|",pos+13) = ""
			if acn.cls = "L" set output.piece("|",pos+14) = $$INSTALL(.ln)
			else  set output.piece("|",pos+14) = ""
			
			set pos = pos + 14
			set CNT = CNT + 1
		}
	}

	else  do {	// else this is a guarantor
		type ResultSet rs2 = Db.select("CID","ZCTRCTACN","CTRCT=:CTRCT")
		while rs2.next() do {
			
			set CID = rs2.getCol("CID")
			type RecordACN acn = Db.getRecord("ACN","CID=:CID",1)
			if 'acn.getMode() quit
		
			set output.piece("|",pos+1) = ACN
			set output.piece("|",pos+2) = CID
			set output.piece("|",pos+3) = "GO"
			
			set ln = {RecordLN}acn
			set dep = {RecordDEP}acn
			
			if acn.cls="L" set output.piece("|",pos+4) = ln.subt
			else  set output.piece("|",pos+4) = ""
			
			set output.piece("|",pos+5) = acn.type
			
			if acn.cls = "L" set output.piece("|",pos+6) = ln.zmktcd
			else  set output.piece("|",pos+6) = ""
			
			if acn.cls = "L" set output.piece("|",pos+7) = ln.crlmt.roundDec(2)
			else  set output.piece("|",pos+7) = dep.zlimacr.roundDec(2)
			
			if acn.cls = "L" set output.piece("|",pos+8) = ln.bal.roundDec(2)
			else  do {
				if dep.bal '< 0 set output.piece("|",pos+8) = dep.bal.roundDec(2)
				else  set output.piece("|",pos+8) = -acn.bal.roundDec(2)
			}
			
			set output.piece("|",pos+9) = 0
			set output.piece("|",pos+10) = ""
			set output.piece("|",pos+11) = ""
			set output.piece("|",pos+12) = ""
			set output.piece("|",pos+13) = ""

			if acn.cls = "L" set output.piece("|",pos+14) = $$INSTALL(.ln)
			else  set output.piece("|",pos+14) = ""
				
			set pos = pos + 14
			set CNT = CNT + 1
		}
	}
		
	
	set header.piece("|",7) = CNT
	quit (header_"|"_$$GETTIME()_"|0||0||"_output)


private INSTALL(RecordLN ln)

	// return installment data from EFD based on ln.pcm value

	type String maxfpa = "", maxfpafia = "", maxpmtpi = ""
	
	type ResultSet rs = Db.select("SQL","EFD","EFDATE>:%SystemDate and AKEY=:ln.cid and TABLE='LN'")
	while rs.next() do {
		type String fia, fpa, pmtpi, sql
		
		set sql = rs.getCol("SQL").translate(" ")
		
		if ln.pcm = 14 ! (ln.pcm = 15) do {
			quit:'sql.contains("PMTPI=")
			set pmtpi = sql.piece("PMTPI=",2).piece(",",1).stripQuotes("'")
			if pmtpi > maxpmtpi set maxpmtpi = pmtpi
		}
		
		if ln.pcm = 2 ! (ln.pcm = 3) do {
			quit:'sql.contains("FPA=")
			set fpa = sql.piece("FPA=",2).piece(",",1).stripQuotes("'")
			if fpa > maxfpa set maxfpa = fpa
		}
		
		if ln.pcm = 1 do {
			set fia = "" set fpa = ""
			if sql.contains("FPA=") set fpa = sql.piece("FPA=",2).piece(",",1).stripQuotes("'")
			if sql.contains("FIA=") set fia = sql.piece("FIA=",2).piece(",",1).stripQuotes("'")
			if (fia + fpa) > maxfpa set maxfpa = (fia + fpa)
		}
	}
	
	if maxpmtpi.isNull() set maxpmtpi = ln.pmtpi
	if maxfpa.isNull() set maxfpa = ln.fpa
	if maxfpafia.isNull() set maxfpafia = (ln.fpa + ln.fia)
	
	if ln.pcm = 14 ! (ln.pcm = 15) quit +maxpmtpi.roundDec(2)
	if ln.pcm = 2 ! (ln.pcm = 3) quit +maxfpa.roundDec(2)
	if ln.pcm = 1 quit +maxfpafia.roundDec(2)
	
	quit ""
	
	
	
public ACCREL(String input)

	type public Number ER = 0
	type public String RM = ""
	type String BOO, CRCD, header, output = ""
	type Number ACN, CNT = 0, TYPE
	
	set header = input.piece("|",1,10)	// Common header - first 10 pieces.
	set CRCD = input.piece("|",13)
	set BOO = input.piece("|",14)
	set CID = input.piece("|",16)
	
	type RecordACN acn = Db.getRecord("ACN","CID=:CID",1)
	if 'acn.getMode() set ER =1, RM = "Account record does not exist "_CID
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_output)	// 1404 is the 'record not found' failure code

	set TYPE = acn.type
	
	type ResultSet rs = Db.select("ZCOL.PACN","ZCOL,ZCTRCTCOL,ZCTRCTACN,ZCONTRACT","ZCOL.COLTYP=7 AND ZCOL.COLL=ZCTRCTCOL.COLL AND ZCTRCTCOL.CCSTAT='P' AND ZCTRCTCOL.CTRCT=ZCTRCTACN.CTRCT AND ZCTRCTACN.CID=:CID AND ZCTRCTACN.CTRCT=ZCONTRACT.CTRCT AND ZCONTRACT.CTRSTAT=0")
	if 'rs.isEmpty() do {
		
		while rs.next() do { quit:ER!(CNT>20)
			
			type Number ACN = rs.getCol("ZCOL.PACN")
			if ACN.isNull() set ER = 1, RM = "CIF Number is null for guarantor" quit
			
			type RecordCIF cif = Db.getRecord("CIF","ACN=:ACN",1)	
			if 'cif.getMode() set ER = 1, RM = "Customer record not found: "_ACN quit

			if CNT=0 set output = TYPE
			else  set output = output_"|"_TYPE
			set output = output_"|"_ACN
			set output = output_"|"_cif.ztitle_" "_cif.nam
			set CNT = CNT + 1
		}
	}
	
	// Else it's not a guarantor, so get CIF numbers from RELCIF
	
	else  do {
		
		type resultSet rs1 = Db.select("ACN","RELACN","CID=:CID")
		while rs1.next() do { quit:ER!(CNT>20)
			
			type Number ACN
			set ACN = rs1.getCol("ACN")
			if ACN.isNull() set ER = 1, RM = "CIF Number is null for guarantor" quit

			type RecordCIF cif = Db.getRecord("CIF","ACN=:ACN",1)	
			if 'cif.getMode() set ER = 1, RM = "Customer record not found: "_ACN quit
	
			if CNT=0 set output = TYPE
			else  set output = output_"|"_TYPE
			set output = output_"|"_ACN
			set output = output_"|"_cif.ztitle_" "_cif.nam
			set CNT = CNT + 1
		}

	}
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_output)
	
	set header.piece("|",7) = CNT
	quit (header_"|"_$$GETTIME()_"|0||0||"_output)	
	
		
public GETTIME()
	type String datetime
	
	set datetime = $H.piece(",",1).toDate().toString("YEAR-MM-DD")
	set datetime = datetime_"T"
	set datetime = datetime_$H.piece(",",2).toTime().toString("24:60:SS")
	quit datetime

public REMHYP(String ZINPUT)
	type String ZOUTPUT
	type String ZHNUM,ZMOO,ZMOOBAN,ZSOI,ZTANON
	type Number ZLEN,ZINDEX
	set ZHNUM = $C(224)_$C(197)_$C(162)_$C(183)_$C(213)_$C(232)_"-"
	set ZMOO = $C(193)_".-"
	set ZMOOBAN = $C(203)_$C(193)_$C(217)_$C(232)_$C(186)_$C(233)_$C(210)_$C(185)_"-"
	set ZSOI = $C(171)_".-"
	set ZTANON = $C(182)_".-"
	
	set ZOUTPUT=ZINPUT.replace(ZHNUM,"")
	set ZOUTPUT=ZOUTPUT.replace(ZMOO,"")
	set ZOUTPUT=ZOUTPUT.replace(ZMOOBAN,"")
	set ZOUTPUT=ZOUTPUT.replace(ZSOI,"")
	set ZOUTPUT=ZOUTPUT.replace(ZTANON,"")
	
	quit ZOUTPUT