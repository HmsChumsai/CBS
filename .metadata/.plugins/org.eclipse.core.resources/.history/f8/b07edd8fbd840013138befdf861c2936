//DO NOT MODIFY  To inquiry limit of sight deposit accoun|ZINQBSS|||||||1
ZINQBSS
	/*
	 ORIG: 1 - 15/11/2013
	 DESC: 

	 ---- Comments --------------------------------------------------------

	 ---- Revision History ------------------------------------------------
	 23 Jan 2014 Ravipong Chumsaiset 
	  Consider using setAuditFlag for all objects in this procedure
	   example :do dep.setAuditFlag(1)

	*/

MAIN(FLG,IM,OM,ERRCD,ERRDESC)

	type String ZIM,ZOM,ZERRDESC,ZARRIN,ZARROUT,RM
	type Number ZERRCD,ZFLG,ER,IsAsterisk,ZSEQ,ZINDX,ZNUMREC
	set ER=0
	set ZSEQ=0
	set (ZIM,ZOM,ZERRDESC,RM)=""
	set (ZERRCD,ZFLG)=""
	set ZIM=IM
	set ZFLG=FLG
	set IsAsterisk=0

	do {

		catch ZINQBTS {
			set ER = 1
			set RM = ZINQBTS.description
			set ZERRCD="E9999"
			//set ZERRDESC="UNABLE TO PROCESS - OTHER ERROR"
			set ZARROUT("StatusCode")="10"
			set ZARROUT("ErrorAppId")=ZARRIN("RqAppId")
			set ZARROUT("ErrorAppAbbrv")="PCB"
			set ZARROUT("ErrorCode")=ZERRCD
			type ResultSet zerdesc = Db.select("ERRDESC","ZUTBLITFERCD","ERRCD=:ZERRCD")
			while zerdesc.next() do {
				set ZARROUT("ErrorDesc")=zerdesc.getCol(1)
			}
			//set ZARROUT("ErrorDesc")=ZARRIN("ErrorDesc").get()
			set ZARROUT("ErrorSeverity")="02"
			do FAPOUT(ZFLG,.ZOM,.ZERRCD,.ZERRDESC)

		}

		do FAPIN(ZFLG,.ZIM,.ZOM,.ZERRCD,.ZERRDESC)
		do PROC
		do FAPOUT(ZFLG,.ZOM,.ZERRCD,.ZERRDESC)
		//write !,"ZOM "_ZOM
	}

	set OM=ZOM
	set ERRCD=ZERRCD
	set ERRDESC=ZERRDESC


	quit ""

FAPIN(ZFLG,ZIM,ZOM,ZERRCD,ZERRDESC)

	if ZFLG=1 do DELIMIN(ZFLG,.ZIM,.ZOM,.ZERRCD,.ZERRDESC)
	if ZFLG=2 do FIXIN(ZFLG,.ZIM,.ZOM,.ZERRCD,.ZERRDESC)

	quit

FAPOUT(ZFLG,ZOM,ZERRCD,ZERRDESC)

	if ZFLG=1 do DELIMOUT(.ZOM,.ZERRCD,.ZERRDESC)
	if ZFLG=2 do FIXOUT(.ZOM,.ZERRCD,.ZERRDESC)

	quit

DELIMOUT(ZOM,ZERRCD,ZERRDESC)


	//Error Segment
	type String ZERSEG,ZSEGOM
	set ZSEGOM=""
	set ZERSEG="["_ZARROUT("ErrorAppId").get()_";;"_ZARROUT("ErrorAppAbbrv").get()_";;"_ZARROUT("ErrorCode").get()
	set ZERSEG=ZERSEG_";;"_ZARROUT("ErrorDesc").get()_";;"_ZARROUT("ErrorSeverity").get()_"]"

	if '(ZERRCD.get()).isNull() do {
		set ZOM.piece(":;",1)=ZARROUT("FuncNm").get()
		set ZOM.piece(":;",2)=ZARROUT("RqUID").get()
		set ZOM.piece(":;",3)=ZARROUT("RsAppId").get()
		set ZOM.piece(":;",4)=ZARROUT("RsUID").get()
		set ZOM.piece(":;",5)=ZARROUT("RsDt").get()
		set ZOM.piece(":;",6)=ZARROUT("StatusCode").get()
		set ZOM.piece(":;",7)=ZERSEG
		set ZOM=ZOM_":;"_ZARROUT("CorrID").get()
		set ZOM=ZOM_":;"_ZARROUT("ReqAuthUserId").get()
		set ZOM=ZOM_":;"_ZARROUT("ReqAuthLevel").get()
		//set ZOM.piece(":;",8)=ZARROUT("CorrID").get()
		set ZOM=ZOM_":;"


	}
	else do {
		set ZEND=ZNUMREC+ZINDX.get()
		for i=ZINDX.get()+1:1:ZEND do {
			//if i=1 set ZSEGOM=ZARROUT("IndexingSeq",i).get()
			set ZSEGOM=ZSEGOM_ZARROUT("IndexingSeq",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubTermNum",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubBlockInd",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubAcctStatus",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubAcctStatusDesc",i).get()
			//set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubApparentPassbk",i).get()
			set ZSEGOM=ZSEGOM_";;"_(ZARROUT("SubApparentPassbk",i).get()).zero(18,2,0,0)
			//set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubAmt",i).get()
			set ZSEGOM=ZSEGOM_";;"_(ZARROUT("SubAmt",i).get()).zero(18,2,0,0)
			//set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubAcctBal",i).get()
			set ZSEGOM=ZSEGOM_";;"_(ZARROUT("SubAcctBal",i).get()).zero(18,2,0,0)
			//set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubRetentionAmt",i).get()
			set ZSEGOM=ZSEGOM_";;"_(ZARROUT("SubRetentionAmt",i).get()).zero(18,2,0,0)
			//set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubHoldAmt",i).get()
			set ZSEGOM=ZSEGOM_";;"_(ZARROUT("SubHoldAmt",i).get()).zero(18,2,0,0)
			//set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubClearingAmt",i).get()
			set ZSEGOM=ZSEGOM_";;"_(ZARROUT("SubClearingAmt",i).get()).zero(18,2,0,0)
			//set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubAvailBal",i).get()
			set ZSEGOM=ZSEGOM_";;"_(ZARROUT("SubAvailBal",i).get()).zero(18,2,0,0)
			//set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubIntRate",i).get()
			set ZSEGOM=ZSEGOM_";;"_(ZARROUT("SubIntRate",i).get()).zero(11,8,0,0)
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubOpenDt",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("DueDt",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubCanOrdDt",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubNextSettlementDt",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubLastSettlementDt",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubDeductibleType",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubDeductibleAmt",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubSettlementFreq",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("Duration",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("DurationUnit",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubAccrueIntAmt",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubSimulatedIntAmt",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("SubEIR",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("PassbkNum",i).get()
			set ZSEGOM=ZSEGOM_";;"_ZARROUT("EffDt",i).get()
			set ZSEGOM=ZSEGOM_";;"
			//set (ZFILLER20,ZFILLER=""
			//set ZSEGOM=ZSEGOM_";;;;"

			if i<ZSEQ set ZSEGOM=ZSEGOM_"#;"
			//else set ZSEGOM=
		}
		set ZOM.piece(":;",1)=ZARROUT("FuncNm").get()
		set ZOM.piece(":;",2)=ZARROUT("RqUID").get()
		set ZOM.piece(":;",3)=ZARROUT("RsAppId").get()
		set ZOM.piece(":;",4)=ZARROUT("RsUID").get()
		set ZOM.piece(":;",5)=ZARROUT("RsDt").get()
		set ZOM.piece(":;",6)=ZARROUT("StatusCode").get()
		set ZOM.piece(":;",7)="[]"
		set ZOM=ZOM_":;"_ZARROUT("CorrID").get()
		set ZOM=ZOM_":;"_ZARROUT("ReqAuthUserId").get()
		set ZOM=ZOM_":;"_ZARROUT("ReqAuthLevel").get()
		//set ZOM.piece(":;",8)=ZARROUT("CorrID").get()
		set ZOM=ZOM_":;"
		set ZOM.piece(":;",12)=ZARROUT("AcctId").get()
		set ZOM.piece(":;",13)=ZARROUT("TotalNumOfTerm").get()
		set ZOM.piece(":;",14)=ZARROUT("NumRec").get()
		set ZOM.piece(":;",15)=ZARROUT("MoreDataInd").get()
		set ZOM.piece(":;",16)="["_ZSEGOM_"]"
		set ZOM.piece(":;",17)=""

	}

	quit

DELIMIN(ZFLG,ZIM,ZOM,ZERRCD,ZERRDESC)

	//type String ZFUNCNM,ZRQUID,ZRQDT,ZRQAPPID,ZUSERID,ZTERMID,ZULANG,ZCORRID,ZAUTHUID,ZAUTHLV,ZCID
	set ZARRIN("FuncNm")=ZIM.piece(":;",1)
	set ZARRIN("RqUID")=ZIM.piece(":;",2)
	set ZARRIN("RqDt")=ZIM.piece(":;",3)
	set ZARRIN("RqAppId")=ZIM.piece(":;",4)
	set ZARRIN("UserId")=ZIM.piece(":;",5)
	set ZARRIN("TerminalId")=ZIM.piece(":;",6)
	set ZARRIN("UserLangPref")=ZIM.piece(":;",7)
	set ZARRIN("CorrID")=ZIM.piece(":;",8)
	set ZARRIN("AuthUserId")=ZIM.piece(":;",9)
	set ZARRIN("AuthLevel")=ZIM.piece(":;",10)
	set ZARRIN("Filler")=ZIM.piece(":;",11)
	set ZARRIN("AcctId")=ZIM.piece(":;",12)
	set ZARRIN("SubTermNum")=ZIM.piece(":;",13)
	set ZARRIN("MaxRows")=ZIM.piece(":;",14)
	set ZARRIN("StartInd")=ZIM.piece(":;",15)
	set ZARRIN("StatusSearchCriteria")=ZIM.piece(":;",16)



	quit

PROC
	//***Init***
	// Time Stamp
	// Ex. ZDATE=$$DTSTAMP()
	// ZDATE >> 2013-12-02T17:37:57.45+07:00

	do SYSVAR^SCADRV0()
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")


	type String ZSTAMP,ZTIM,ZDAT,ZLangPref
	set ZLangPref=""
	set (ZSTAMP,ZTIM,ZDAT)=""

	type Number MICSEC,isTh,ZMAXOCC,ZSKIP,ZACTIVE
	set ZACTIVE=0
	set ZSKIP=0
	set ZMAXOCC=0
	set isTh=1
	set MICSEC=""

	set MICSEC=$$GETTIM^%ZFUNC()
	set MICSEC=MICSEC.extract(MICSEC.length()-6,MICSEC.length()-5)

	set ZDAT=$$DAT^%ZM(%CurrentDate,"YEAR-MM-DD")
	set ZTIM=$$TIM^%ZM(%CurrentTime,"24:60:SS")
	set ZSTAMP=ZDAT_"T"_ZTIM_"."_MICSEC_"+07:00"
	//

	//Header
	set ZARROUT("FuncNm")=ZARRIN("FuncNm").get()
	set ZARROUT("RqUID")=ZARRIN("RqUID").get()
	set ZARROUT("RsAppId")=cuvar.zappid
	
	//p'new
	set ZARROUT("RsUID")=ZARRIN("RqUID").get()

	set ZARROUT("RsDt")=ZDAT_"T"_ZTIM_"."_MICSEC_"+07:00"

	set ZARROUT("CorrID")=ZARRIN("CorrID").get()
	//
	//Validate Common Header
	//if ZARRIN("FuncNm ").get().isNull() set ZERRCD="E9999",ZERRDESC="FuncNm field is Null"
	if (ZARRIN("FuncNm").get()'="retrieveComTermSubAcctBal")!(ZARRIN("FuncNm").get().isNull()) set ZERRCD="E9999",ZERRDESC="Invalid FuncNm"
	if $G(ZARRIN("RqUID")).isNull() set ZERRCD="E0014"
	if $G(ZARRIN("RqDt")).isNull() set ZERRCD="E0016"
	if ($G(ZARRIN("RqAppId")).isNull()) set ZERRCD="E0038"
	if $G(ZARRIN("UserId")).isNull() set ZERRCD="E0017"
	if ($G(ZARRIN("AcctId")).length()'=10) set ZERRCD="E0002"



	set ZLangPref=$G(ZARRIN("UserLangPref")).upperCase()
	if ZLangPref'="TH" do {
		if ZLangPref="EN" set isTh=0
		else if ZLangPref="" quit
		else set ZERRCD="E0011"
	}


	if '($G(ZARRIN("StatusSearchCriteria"))).isNull() do {
		if '($G(ZARRIN("SubTermNum"))).isNull() set ZERRCD="E0052"
		else do {
			set ZCRITERIA=$G(ZARRIN("StatusSearchCriteria"))
			if ZCRITERIA="A" set ZACTIVE=0
			else if ZCRITERIA="C" set ZACTIVE=4
			else set ZERRCD="E0053"

		}
	}

	if '(ZERRCD.get()).isNull() set ZSKIP=1

	if ($G(ZARRIN("StartInd")).isNull()) set ZINDX=0
	else set ZINDX=+ZARRIN("StartInd").get()




	//set ZLangPref=ZLangPref.upperCase()
	type ResultSet srv = Db.select("MAXOCC","ZUTBLEXTSRV","FCD='RETRIEVECOMTERMSUBACCTBAL'")
	while srv.next() do {
		set ZMAXOCC=srv.getCol(1)
	}
	if ZMAXOCC'<ZARRIN("MaxRows").get() set ZMAXOCC=ZARRIN("MaxRows").get()
	else set ZERRCD="E0012"

	if $G(ZARRIN("AcctId")).isNull() set ZERRCD="E0002",ZSKIP=1
	set AcctId = +ZARRIN("AcctId").get()
	set ZARROUT("AcctId")=ZARRIN("AcctId").get()
	set ZARROUT("MoreDataInd")="N"



	if 'ZSKIP do {
		if 'Db.isDefined("DEP","CID=:AcctId") do {
			set ZERRCD="E0002"
			//error
		}
		else do {

			type String ZSpecType
			type String ZTYPE
			set ZINTRFACE="ZSPA"
			set ZTYPE=""
			//type ResultSet zsub=Db.select("CID,ZSEQ","DEP","CID=:AcctId")
			//Check if account is Special fixed
			type ResultSet ZKTBMISC = Db.select("PRODTYP","ZUTBLKTBMISC","INTRFACE=:ZINTRFACE")
			while ZKTBMISC.next() do {
				set ZSpecType=ZKTBMISC.getCol(1)
			}
			type ResultSet zcheck = Db.select("CID,TYPE","DEP","CID=:AcctId")
			while zcheck.next() do {
				do CHECKPOINT
				set ZTYPE=zcheck.getCol(2)
				write "ZSpecType="_ZSpecType_", ZTYPE="_ZTYPE
				if ZSpecType[ZTYPE set ZERRCD="E0062" quit

			}
			if '(ZERRCD.get()).isNull() quit
			type Number ZSUB
			set ZSUB=""
			set ZSEQ=0
			set ZNUMREC=0
			if $G(ZARRIN("SubTermNum")).isNull() do {


				type ResultSet zsub=Db.select("CID,ZSEQ,GRP,STAT","DEP","ZMASTER=:AcctId")
				if zsub.isEmpty() set ZERRCD="E0051"
				while zsub.next() do {
					type String ZGRP
					type Number ZSTAT

					set ZSUB=zsub.getCol(1)
					set ZSUBSEQ=zsub.getCol(2)
					set ZGRP=zsub.getCol(3)
					set ZSTAT=zsub.getCol(4)
					if ZACTIVE'=ZSTAT,$G(ZCRITERIA)'="" quit
					if ZGRP'="CD" set ZERRCD="E0030" quit
					if ZSUBSEQ=0 quit
					if ZSUB=AcctId quit
					set ZSEQ=ZSEQ+1
					if ZSUBSEQ'>ZINDX quit
					if (ZSEQ>ZINDX),(ZMAXOCC'<(ZSEQ-ZINDX)) do {
						do SEGMENT(ZSUB,ZSEQ)
						set ZNUMREC=ZNUMREC+1
					}
					if ZMAXOCC<ZSEQ-ZINDX set ZARROUT("MoreDataInd")="Y"
				}


			}
			else do {

				set ZSUBSEQ=+$G(ZARRIN("SubTermNum"))
				//if 'Db.isDefined("DEP","CID=:AcctId") set ZERRCD="E0002" quit
				type ResultSet zsub=Db.select("CID,GRP","DEP","ZMASTER=:AcctId AND ZSEQ=:ZSUBSEQ")
				if zsub.isEmpty() set ZERRCD="E0051"
				while zsub.next() do {
					set ZSUB=zsub.getCol(1)
					set ZGRP=zsub.getCol(2)
					if ZGRP'="CD" set ZERRCD="E0030" quit
					if ZSUB=AcctId quit
					set ZSEQ=1	//Only 1 record will appear
					set ZNUMREC=ZNUMREC+1
					write !,"sub Acc = "_ZSUB
					do SEGMENT(ZSUB,1)
				}
			}
			//if '(ZERRCD.get()).isNull()
			write !,"ZSEQ="_ZSEQ
			do CHECKPOINT
			set ZARROUT("TotalNumOfTerm")=$$PADDING(ZSEQ.get(),2,3)
			set ZARROUT("NumRec")=$$PADDING(ZNUMREC.get(),2,2)
		}
		//if '(ZERRCD.get()).isNull() quit
		if $G(ZARRIN("StartInd"))'=0 set ZARROUT("TotalNumOfTerm")=0

		set ZARROUT("TotalNumOfTerm")=$$PADDING(ZARROUT("TotalNumOfTerm").get(),2,3)
		//Dummy'd Mandatory field
		set ZARROUT("SubIntRate")=$$PADDING(ZARROUT("SubIntRate").get(),2,11)
		set ZARROUT("Duration")=$$PADDING(ZARROUT("Duration").get(),2,3)
		set ZARROUT("SubEIR")=$$PADDING(ZARROUT("SubEIR").get(),2,11)


	}

	if (ZERRCD.get()).isNull() do {
		set ZARROUT("StatusCode")="00"


	}
	else do {
		set ZARROUT("StatusCode")="10"
		//set ZARROUT("ErrorAppId")="668"
		set ZARROUT("ErrorAppId")=cuvar.zappid

		set ZARROUT("ErrorAppAbbrv")="PCB"
		set ZARROUT("ErrorCode")=ZERRCD
		type ResultSet zerdesc = Db.select("ERRDESC","ZUTBLITFERCD","ERRCD=:ZERRCD")
		while zerdesc.next() do {
			set ZARROUT("ErrorDesc")=zerdesc.getCol(1)
		}
		//set ZARROUT("ErrorDesc")=ZARRIN("ErrorDesc").get()
		set ZARROUT("ErrorSeverity")="02"
	}

	quit


FIXIN(ZFLG,ZIM,ZOM,ZERRCD,ZERRDESC)


	set ZARRIN("FuncNm")=ZIM.extract(1,30).trim()
	set ZARRIN("RqUID")=ZIM.extract(31,77).trim()
	set ZARRIN("RqDt")=ZIM.extract(78,110).trim()
	set ZARRIN("RqAppId")=ZIM.extract(111,115).trim()
	set ZARRIN("UserId")=ZIM.extract(116,147).trim()
	set ZARRIN("TerminalId")=ZIM.extract(148,155).trim()
	set ZARRIN("UserLangPref")=ZIM.extract(156,157).trim()
	set ZARRIN("CorrID")=ZIM.extract(158,189).trim()
	set ZARRIN("AuthUserId")=ZIM.extract(190,204).trim()
	set ZARRIN("AuthLevel")=ZIM.extract(205,207).trim()
	set ZARRIN("Filler")=ZIM.extract(208,239).trim()
	set ZARRIN("AcctId")=ZIM.extract(240,249).trim()



	quit

FIXOUT(ZOM,ZERRCD,ZERRDESC)

	if '(ZERRCD.get()).isNull() do {
		type String ZERRSEG
		set ZERRSEG=""
		set ZERRSEG=ZERRSEG_$$PADDING(ZARROUT("ErrorAppId").get(),1,5)
		set ZERRSEG=ZERRSEG_$$PADDING(ZARROUT("ErrorAppAbbrv").get(),1,5)
		set ZERRSEG=ZERRSEG_$$PADDING(ZARROUT("ErrorCode").get(),1,30)
		set ZERRSEG=ZERRSEG_$$PADDING(ZARROUT("ErrorDesc").get(),1,256)
		set ZERRSEG=ZERRSEG_$$PADDING(ZARROUT("ErrorSeverity").get(),1,2)
		set ZERRSEG=ZERRSEG_$J("",2682)
	}
	else do {
		type String ZERRSEG
		set ZERRSEG=$J("",2980)
		set ZOM=ZOM_$$PADDING(ZARROUT("FuncNm").get(),1,30)
		set ZOM=ZOM_$$PADDING(ZARROUT("RqUID").get(),1,47)
		set ZOM=ZOM_$$PADDING(ZARROUT("RsAppId").get(),1,5)
		set ZOM=ZOM_$$PADDING(ZARROUT("RsUID").get(),1,47)
		set ZOM=ZOM_$$PADDING(ZARROUT("RsDt").get(),1,33)
		set ZOM=ZOM_$$PADDING(ZARROUT("StatusCode").get(),1,2)
		set ZOM=ZOM_$$PADDING(ZERRSEG.get(),1,298)

		set ZOM=ZOM_$$PADDING(ZARROUT("ErrorAppId").get(),1,5)
		set ZOM=ZOM_$$PADDING(ZARROUT("ErrorAppAbbrv").get(),1,5)
		set ZOM=ZOM_$$PADDING(ZARROUT("ErrorCode").get(),1,30)
		set ZOM=ZOM_$$PADDING(ZARROUT("ErrorDesc").get(),1,256)
		set ZOM=ZOM_$$PADDING(ZARROUT("ErrorSeverity").get(),1,2)
		set ZOM=ZOM_$$PADDING(ZARROUT("CorrID").get(),1,32)
		set ZOM=ZOM_$$PADDING(ZARROUT("Filler").get(),1,50)
		//Translate to MainFrame

		set ZARROUT("AvailLimitAmt")=$$PADDING(ZARROUT("AvailLimitAmt").get(),3,"")
		set ZARROUT("AvailENCLimitAmt")=$$PADDING(ZARROUT("AvailENCLimitAmt").get(),3,"")
		set ZARROUT("AvailODLimitAmt")=$$PADDING(ZARROUT("AvailODLimitAmt").get(),3,"")
		set ZARROUT("IntradayLimitUsed")=$$PADDING(ZARROUT("IntradayLimitUsed").get(),3,"")
		set ZARROUT("ENCLimitUsed")=$$PADDING(ZARROUT("ENCLimitUsed").get(),3,"")
		set ZARROUT("LimitUsed")=$$PADDING(ZARROUT("LimitUsed").get(),3,"")
		set ZARROUT("ODLimitUsed")=$$PADDING(ZARROUT("ODLimitUsed").get(),3,"")
		set ZARROUT("AccrueIntAmt")=$$PADDING(ZARROUT("AccrueIntAmt").get(),3,"")
		set ZARROUT("ENCLimitAmt")=$$PADDING(ZARROUT("ENCLimitAmt").get(),3,"")
		set ZARROUT("ODLimitAmt")=$$PADDING(ZARROUT("ODLimitAmt").get(),3,"")
		set ZARROUT("LimitAmt")=$$PADDING(ZARROUT("LimitAmt").get(),3,"")
		set ZARROUT("ClearingAmt")=$$PADDING(ZARROUT("ClearingAmt").get(),3,"")
		set ZARROUT("RetentionAmt")=$$PADDING(ZARROUT("RetentionAmt").get(),3,"")

		if 'IsAsterisk do {
			set ZARROUT("RefAcctBal")=$$PADDING(ZARROUT("RefAcctBal").get(),3,"")
			set ZARROUT("AvailBal")=$$PADDING(ZARROUT("AvailBal").get(),3,"")
			set ZARROUT("AcctBal")=$$PADDING(ZARROUT("AcctBal").get(),3,"")

		}

		set ZOM=ZOM_$$PADDING(ZARROUT("AcctId").get(),2,10)
		set ZOM=ZOM_$$PADDING(ZARROUT("AcctNameTh").get(),1,180)
		set ZOM=ZOM_$$PADDING(ZARROUT("AcctNameEn").get(),1,180)
		set ZOM=ZOM_$$PADDING(ZARROUT("AcctStatus").get(),1,1)
		set ZOM=ZOM_$$PADDING(ZARROUT("AcctStatusDesc").get(),1,15)
		set ZOM=ZOM_$$PADDING(ZARROUT("Curcode").get(),1,3)
		set ZOM=ZOM_$$PADDING(ZARROUT("DomBranchId").get(),1,4)
		set ZOM=ZOM_$$PADDING(ZARROUT("BranchName").get(),1,50)
		set ZOM=ZOM_$$PADDING(ZARROUT("KBankProductCode").get(),1,9)
		set ZOM=ZOM_$$PADDING(ZARROUT("KBankProductCodeDesc").get(),1,255)
		set ZOM=ZOM_$$PADDING(ZARROUT("TCBTrfName").get(),1,60)
		set ZOM=ZOM_ZARROUT("RetentionAmt").get()
		set ZOM=ZOM_ZARROUT("ClearingAmt").get()
		set ZOM=ZOM_ZARROUT("HoldAmt").get()
		set ZOM=ZOM_$$PADDING(ZARROUT("AllowFlag").get(),1,1)
		set ZOM=ZOM_$$PADDING(ZARROUT("BlockInd").get(),1,1)
		set ZOM=ZOM_ZARROUT("LimitAmt").get()
		set ZOM=ZOM_ZARROUT("ODLimitAmt").get()
		set ZOM=ZOM_ZARROUT("ENCLimitAmt").get()
		set ZOM=ZOM_ZARROUT("IntradayLimitAmt").get()
		set ZOM=ZOM_ZARROUT("AppntBalPassbk").get()
		set ZOM=ZOM_$$PADDING(ZARROUT("AcctBal").get(),1,18)
		set ZOM=ZOM_$$PADDING(ZARROUT("AvailBal").get(),1,18)
		set ZOM=ZOM_$$PADDING(ZARROUT("RefAcctId").get(),2,10)
		set ZOM=ZOM_$$PADDING(ZARROUT("RefAcctBal").get(),1,18)
		set ZOM=ZOM_$$PADDING(ZARROUT("LastFncDt").get(),1,10)
		set ZOM=ZOM_$$PADDING(ZARROUT("ClosedDt").get(),1,10)
		set ZOM=ZOM_ZARROUT("AccrueIntAmt").get()
		set ZOM=ZOM_$$PADDING(ZARROUT("RefBranchId").get(),1,4)
		set ZOM=ZOM_$$PADDING(ZARROUT("RefBranchName").get(),1,50)
		set ZOM=ZOM_$$PADDING(ZARROUT("RefProductId").get(),1,9)
		set ZOM=ZOM_$$PADDING(ZARROUT("RefProductName").get(),1,255)
		set ZOM=ZOM_ZARROUT("LimitUsed").get()
		set ZOM=ZOM_ZARROUT("ODLimitUsed").get()
		set ZOM=ZOM_ZARROUT("ENCLimitUsed").get()
		set ZOM=ZOM_ZARROUT("IntradayLimitUsed").get()
		set ZOM=ZOM_ZARROUT("AvailLimitAmt").get()
		set ZOM=ZOM_ZARROUT("AvailODLimitAmt").get()
		set ZOM=ZOM_ZARROUT("AvailENCLimitAmt").get()
		set ZOM=ZOM_ZARROUT("AvailIntradayLimitAmt").get()

		quit

PADDING(array,flg,fixL)

	type String out
	type Number zlength
	set out=""

	//Blank padding
	if flg=1 do {
		type String in
		set in=array.get()
		set zlength=in.length()
		set out=in_$J("",fixL-zlength)
		//set out=in_$J("""",fixL-zlength)

	}
	//Zero padding
	if flg=2 do {
		type Number in
		set in=array.get()
		set zlength=in.length()
		set out=in.zero(fixL)
	}
	//MainFrame
	if flg=3 do {
		type Number in,ZER
		type String ZRM
		set ZER=0
		set ZRM=""
		set in=array.get()*100
		do CONVENC^ZITFUTL(1,in,.out,.ZER,.ZRM)
	}
	quit out

CHECKPOINT

	quit

SEGMENT(CID,ZSEQ)

	type String output
	type Number ZSUBTERMNUM
	set ZSUBTERMNUM=""
	type RecordDEP DEP=Db.getRecord("DEP","CID=:CID")
	set ZSUBTERMNUM=DEP.ZSEQ
	//set ZSUBTERMNUM=$$PADDING(ZSUBTERMNUM,2,3)
	set ZARROUT("IndexingSeq",ZSEQ)=$$PADDING(ZSUBTERMNUM,2,4)

	set ZARROUT("SubTermNum",ZSEQ)=$$PADDING(ZSUBTERMNUM,2,3)
	
	//set ZARROUT("SubBlockInd",ZSEQ)=""
	set ZARROUT("SubBlockInd",ZSEQ)="N"
	type ResultSet zrflg = Db.select("RFLG","RFLG","CID=:CID")
	while zrflg.next() do {
		set ZRFLG=zrflg.getCol("RFLG")
		if (ZRFLG.extract(1,2)="28")!(ZRFLG.extract(1,2)="29")!(ZRFLG.extract(1,2)="30")!(ZRFLG.extract(1,2)="33")!(ZRFLG.extract(1,2)="37")!(ZRFLG.extract(1,2)="38")!(ZRFLG.extract(1,2)="39")!(ZRFLG.extract(1,2)="40") set ZARROUT("SubBlockInd",ZSEQ)="Y"
	}
	
	if DEP.STAT=0 do {
		set ZARROUT("SubAcctStatus",ZSEQ)="A"
		set ZARROUT("SubAcctStatusDesc",ZSEQ)="ACTIVE"
		set ZARROUT("SubRetentionAmt",ZSEQ)=DEP.ZHLDAMT+DEP.ZCHKHLD
		set ZARROUT("SubHoldAmt",ZSEQ)=DEP.ZHLDAMT
		set ZARROUT("SubClearingAmt",ZSEQ)=DEP.ZCHKHLD
	}
	if DEP.STAT=4 do {
		set ZARROUT("SubAcctStatus",ZSEQ)="C"
		set ZARROUT("SubAcctStatusDesc",ZSEQ)="CANCELLED"
	}
	
	type RecordDEP DEPMAS=Db.getRecord("DEP","CID=:DEP.ZMASTER",1)
	
	//set ZARROUT("SubApparentPassbk",ZSEQ)=DEP.ORG
	set ZARROUT("SubApparentPassbk",ZSEQ)=DEPMAS.PBKBAL
	
	//set ZARROUT("SubAmt",ZSEQ)=DEP.ORG
	if DEP.DLR="" set ZARROUT("SubAmt",ZSEQ)=DEP.ORG
	else  set ZARROUT("SubAmt",ZSEQ)=DEP.ZORGFDLR
	
	set ZARROUT("SubAcctBal",ZSEQ)=DEP.BAL
	set ZARROUT("SubAvailBal",ZSEQ)=DEP.BALAVL
	set ZARROUT("SubIntRate",ZSEQ)=DEP.IRN
	set ZARROUT("SubOpenDt",ZSEQ)=DEP.ODT.toString("YEAR-MM-DD")
	set ZARROUT("DueDt",ZSEQ)=DEP.MDT.toString("YEAR-MM-DD")
	set ZARROUT("SubCanOrdDt",ZSEQ)=DEP.DTC.toString("YEAR-MM-DD")
	set ZSUBNXTDT=DEP.INP.toString("YEAR-MM-DD")
	set ZSUBLSTDT=DEP.IPLD.toString("YEAR-MM-DD")
	if ZSUBNXTDT'="" set ZARROUT("SubNextSettlementDt",ZSEQ)=ZSUBNXTDT
	else set ZARROUT("SubNextSettlementDt",ZSEQ)=DEP.MDT.toString("YEAR-MM-DD")
	if ZSUBLSTDT '="" set ZARROUT("SubLastSettlementDt",ZSEQ)=ZSUBLSTDT
	else set ZARROUT("SubLastSettlementDt",ZSEQ)=DEP.DLR.toString("YEAR-MM-DD")
	
	/*
	type ResultSet ZWREXAMT = Db.select("WHRATE","ZUTBLWREXAMT","WHCALMTH=:DEP.INTWCALC")
	while ZWREXAMT.next() do {
		set ZARROUT("SubDeductibleType",ZSEQ)=ZWREXAMT.getCol(1)
	}
	*/
	set ZARROUT("SubDeductibleType",ZSEQ)=""
	//set ZARROUT("PassbkNum",ZSEQ)=DEP.PBKSN
	set ZARROUT("PassbkNum",ZSEQ)=DEPMAS.PBKSN
	
	set ZARROUT("SubDeductibleAmt",ZSEQ)= ""
	set ZTRM=DEP.TRM
	set ZARROUT("SubSimulatedIntAmt",ZSEQ)=""
	set ZARROUT("SubSettlementFreq",ZSEQ)=+ZTRM
	set ZARROUT("Duration",ZSEQ)=+DEP.TRM

	if ZTRM["D" set ZARROUT("DurationUnit",ZSEQ)="Day"
	if ZTRM["M" set ZARROUT("DurationUnit",ZSEQ)="Month"
	if ZTRM["Y" set ZARROUT("DurationUnit",ZSEQ)="Year"
	set ZARROUT("SubEIR",ZSEQ)= DEP.IRN
	//Padding
	set ZARROUT("IndexingSeq",ZSEQ)=$$PADDING(ZARROUT("IndexingSeq",ZSEQ).get(),2,4)
	set ZARROUT("SubTermNum",ZSEQ)=$$PADDING(ZARROUT("SubTermNum",ZSEQ).get(),2,3)
	set ZARROUT("SubAmt",ZSEQ)=$$PADDING(ZARROUT("SubAmt",ZSEQ).get(),2,18)
	set ZARROUT("SubAcctBal",ZSEQ)=$$PADDING(ZARROUT("SubAcctBal",ZSEQ).get(),2,18)
	set ZARROUT("SubAvailBal",ZSEQ)=$$PADDING(ZARROUT("SubAvailBal",ZSEQ).get(),2,18)
	set ZARROUT("SubIntRate",ZSEQ)=$$PADDING(ZARROUT("SubIntRate",ZSEQ).get(),2,11)
	set ZARROUT("Duration**",ZSEQ)=$$PADDING(ZARROUT("Duration**",ZSEQ).get(),2,3)
	set ZARROUT("SubEIR",ZSEQ)=$$PADDING(ZARROUT("SubEIR",ZSEQ).get(),2,11)

	quit