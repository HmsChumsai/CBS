//DO NOT MODIFY  TEST|ZMKORN|||||||1

TEST 
	use 0 write !,"Hello world .....EDITED 3",!
	quit
	
RET(Number I)
	//W $$RET^ZMKORN(10)
 	use 0 write !,"I= "_I,!
 	type Number RET
  	set RET = I+10
 	quit RET

TESTTWO
	use 0
	type ResultSet rs=Db.select("CID,BAL,IRN","DEP")
	while rs.next() do {
      	set CID = rs.getCol(1)
        set BAL = rs.getCol(2)
        set IRN = rs.getCol(3)
        set INTRATE = rs.getCol(2) * rs.getCol(3)
        if INTRATE '=0 {
        write CID," - ",INTRATE,!
        }
        }
	quit
	
TESTTHREE
	use 0
	type ResultSet rs=Db.select("CID,BAL,IRN","DEP")
	while rs.next() do {
      	set CID = rs.getCol(1)
        set BAL = rs.getCol(2)
        set IRN = rs.getCol(3)
        set INTRATE = rs.getCol(2) * rs.getCol(3)
        if INTRATE'=0 {
        write "CID = ",CID," Bal = ",BAL," - ",INTRATE,"CID LENGHT =",$L(CID),!
        }
        }
        else write " "
	quit
	
TESTFOUR
	use 0
	set s=""
	while s="" do {
	read "Sort By 1.CID 2.Bal 3.CID Lenght ?",S,!
	
	quit " "
	}
	type ResultSet rs=Db.select("CID,BAL,IRN","DEP")
	while rs.next() do {
      	set CID = rs.getCol(1)
        set BAL = rs.getCol(2)
        set IRN = rs.getCol(3)
        set INTRATE = rs.getCol(2) * rs.getCol(3)
      	write "CID = ",CID," Bal = ",BAL," - ",INTRATE,"CID LENGHT =",$L(CID),!	
	}
         
       
       quit
       
TESTREAD
	use 0
	set S = ""
	
	read "Sort By 1.CID 2.Bal 3.Interest ?",S,!
	if S=1 {
	type ResultSet rs=Db.select("CID,BAL,IRN","DEP")
	while rs.next() do {
      	set CID = rs.getCol(1)
        set BAL = rs.getCol(2)
        set IRN = rs.getCol(3)
        set INTRATE = rs.getCol(2) * rs.getCol(3)
        if INTRATE '=0 {
        write "CID = ",CID," Bal = ",BAL," Interest Rate = ",INTRATE,!
        }
        }
        
	}
	if S=2 {
	type ResultSet rs=Db.select("CID,BAL,IRN","DEP","","BAL")
	while rs.next() do {
      	set CID = rs.getCol(1)
        set BAL = rs.getCol(2)
        set IRN = rs.getCol(3)
        set INTRATE = rs.getCol(2) * rs.getCol(3)
        if INTRATE '=0 {
        write "CID = ",CID," Bal = ",BAL," Interest Rate = ",INTRATE,!
        }
        }
	
	}
	
	if S=3 {
	type ResultSet rs=Db.select("CID,BAL,IRN","DEP","","IRN, BAL")
	while rs.next() do {
      	set CID = rs.getCol(1)
        set BAL = rs.getCol(2)
        set IRN = rs.getCol(3)
        set INTRATE = rs.getCol(2) * rs.getCol(3)
        if INTRATE '=0 {
        write "CID = ",CID," Bal = ",BAL," Interest Rate = ",INTRATE,"  ",IRN,!
        }
        }
	
	}
	
	quit

TESTREAD2
	use 0
	set S = ""
	
	read "Sort By 1.CID 2.Bal 3.Interest ?",S
	DO TESTTWO:S=1,BAL:S=2,IRN:S=3 
	quit
BAL
	type ResultSet rs=Db.select("CID,BAL,IRN","DEP","","BAL")
	while rs.next() do {
      	set CID = rs.getCol(1)
        set BAL = rs.getCol(2)
        set IRN = rs.getCol(3)
        set INTRATE = rs.getCol(2) * rs.getCol(3)
        if INTRATE '=0 {
        write "CID = ",CID," Bal = ",BAL," Interest Rate = ",INTRATE,!
        }
        quit
IRN
	type ResultSet rs=Db.select("CID,BAL,IRN","DEP","","BAL * IRN")
	while rs.next() do {
      	set CID = rs.getCol(1)
        set BAL = rs.getCol(2)
        set IRN = rs.getCol(3)
        set INTRATE = rs.getCol(2) * rs.getCol(3)
        if INTRATE '=0 {
        write "CID = ",CID," Bal = ",BAL," Interest Rate = ",INTRATE,"  ",IRN,!
        }
        quit
TESTRECURSIVE
	IF $DATA(TEST)=1 set TEST=1+TEST
	IF $DATA(TEST)=0 set TEST=1
	write !,TEST_"PROCEEDING...."
	do TESTRECURSIVE
	quit
BINARYTREE(String a)
	if a'=1&($L(a)=1) DO BINARYTREE(1) quit
	if $L(a)<10 {
	set ARR(a)=a		
	DO ADDLEFT(a),ADDRIGHT(a)
	KILL tmp
	}
	quit
	
ADDLEFT(String a)
	
	set tmp=a_",1"
	DO BINARYTREE(tmp)
	KILL tmp
	quit
ADDRIGHT(String a)
	
	set tmp=a_",2"
	DO BINARYTREE(tmp)
	
	quit
	
	
START
	set ^ZKUNTEST(1)="TON"
	set ^ZKUNTEST(1,1)="DEV1|JN|25000"
	set ^ZKUNTEST(1,2)="22"
	set ^ZKUNTEST(2)="MY"
	set ^ZKUNTEST(2,1)="DEV1|JN|25000"
	set ^ZKUNTEST(2,2)="22"
	set ^ZKUNTEST(3)="PEEP"
	set ^ZKUNTEST(3,1)="DEV1|JN|25000"
	set ^ZKUNTEST(3,2)="22"
	set ^ZKUNTEST(4)="NEW"
	set ^ZKUNTEST(4,1)="DEV1|MAN|35000"
	set ^ZKUNTEST(4,2)="27"
	set ^ZKUNTEST(5)="RY"
	set ^ZKUNTEST(5,1)="DEV2|SN|30000"
	set ^ZKUNTEST(5,2)="25"
	set ^ZKUNTEST(6)="EARTH"
	set ^ZKUNTEST(6,1)="DEV2|JN|25000"
	set ^ZKUNTEST(6,2)="22"
	set ^ZKUNTEST(7)="KWANG"
	set ^ZKUNTEST(7,1)="DEV2|JN|25000"
	set ^ZKUNTEST(7,2)="22"
	set ^ZKUNTEST(8)="AU+"
	set ^ZKUNTEST(8,1)="DEV2|JN|25000"
	set ^ZKUNTEST(8,2)="22"
	set ^ZKUNTEST(9)="PICK"
	set ^ZKUNTEST(9,1)="DEV2|UH|50000"
	set ^ZKUNTEST(9,2)="32"
	set ^ZKUNTEST(10)="JEAB"
	set ^ZKUNTEST(10,1)="DEV1|JN|25000"
	set ^ZKUNTEST(10,2)="22"
	
	set name=""
	
	read "Please input Name ",name,!
	
	DO GETBYNAME(name)
	
	quit
	
GETBYNAME(String name)
	set FLAG=0
	set i=1
	while $D(^ZKUNTEST(i))'=0 do { quit:FLAG
	
	if ^ZKUNTEST(i)=name { 
	write "Department=",^ZKUNTEST(i,1).piece("|",1),!,"Position=",^ZKUNTEST(i,1).piece("|",2),! 
	set FLAG=1
	}
	set i=i+1
	}
	if FLAG=0 {
	write "Invalid Input"
	}
	
	quit
	
ZWHILETEST
	new con
	set i=1
	while con do { write "TEMINATED" quit:i=5
	write "TESTESTETSTESTE"
	set i=i+1
	}
	quit
COPYARRAY(x())
	//zkuntest(1,1)
	write x(1)
	write x(2)
	quit
TESTBCHMK()
	//d TESTBCHMK^ZMKORN()
	new ZTJD,ZBRCD,ZUID,ZTSEQ
	set %TAB("ZTJD")="/DES=DATE/REQ/TYP=D/LEN=10"
	set %READ="@@%FN,,ZTJD"
	do ^UTLREAD if VFMQ="Q" quit
	
	if Db.isDefined("DTJFM","TJD=:ZTJD,CLS,GRP,TYP,CID,TSEQ") do {
	type RecordDTJFM zdtj=Db.getRecord("DTJFM","TJD=:ZTJD,CLS,GRP,TYP,CID,TSEQ")
	type RecordTMPRPT3 tmp = Class.new("RecordTMPRPT3")
	set temp1 = zdtj.data
	set tmp.pid = "BATCHMK"
	set tmp.key1 = zdtj.cid
	if zdtj.tseq = "2" set tmp.key2 = temp1.piece(":",4)
	if zdtj.tseq '= "1",zdtj.tseq '= "2" set tmp.key3 = ""
	do tmp.bypassSave()
	}
	
	new IOTYP,ZPATH
	set ZPATH=$$TRNLNM^%ZFUNC("SCAU_SPOOL")
	
	type IO io = Class.new("IO")
	set io.directory=ZPATH
	set io.fileName="DTJNAMK.txt"
	set io.openParams="NEWV/WRITE"
	do io.open()
	
	set (TEXT1,TEXT2,TEXT3,tmp1,tmp2)=""

	type ResultSet rs=Db.select("PID,KEY1,KEY2,KEY3","TMPRPT3","PID=:BATCHMK")
	while rs.next() do { 
		set tmp1 =rs.getCol("KEY2")
		set tmp2 =rs.getCol("KEY3")
		if '($D(tmp1)) do {
		set TEXT1="(Non-Financial "_rs.getCol("KEY1")
		}
		set TEXT3="Both Condition = "_rs.getCol("KEY1")_":"_rs.getCol("KEY2")
		
		do io.write(TEXT1)
		do io.write(TEXT3)
	}
	
	set IOTYP="RMS"
	do io.close()
	quit
DIST()	

	type ResultSet rs = Db.select("ACN,ZOCNTRY,ZOSTATE,ZOCITY,MCNTRY,MSTATE,MCITY,ZECNTRY,ZESTATE,ZECITY,PCNTRY,PSTATE,PCITY","CIF")
	set (p,m,o)=","
	set e=""
	set ret=""
	
	while rs.next() do {
	if Db.isDefined("CIF","ACN=:rs.getCol(1),PCNTRY=:rs.getCol(11),PSTATE=:rs.getCol(12),PCITY=:rs.getCol(13)") do {
	if rs.getCol(11)'="",rs.getCol(12)'="",rs.getCol(13)'="" do {
	if 'Db.isDefined("ZUTBLDIST","CNTRY=:rs.getCol(11),STATE=:rs.getCol(12),DIST=:rs.getCol(13)") set p="P,"
	}
	else set ZNA(rs.getCol(1),"P")="Address P N/A"
	
	}
	if Db.isDefined("CIF","ACN=:rs.getCol(1),MCNTRY=:rs.getCol(5),MSTATE=:rs.getCol(6),MCITY=:rs.getCol(7)") do {
	if rs.getCol(5)'="",rs.getCol(6)'="",rs.getCol(7)'="" do {
	if 'Db.isDefined("ZUTBLDIST","CNTRY=:rs.getCol(5),STATE=:rs.getCol(6),DIST=:rs.getCol(7)") set m="M," 
	}
	else set ZNA(rs.getCol(1),"M")="Address M N/A"
	
	}
	
	if Db.isDefined("CIF","ACN=:rs.getCol(1),ZOCNTRY=:rs.getCol(2),ZOSTATE=:rs.getCol(3),ZOCITY=:rs.getCol(4)") do {
	if rs.getCol(2)'="",rs.getCol(3)'="",rs.getCol(4)'="" do {
	if 'Db.isDefined("ZUTBLDIST","CNTRY=:rs.getCol(2),STATE=:rs.getCol(3),DIST=:rs.getCol(4)") set o="O,"
	}
	else set ZNA(rs.getCol(1),"O")="Address O N/A"
	
	}
	
	
	if Db.isDefined("CIF","ACN=:rs.getCol(1),ZECNTRY=:rs.getCol(8),ZESTATE=:rs.getCol(9),ZECITY=:rs.getCol(10)") do {
	if rs.getCol(8)'="",rs.getCol(9)'="",rs.getCol(10)'="" do {
	if 'Db.isDefined("ZUTBLDIST","CNTRY=:rs.getCol(8),STATE=:rs.getCol(9),DIST=:rs.getCol(10)") set e="E"
	}
	else set ZNA(rs.getCol(1),"E")="Address E N/A"
	
	}
	

	set ZMM(rs.getCol(1))= p_m_o_e
	
	}
	
	quit
DISTF()
	new IOTYP,ZPATH
	set ZPATH=$$TRNLNM^%ZFUNC("SCAU_SPOOL")
	type IO io = Class.new("IO")
	set io.directory=ZPATH
	set io.fileName="ZMK1.txt"
	set io.openParams="NEWV/WRITE"
	do io.open()
	type ResultSet rss = Db.select("ACN","CIF")
	while rss.next() {
	set TEXT1=rss.getCol("ACN")
	do io.write(TEXT1)
	}
	set IOTYP="RMS"
	do io.close()
	
	new IOTYP
	set (IOTYP)=""
	
	/*----Open a file to write file layout----*/
	type IO zoutio=Class.new("IO")
	set zoutio.fileName="ZMK1.txt"
	set zoutio.directory=ZPATH
	set zoutio.openParams="READ"
	catch iox {
	if zoutio.device'="" do zoutio.close()
     	if iox'["%PSL-E-IO" throw iox
      	if iox["IOOPEN" write "Open failed", ! quit
      	if iox["IOEOF"  write !,"Reached end of file", ! quit
	write "unexpected IO error '", iox.type, "'", !

	}
	do zoutio.open()
	
	type String REC
	for  set REC = zoutio.read() do {
   	
   	if Db.isDefined("CIF","ACN=:REC") do {
   	type RecordCIF cif = Db.getRecord("CIF","ACN=:REC")
   	if Db.isDefined("CIF","ACN=:cif.acn,PCNTRY=:cif.pcntry,PSTATE=:cif.pstate,PCITY=:cif.pcity") do {
	if cif.pcity'="",cif.pcntry'="",cif.pstate'="" do {
	if 'Db.isDefined("ZUTBLDIST","CNTRY=:cif.pcntry,STATE=:cif.pstate,DIST=:cif.pcity") set p="P,"
	}
	else set ZNA(cif.acn,"P")="Address P N/A"
	
	}
	if Db.isDefined("CIF","ACN=:cif.acn,MCNTRY=:cif.mcntry,MSTATE=:cif.mstate,MCITY=:cif.mcity") do {
	if cif.mcity'="",cif.mcntry'="",cif.mstate'="" do {
	if 'Db.isDefined("ZUTBLDIST","CNTRY=:cif.mcntry,STATE=:cif.mstate,DIST=:cif.mcity") set m="M," 
	}
	else set ZNA(cif.acn,"M")="Address M N/A"
	
	}
	
	if Db.isDefined("CIF","ACN=:cif.acn,ZOCNTRY=:cif.zocntry,ZOSTATE=:cif.zostate,ZOCITY=:cif.zocity") do {
	if cif.zocity'="",cif.zocntry'="",cif.zostate'="" do {
	if 'Db.isDefined("ZUTBLDIST","CNTRY=:cif.zocntry,STATE=:cif.zostate,DIST=:cif.zocity") set o="O,"
	}
	else set ZNA(cif.acn,"O")="Address O N/A"
	
	}
	
	
	if Db.isDefined("CIF","ACN=:cif.acn,ZOCNTRY=:cif.zecntry,ZOSTATE=:cif.zestate,ZOCITY=:cif.zecity") do {
	if cif.zecity'="",cif.zecntry'="",cif.zestate'="" do {
	if 'Db.isDefined("ZUTBLDIST","CNTRY=:cif.zecntry,STATE=:cif.zestate,DIST=:cif.zecity") set e="E"
	}
	else set ZNA(cif.acn,"E")="Address E N/A"
	
	}
	

	set ZMM(cif.acn)= p_m_o_e
   	
   	}
   
	}

	quit
EXT(String FNAME)
	set ZSPOOL=$$TRNLNM^%ZFUNC("SCAU_SPOOL_EXTF")
	type DbSet ds=Db.selectDbSet("ZUTBLUTBLEXT")
	while ds.next() do {
		type RecordZUTBLUTBLEXT zutbl=ds.getRecord("ZUTBLUTBLEXT")
		set tmp=zutbl.extid
		
		if tmp.contains(FNAME.upperCase()) do {
		do EXTTRACT(.zutbl)
		//write !,"Contained"
	}
	
	quit
	
EXTTRACT(RecordZUTBLUTBLEXT zutbl)
	set ZDATE=$$DAT^%ZM(%SystemDate-1,"YEARMMDD")
	type Date ZEXTDATE
	type Boolean ZCHECK=true
	type Number ZCNT,ZPOS
	type String IOTYP,REC,ZDELIM,ZFID,ZFIELD,ZLIST,ZPATH,ZTMP
	set ZPATH=zutbl.dirnam
	do {
		if ZPATH.isNull() set ZPATH=ZSPOOL quit
		if ZPATH.extract(1)="/" quit
		set ZPATH=$$TRNLNM^%ZFUNC(ZPATH)
		
		if ZPATH.isNull() set ZPATH=$$TRNLNM^%ZFUNC("SCAU_SPOOL_EXTF")
		set X=$$SYS^%ZFUNC("mkdir -p "_ZPATH)
		if X set ZPATH=$$TRNLNM^%ZFUNC("SCAU_SPOOL")
	}
	
	//write !,"PATH ="_ZPATH
	
	set ZDELIM=zutbl.delim
	set ZEXTFILE=zutbl.extension
	
	type IO io=Class.new("IO")
	set io.fileName=zutbl.filnam_"_"_ZDATE_ZEXTFILE
	set io.directory=ZPATH
	set io.openParams="NEWV/WRITE"
	set io.recordSize=1024
	do io.open()
	
	set ZFID=zutbl.fid
	set ZLIST=zutbl.field
	while ZCHECK do {
		if ZLIST.extract()="," set ZLIST=ZLIST.extract(2,ZLIST.length()) quit
		if ZLIST.extract(ZLIST.length())="," set ZLIST=ZLIST.extract(1,ZLIST.length()-1) quit
		if ZLIST.find(",,") set ZLIST=ZLIST.replace(",,",",") quit
		set ZCHECK=false
	}
	
	if ZLIST.isNull() set IOTYP="RMS" do io.close() quit
	
	set ZLIST=ZLIST.upperCase()
	
	set ZCNT=1
	for  set ZTMP=ZLIST.piece(",",ZCNT) quit:ZTMP.isNull()  set ZCNT=ZCNT+1
	set ZCNT=ZCNT-1
	
	type ResultSet rs=Db.select(ZLIST,ZFID)
	while rs.next() do {
		set REC=""
		for ZPOS=1:1:ZCNT do {
			set ZFIELD=rs.getCol(ZPOS)
			set ZFIELD=ZFIELD.replace(ZDELIM,"")
			set REC=REC_ZDELIM_ZFIELD
		}
		set REC=REC.extract(2,REC.length())
		do io.write(REC)
	}

	set IOTYP="RMS"
	do io.close()

	quit
CDEP(DATE)
	//d CDEP^ZMKORN(62085)
	type Number numDp,numLn,numAllDep,numAllLn
	set (numDp,numLn,numAllDep,numAllLn) = 0
	set today=DATE
	type ResultSet rs = Db.select("CID","DEP")
	while rs.next() do {
	set numAllDep=numAllDep+1
	if $$CDEP^ZCHERRY(rs.getCol("CID"),today)'="" set numDp=numDp+1
	else set CIDFDEP(rs.getCol("CID"))= "Fail"
	}
	type ResultSet rs2 = Db.select("CID","LN")
	while rs2.next() do {
	set numAllLn=numAllLn+1
	if $$CLN^ZCHERRY(rs2.getCol("CID"),today)'="" set numLn=numLn+1
	else set CIDFLN(rs2.getCol("CID"))= "Fail"
	}
	write !,"Loan"
	write !,"ALL : "_numAllLn
	write !,"Pass : "_numLn
	write !,"Dep"
	write !,"ALL : "_numAllDep
	write !,"Pass : "_numDp
	write !,"ACN"
	write !,"ALL : "_(numAllDep+numAllLn)
	write !,"Pass : "_(numDp+numLn)
	

	quit
CACNFLG(DATE)
	//d CACNFLG^ZMKORN(62085)
	type Number DnumDp,DnumLn,DnumAllDep,DnumAllLn,KnumDp,KnumLn,KnumAllDep,KnumAllLn
	set (DnumDp,DnumLn,DnumAllDep,DnumAllLn,KnumDp,KnumLn,KnumAllDep,KnumAllLn) = 0
	set today=DATE
	
	type ResultSet dp = Db.select("CID","DEP")
	while dp.next() do {
	set DnumAllDep=DnumAllDep+1
	if $$CDEPDCM^ZCHERRY(dp.getCol("CID"),today)'="" set DnumDp=DnumDp+1
	else set DCMFDEP(dp.getCol("CID"))= "Fail"
	if $$CDEPKYC^ZCHERRY(dp.getCol("CID"),today)'="" set KnumDp=KnumDp+1
	else set KYCFDEP(dp.getCol("CID"))= "Fail"
	

	}
	
	type ResultSet ln = Db.select("CID","LN")
	while ln.next() do {
	set DnumAllLn=DnumAllLn+1
	if $$CLNDCM^ZCHERRY(ln.getCol("CID"),today)'="" set DnumLn=DnumLn+1
	else set DCMFLN(ln.getCol("CID"))= "Fail"
	if $$CLNKYC^ZCHERRY(ln.getCol("CID"),today)'="" set KnumLn=KnumLn+1
	else set KYCFLN(ln.getCol("CID"))= "Fail"
	}
	write !,"DCMS"
	write !,"Loan"
	write !," ALL : "_DnumAllLn
	write !," Pass : "_DnumLn
	write !,"Dep"
	write !," ALL : "_DnumAllDep
	write !," Pass : "_DnumDp
	write !,"ACN"
	write !," ALL : "_(DnumAllDep+DnumAllLn)
	write !," Pass : "_(DnumDp+DnumLn)
	
	write !,"KYCS"
	write !,"Loan"
	write !," ALL : "_DnumAllLn
	write !," Pass : "_KnumLn
	write !,"Dep"
	write !," ALL : "_DnumAllDep
	write !," Pass : "_KnumDp
	write !,"ACN"
	write !," ALL : "_(DnumAllDep+DnumAllLn)
	write !," Pass : "_(KnumDp+KnumLn)
	quit
	
TESTFG(Number ZCID,Date ZTJD)
	//d TESTFG^ZMKORN(19000030,62089)
	set exit=0
	type String IOTYP,ZPATH
	set ZPATH=$$TRNLNM^%ZFUNC("SCAU_SPOOL")
	
	set (ZCIF,ZACN,ZLN,ZCO)=""
	
	type IO io = Class.new("IO")
	set io.directory=ZPATH
	set io.fileName="ZMKCIF"_ZTJD_".txt"
	set io.openParams="NEWV/WRITE"
	do io.open()
	
	type IO io1 = Class.new("IO")
	set io1.directory=ZPATH
	set io1.fileName="ZMKACN"_ZTJD_".txt"
	set io1.openParams="NEWV/WRITE"
	do io1.open()
	
	type IO io2 = Class.new("IO")
	set io2.directory=ZPATH
	set io2.fileName="ZMKLN"_ZTJD_".txt"
	set io2.openParams="NEWV/WRITE"
	do io2.open()
	
	type IO io3 = Class.new("IO")
	set io3.directory=ZPATH
	set io3.fileName="ZMKLN"_ZTJD_".txt"
	set io3.openParams="NEWV/WRITE"
	do io3.open()
	
	if 'Db.isDefined("ACN","CID=ZCID") quit
	type RecordACN acn = Db.getRecord("ACN","CID=ZCID")
	
	
	
	//Check DEP
	if (Db.isDefined("DEP","CID=:ZCID")) do {
	type RecordDEP dep=Db.getRecord("DEP","CID=:ZCID")
	if (dep.zcheckod=1) do {
		set ZEXIT=0
	type ResultSet rsdtjfm=Db.select("TSEQ,TCMT","DTJFM","TJD=:ZTJD AND CLS=:dep.cls AND GRP=:dep.grp AND TYP=:dep.type AND CID=:dep.cid")	
		while rsdtjfm.next() do { quit:exit
		type String ZTCMT
		set ZTCMT=rsdtjfm.getCol("TCMT")
		if (ZTCMT["[ZODTIER]ACTIVATE:0:1") do {
		set ZCIF=acn.acn_"|"_"A"
		set ZACN=ZCID_"|"_acn.acn_"|"_"A"
		set ZLN=dep.cid_"|"_"A"
		set exit=1
		write !,"RULE 7(OD) APPILED"
		}
		}
	//End Rule7(OD) then quit
	quit
	}
	if (exit=1) quit
	if 'Db.isDefined("ZDCMLCID","dep.cid"),(dep.deldt'="") do {
	set ZLN=dep.cid_"|"_"U" write "RULE 15 APPILED"
	}
	}
	
	//Chech LN
	if Db.isDefined("LN","CID=ZCID") do {
	type RecordLN ln= Db.getRecord("LN","CID=:ZCID")
	
	if (ln.odd2=ZTJD) do {
	if Db.isDefined("ZDCMLCIF","acn.acn") do {
	set ZCIF=acn.acn_"|"_"A"
	write !,"RULE 7(LN) APPILED"
	write !,ZCIF
	write !,acn.acn
	set ZACN=ZCID_"|"_acn.acn_"|"_"A"
	set ZLN=ln.cid_"|"_"A"
		type ResultSet zcacn = Db.select("CTRCT","ZCTRCTACN","CID=:ZCID")
		while zcacn.next() do {
		type ResultSet zctcoll = Db.select("COLL","ZCTRCTCOL","CTRCT=:zcacn.getCol(1)")
		while zctcoll.next() do { 
		set ZCO=acn.acn_"|"_ZCID_"|"_zctcoll.getCol(1)_"|"_"A"
		set exit = 1			}
		                      }
	}
	//End Rule 7(LN) the quit					

	}
	if (exit=0) do {
	if 'Db.isDefined("ZDCMLCIF","ln.cid") do {
		if (ln.dist1nd'=""""),(ln.dist1nd<ZTJD) do {
		set ZLN=ln.cid_"|"_"U"
		write "RULE 14 Applied"
	}
	if Db.isDefined("ZDCMLCIF","ln.cid"),(ln.dtc'=""""),(ln.dtc'=ZTJD),(ln.stat=4) do {
		set LN="Rule 18 Appiled"
	}
	}
	/*
	else do { 
	set ZCIF=acn.acn_"|"_"U"
	set ZACN=ZCID_"|"_acn.acn_"|"_"U"
	set ZLN=ln.cid_"|"_"U"
		type ResultSet zcacn = Db.select("CTRCT","ZCTRCTACN","CID=:ZCID")
		while zcacn.next() do {
		type ResultSet zctcoll = Db.select("COLL","ZCTRCTCOL","CTRCT=:zcacn.getCol(1)")
		while zctcoll.next() do { 
		set ZCO=acn.acn_"|"_ZCID_"|"_zctcoll.getCol(1)_"|"_"U"
		write !,"RULE 7(OD) APPILED"
					}
					}

	}
	
	
	}
	*/
		
	
	//if (dep.dtc=ZTJD),(dep.stat=4) set ZLN="" write "RULE 18 APPILED"
	
			
	
	
	type ResultSet zdtjfm = Db.select("CID,TSEQ","DTJFM","CID=:ZCID")
	set exit=0
	while zdtjfm.next() do { quit:exit
		set ZCIF=acn.acn_"|"_"U"
		set ZACN=ZCID_"|"_acn.acn_"|"_"U"
		write !,"RULE 8 APPILED"
		set exit=1
	}
		//case 9
		set exit=0
		type ResultSet zcacn = Db.select("CTRCT","ZCTRCTACN","CID=:ZCID")
		while zcacn.next() do {
		set tmpCTRCT=zcacn.getCol(1)
		}	
		type ResultSet zctcoll = Db.select("COLL","ZCTRCTCOL","CTRCT=:tmpCTRCT")
		while zctcoll.next() do {
		set tmpCOLL = zctcoll.getCol(1)
		}
		if 'Db.isDefined("ZCOL","COLL=zctcoll.getCol(1)") quit
		type RecordZCOL zcol = Db.getRecord("ZCOL","COLL=tmpCOLL")
		type ResultSet zcolh = Db.select("COLL,TJD","ZCOLH","COLL=:zcol.coll AND TJD=:ZTJD")
			while zcolh.next() do { quit:exit
				if (zcol.coltyp=7) set ZCIF=zcol.pacn_"|"_"U" write !,"RULE 10 APPILED"
				set ZCO=zcol.coll_"|"_"U"
				write !,"RULE 9 APPILED"
				set exit=1
				}
		 
	}
	do io1.write(ZACN)
	do io.write(ZCIF)
	do io2.write(ZLN)
	do io3.write(ZCO)
	set IOTYP="RMS"
	
	do io1.close()
	do io2.close()
	do io3.close()
	quit
HIST(DATE,CID)
	type Number COUNTD,COUNTC,AMOUNT
	set (COUNTD,COUNTC,AMOUNT)=0
	type ResultSet rsdtj=Db.select("ITC1,TOT,ETC","HIST","TJD=:DATE AND CID=:CID")
	while rsdtj.next() do {
		if $$CHKTRCD^ZMKORN(rsdtj.getCol("ETC"))'=1  do {
		if rsdtj.getCol("ITC1")=1 set COUNTC=COUNTC+1
		if rsdtj.getCol("ITC1")=0 set COUNTD=COUNTD+1
		set AMOUNT=AMOUNT+rsdtj.getCol("TOT")
		}
	}
	type RecordACN acn=Db.getRecord("ACN","CID=:CID")	
	write !,"Result form d HW2^ZMKORN(61906,2280056100)",!
	write !,"Date : "_$$DAT^%ZM(DATE,"YEARMMDD")
	write !,"Account : "_CID_"-"_acn.acctname
	write !,"Class,GRP,TYPE : "_acn.cls_","_acn.grp_","_acn.type
	write !,"Summary Amount : "_AMOUNT.zero($L(AMOUNT),4,0)
	
	type Number SUM
	set SUM=COUNTC+COUNTD
	write !,"Number of Transaction in DATE : Debit "_COUNTD_" + Credit "_COUNTC_"="_SUM
	quit
CHKTRCD(TRCD)

	type String Fee
	set Fee = 1
	type ResultSet rsdtj=Db.select("FEE","ZUTBLTRCD","ETC=:TRCD")
	
	while rsdtj.next() do {
		
		set Fee = rsdtj.getCol(1)
		
		}	
	quit Fee
HISTTR(CID,SEQ)
		//d HISTTR^ZMKORN(96075686,974135)
		
		type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=:SEQ")
		set tmp = hist.trc
		if ($D(tmp)) do {
		type ResultSet rs = Db.select("CID,DATETIME,TJD,TSEQ,TRC,BRCD,UID","DTJ","CID=:hist.cid AND TSEQ=:hist.tseq")
		while rs.next() do {
		write !,"DTJ("_rs.getCol("TJD")_","_rs.getCol("DATETIME")_","_rs.getCol("CID")_","_rs.getCol("TSEQ")_") ="_rs.getCol("TRC")_"|"_rs.getCol("BRCD")_"|"_rs.getCol("UID")
		
		type ResultSet rst = Db.select("TJD,TSEQ,TRC,BRCD,UID","TTX","TJD=:rs.getCol(3) AND TSEQ=:rs.getCol(5)")	
		while rst.next() do {
		write !,"TTX("_rst.getCol("TJD")_","_rst.getCol("BRCD")_","_rst.getCol("UID")_","_rst.getCol("TSEQ")_") ="_rst.getCol("TRC")_"|"_rst.getCol("BRCD")_"|"_rst.getCol("UID")	
			
		
		}
		
		}
		type ResultSet rs = Db.select("TJD,CLS,GRP,TYP,CID,TSEQ","DTJFM","CID=:hist.cid AND TSEQ=:hist.tseq")
		while rs.next() do {
		write !,"DTJFM("_rs.getCol("TJD")_","_rs.getCol("CLS")_","_rs.getCol("GRP")_","_rs.getCol("TYP")_","_rs.getCol("CID")_","_rs.getCol("TSEQ")_") ="_rs.getRow("|")
		
		
		}
		}
		
		
		
		
		
		
	quit
TTXFDT()
	
	set ZTJD=62090
	set ZUID=930001
	set ZBRCD=99
	type ResultSet rs = Db.select("TSEQ","TTXFDT","TJD=:ZTJD AND UID=:ZUID AND BRCD=:ZBRCD")
	while rs.next() do {
	write rs.getCol(1)
	type RecordTTXFDT fdt = Db.getRecord("TTXFDT","TJD=:ZTJD,BRCD=:ZBRCD,UID=:ZUID,TSEQ=:rs.getCol(1)")
	do fdt.toArray("TRAN")
	}
	quit

NOD(ZCID)

	type RecordDEP dep = Db.getRecord("DEP","CID=:ZCID")
	
	if dep.balavl<>0 quit
	if dep.zstatcd=4 quit
	if dep.zcheckod=0 quit
	
	set zbrcd = dep.boo
	set zcid  = ZCID
	
	type ResultSet zod 	= Db.select("CLAMT,EXPDT,STDT,SEQ","ZODTIER","CID=:ZCID")
	while zod.next() do {	
		
		set zseq  = zod.getCol("SEQ")	
	
	type RecordZNODREV nod 	= Class.new("RecordZNODREV")	
		
		set nod.brcd	= dep.boo
		set nod.cid	= dep.cid
		set nod.seq	= zseq
		set nod.clamt	= zod.getCol("CLAMT")
		set nod.expdt	= zod.getCol("EXPDT")
		set nod.stdt	= zod.getCol("STDT")
		
		do nod.bypassSave()
		
		}
	
	
	quit

ACC(input) 
		
	if input=1 do {
	write !,input
	}
	if input=2 do {
	write !,input
	}
	if input=3 do {
	write !,input
	quit
	}
	if input=4 do {
	write !,input
	}
	
	quit



	
	

	 
		
		
	