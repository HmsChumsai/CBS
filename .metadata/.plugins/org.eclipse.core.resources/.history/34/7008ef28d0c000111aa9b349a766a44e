//DO NOT MODIFY  Computed fields for LN|LNCDI|||||||1
	/*
	Public;All the assignment expressions for computed DI in LN

	All the assignment expressions for computed DI in LN file
	This procedure definition replaces [.MRTNS]LNCDI.M
 
 
	LIBRARY:
	$$ IBPY		Interest Billed Prior Year
	$$ NOTES 	Account Notes on File Flag
	$$ DELDOL 	Dollars Delinquent
	$$ GTDP 	Grand Total Delinquency Periods Computed
	$$ NDDEL 	Number Days Delinquent
	$$ INBAL1 	Investor Balance
	$$ SOLDCMP 	Loan Amount to be Sold
	$$ PPCMP 	Percent Sold
	$$ ACTIVE 	Active Account Flag
	$$ INVYLD 	Investor's Yield
	$$ GAINLOSS	Investor's Gain/Loss
	$$ INBAL 	Investor Balance
	$$ NABCHIS    	Neg Am Bal Change
	$$ PLFSA 	Service Fee on Schedule Adjustments
	$$ POBPRPF 	Paid Off Before Prev Remit Period Flag
	$$ AMOMDT 	Amortization Maturity Date
	$$ AVL 		Balance Available for Disbursement
	$$ AUADJ  	Auto Escrow Update - Adjustment Amount
	$$ AVLBAL 	Available Balance
	$$ BALPYE 	Balance - prior year
	$$ BRREG	Account Region
	$$ CIFEQV	Equivalent Value in CIF Base Currency
	$$ CVBAL	Customer View Loan Balance
	$$ DLCO 	Date of Last Chargeoff
	$$ EBBAL 	Estimated Balloon Balance
	$$ ESCCP 	Current Escrow Payment
	$$ FPM 		Full Payments Made
	$$ FSID 	Primary Borrower Financial Statement ID
	$$ LTVC 	Loan to Value Ratio - Current
	$$ MCHG 	Miscellaneous Charge Due
	$$ MCND 	Misc Charges Outstanding - Not Due
	$$ MCOL 	Multiple Collateral Indicator
	$$ OPUID 	Opened Account - User ID
	$$ PCMVAL 	PCM Value
	$$ PDS 		Payment Delinquency Status
	$$ PRMET  	Payment Processing Method
	$$ PRNRPD 	Principal Repaid
	$$ SCHPMT 	Payment - Next Scheduled Amount
	$$ SYSEQV 	Equivalent Value in Bank's Base Currency
	$$ SUBPRIN	Sub-account principal
	$$ SUBINT	Sub-account Interest
	$$ SUBLC	Sub-account Late Charges
	$$ SUBFEE	Sub-account Fee 
	$$ TLSEQ	Last History Tran Sequence
	$$ TSEQ		Next History Trans Sequence
	$$ UNMC 	Uncollected Misc Charges
	$$ XCF01 	Statement Info From CIF
	$$ XLN01 	Average Balance Cycle
	$$ XLN02 	Average Bal Prior Cycle
	$$ XLN03 	Average Bal Current Month
	$$ XLN04 	Average Bal Prior Month
	$$ XLN05 	Com'l Comm't
	$$ XLN07      	Delinquency Amounts up to seven Delinquent Periods
	$$ XLN06 	Curr & Uncoll Amts
	$$ XLN08 	Last Primary Tran
	$$ XLN09 	Payoff
	$$ XLN09EX      System Use - Extracts certain piece from XLN09  //AV -ARQ41211 -  8/22/00
	$$ XLN10 	Participation Sold Amounts
	$$ XLN11 	Accident Insurance
	$$ XLN12      	System Use - Life Insurance
	$$ XLN13      	System Use - Disability Insurance
	$$ XLN14      	System Use - Secondary Cif's
	$$ XLN15      	System Use - Secondary CIF Borrowers
	$$ XLN16      	System Use - Collateral Data
	$$ XLN17      	System Use - Fee Income Amortization
	$$ XLN18      	System Use - Average Daily Bal Y-T-D
	$$ XLN19      	System Use - Average Daily Bal Prior Yr
	$$ XLN20      	System Use - Remitted Prior Year
	$$ XLN21      	System Use - Problem Loan Data
	$$ XLN22      	System Use - Earnings Analysis Info
	$$ XLN23      	Loan Budgeting Unassigned Value
	$$ XLN24      	System Use - Asset Classifications
	$$ XLN25      	System Use - Payment Lump Amounts
	$$ XLN26      	System Use - First Primary Tran
	$$ XLN27      	System Use - Effective Dated Values
	$$ XLN28      	System Use - Anticipated Payoff
	$$ XLN29      	System Use - Miscellaneous Totals
	$$ MLN		Multiple Loan Indicator
	$$ SLTVC      	Current Loan to Value Ratio
	$$ RSRT       	Report Sort
	$$ XH01 	System Use - Loan Tran Breakdown
 	$$ ACRAT 	Accrual Rate
	$$ ADVPP      	Computed Advanced Principal Paid
	$$ ANND 	Analysis - Next Date Created
	$$ BALCMP 	Balance
	$$ CARDUF	Card Use Flag
	$$ CBPNR      	Coupon Production - Next Run Effective
	$$ DUIN2 	Total Interest Due (In Bill File Only)
	$$ DEDPPY 	Total Deductable Loan Fees Paid Prior Year
	$$ ESUADD 	Loan Budgeting Unassigned Add Back Amt
	$$ FMAB 	Front Money Deposit Account Balance
 	$$ IPTD 	Interest Paid to Date
	$$ IPYE 	Interest Paid - Form 1098 Reportable
 	$$ INTOFFDT   	Interest Review Offset Date
	$$ IUNT 	Interest - Unearned (Current)
	$$ LRIAS 	Last Renewal - Interest Accrued Since
	$$ LRIPS      	Last Renewal - Interest Paid Since
	$$ NAM 		Borrower
	$$ NCOA 	Net Charge-off Balance
	$$ NLR 		Number of Restructurings
	$$ ODD2 	First Disbursment Date
	$$ PCOLDES    	Primary Collateral Description
	$$ UIDCID 	Account Owned By User
	$$ PATUF 	Preauthorized Transfer Use Flag
	$$ WBAL 	Dealer Reserve Account Balance
	$$ PROVPCT   	Provision Percentage
	$$ PROVBAL	Provision Balance
	$$ CTLVAL 	Collateral to Loan Value
	$$ LNCOLTYP 	Loan Collateral Type
	$$ COLBAL 	Collateral Account Balance
	$$ FPLDG 	Collateral Fixed Pledged Amount
	$$ PCTPLDG 	Collateral Percent Pledged
	$$ PLDGAMT 	Collateral Pledged Amount Secured
	$$ PLDGCRLMT 	Collateral Pledged Amount Secured in Loan Currency
	$$ MINRATE 	Minimum Rate Differential Calculation
	$$ PLDGMDT 	Calculation for Maturity Date of Deposit Secured Loan
	$$ PLDGBAL    	Pledged Amount of the collateral account in all records
	$$ XLNBLP01   	Lnblp- lnbil1 computed fields
	$$ OSEQDT 	Bill Oldest Unsatisfied Seq Due Date
	$$ PML 		Send Promotional Mail
	$$ ADJACR3 	Adjusted Accrual Calc
	$$ AVB 		Average Monthly Balance
	$$ MEBAL      	Month End Balance
	$$ TRMD 	Account Term - Days
	$$ PLDGCTOT   	Pledged Collateral Total
	$$ LPDTAMT    	Last Payment Amount
	$$ IFDA		Interest Free Disbursement Amount
	$$ COLTOT	Collateral Total of Held Against Loan
	$$ DELQPB	Delinquency Period Band
	$$ NETEXP	Net Exposure
	$$ NONPERF      Non-Performing Indicator
	$$ IRAMTR	Interest Reserve Amount Remaining
	$$ COMDUE	Computed Commitment Columns
	$$ DAYSDELQ	Days Delinquent
	$$ DOLDEL	Delinquent Amount
	$$ TYPEDES	Product Type Description
	$$ MINPAYPT	Percentage of Minimum Payment
	$$ PBAL		Penalty Balance
	$$ ADUBQ        Average Bal Prior Quarter
	$$ PMTDEL	Number of Payments Delinquent
	$$ FBP		Fixed bullet product
	$$ AGBAL	Aggregate Balance
	$$ AGBALQ	Aggregate Balance Quarter to Date
	$$ AGBALH	Aggregate Balance Half Year to Date
	$$ AGBALY	Aggregate Balance Year to Date
	$$ AGDAYS	Aggregate Days
	$$ AGDAYSQ	Aggregate Days Quarter to Date
	$$ AGDAYSH	Aggregate Days Half Year to Date
	$$ AGDAYSY	Aggregate Days Year to Date
	$$ VATOTDUE 	Total VAT Due Amount
	$$ CFPROC	Cash Flow Projection Code
	$$ PIPS		P&I Payment Schedule Loan
	$$ EXTTOTSC	Number of Schedule Extensions
	$$ PMTPIREM	P&I Payment Amount Remaining

	---- Revision History ------------------------------------------------
	05/01/10 - Allan Mattson - GSB
	           Modified PROVPCT to add parameter RecordACN.  If a value
	           is passed in, use the object instead of instantiating a
	           new RecordACN object.  Note that batch BCHLNRCALC was
	           modified to pass in RecordACN.

	           Modified PROVBAL to cast object RecordACN as a RecordLN
	           object instead of instantiating a new RecordLN object.

	04/10/08 - Nagarjuna - CR 33286
	           Modified section GAINLOSS to quit if IRN is NULL(or zero), 
	           This release prevent attempting to divide by zero(causes 
	           an error on SCAER).
	
	02/15/08 - TAOC - CR 31691
		   Added new extrinsic sections PIPS, EXTTOTSC and PMTPITEM to
		   compute the P&I Payment Schedule Loan, Number of Schedule
		   Extensions and P&I Payment Amount Remaining.

	02/06/08 - Russ Coryell - CR 31690
		   Added a new section CFPROC to return the computed value 
		   for the new column CFRPROC.

	01/25/08 - STOUTD - CR31683
		   Modified RSRT section to return a new value, 5, 
		   which will be returned when the AUTO and REV variables 
		   are both set and the MAN variable is not set.
		   This change is required to support the ability to display 
		   a new message, "Date automatically removed from non-accrual", 
		   on the SCA295 report.  
	
	11/27/07 - SANTHUMS - CR 30591
		   Modified SLTVC section to clean up unnecessary variables 
		   and to display the correct value for Current Loan
		   to Value Ratio (LNCOL.SLTVC) column. This is required since 
		   the code is not considering the case when the value 
		   of the column (COL.COLVAL) is defined and the value of 
		   the column (COL.PRICE) is not defined and vice versa. 
		   	
	11/02/07 - Chaithra - CR30119
		   Modified SLTVC section to make the comparison of the values 
		   of the column "Collateral Value" (COL.COLVAL) and of the column
		   "Sales Price" (COL.PRICE) and select the lower value among the
		   two, to calculate current loan to value ratio (single collateral).
		   Also, modified to use Db.getRecord() instead of Db.getOneRow() to
		   obtain COL Record.
		   
	08/27/07 - RussellDS - CR28928
		   Modified MCHG to just accumulate LNFEE.FEEREM and not deal
		   with XLN29, to improve performance.

	07/01/07 - KinI - CR 27406
		   Modified DELQPB section to add additional argument "type" to 
		   NBROPMT^PROCLN call. 
	
	06/18/07 - RussellDS - CR27663
		   Modified BALPTYE and BALPYE to always return non-null
		   value for hist0.bal.
	
	04/17/07 - RussellDS - CR26387
		   Eliminated calls to UHFETCH, except for HIST0.
	
	03/22/07 - RengaSP - CR 25919
		   Modified LPDTAMT section by replacing SELECT^UHFETCH with 
		   Db.select method to fetch the records from hist table. 
		   Based on the transaction flag pcfl9 for the transaction 
		   code, LPDTAMT is set. 
	
	03/19/07 - PUTTASWH - CR 24945
		   Removed TOTVATDUE section since this is not required as
		   it is a summation of columns in LN table as mentioned in the 
		   revised PO and it doesn't invoke this section.  
		   
	03/10/07 - PUTTASWH - CR 24945
		   Added the section TOTVATDUE to calculate the Total VAT Due
		   Amount. 
		   
	01/05/07 - MBUIM - CR 24732
		   Modified XLN28 section to pass in ln and ttx objects in call
		   to P^LNPO2

	10/10/06 - KELLYP - CR 23268
		   Modified the PROVPCT section to use the roundDec method
		   instead of the roundCur method when rounding the Provision
		   Percentage return value (LN.PROVPCT).  This fixes a problem
		   in Oracle environments where the Provision Percentage 
		   calculation always returned a zero value because the system
		   was justifying the value and adding a leading space for
		   whole digit percentages (e.g., 6.5% returned as " 6.50" but
		   should have been "6.50000").

	09/13/06 - KELLYP - CR 23056
		   Modified the PDS section to prevent a SQLFAIL error from
		   occurring due to the LNPDS2.TABLE value not being quoted.

	05/18/06 - GIRIDHAL - CR 21207
	  	   Added new sections AGBAL, AGBALQ, AGBALH, AGBALY, AGDAYS,
	  	   AGDAYSQ, AGDAYH, AGDAYSY used to implement BASEL II
	  	   
	05/18/06 - TITOVE - CR 21315
		   Modified ADJACR3 by making EFD parameter not required and
		   setting it to cuvar.tjd if it is not defined.
		   Modified PROVPCT and PROVBAL sections to instantiate ACN 
		   object in PROVPCT instead of PROVBAL, to prevent optimizer
		   from setting it to a string of values rather than a pointer
		   to vobj array. Brought these sections up to standards.

	05/16/06 - SPR - CR 21034
		   Removed the getRow method in PLDGCTOT section and changed
		   M code to PSL standards.
		
	04/26/06 - DESHPANDE - CR 20975
		   Modified DLCO section to set DLCO to last MCHP record.
		   
	04/14/06 - ArpaVC - CR 20372
		   Modified PLDGMDT function to retrieve deposit maturity
		   dates using the collateral pledged account number instead
		   of the loan account number.
		   
	04/05/06 - ArpaVC - CR 20568
		   Modified PLDGCRLMT function to call into PLGDAMT
		   function to compute pledged amount and then convert.  This
		   will consider pledge amounts for percentage as well as fixed amounts.
		   
	02/17/06 - TELIV - CR 19573
		   Modifed section MINRATE, to correctly pick the DEP account, instead of LN 
		   while fetching the Max Differential IRN
	
	01/05/06 - SmithCD - CR 18783
		   Made remainder of functions public to cut down on warnings 
		   in elements that reference them. Removed old revision 
		   history.
	
	08/02/05 - KUMARB - CR16684
		   Modified section COMDUE, DAYSDELQ, DOLDEL, changed the 
		   table name LNLCOM to LN in Db.select

        07/27/05 - SkariahV- CR16679
	           Removed #OPTIMIZE directive.
	           
	04/19/05 - KinI - 15524
		   Modified IBPY section to not accept/pass SCHSEQ.

	04/05/05 - KinI - 14385
		   Modified LTVC section to return result of extrinsic
		   $$LTVC^LNCO2 function.

	05/05/04 - RussellDS - CR9592
		   Added $$FBP.
	
	02/19/04 - VERTLIBA - CR 8448
		   Modified XLN21(CID) to use Order By "RSEQ DESC" instead
		   of "RSEQ " in the ResultSet. 
		   The extra space is causing a compile problem.
		    
	01/15/04 - RussellDS - CR 7514
	  	   Modified NOTES section to eliminate use of table
	  	   NOTESACN (obsoleted) and replace with table NOTES.
	
	01/06/04 - RussellDS - CR7514
		   Modified XLNBLP01 to replace use of table PAS2 (obsoleted)
		   with table LNPAS2.

	-------------------------------------------------------------------
	*/

	quit


public NOTES(CID) // return [LN]NOTES
	
	/*
	The function is used to compute [LN]NOTES field
 
	ARGUMENTS:
		. CID  Account Number  		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$  Account Notes on File Flag /TYP=L
 
	EXAMPLE:
		W $$NOTES^LNCDI(100)
	*/
 
	new data

	type ResultSet rs=Db.select("CID,NUM","NOTES","FILE='ACN' AND CID=:CID") 
	if rs.isEmpty() set data=""
	else  set data=rs.next(),data=rs.getRow()
	 
	quit $S((data'=""):1,1:0)

 
public DELDOL(XCID) // return [LNXDLR]DELDOL

	/*
	The function is used to compute [LNXDLR]DELDOL field
 
	ARGUMENTS:
		. XCID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$  Dollars Delinquent	/TYP=$
 
	EXAMPLE:
		W $$DELDOL^LNCDI(5)
	*/


	new DELDOL,TDUE

	set TDUE=Db.getOneRow("TDUE","LN","XCID")
	set DELDOL=$S(TDUE>0:TDUE,1:0)

	quit DELDOL


public	GTDP(CID) //Return grand total for all delinquent periods

	/*
	The function is used to compute [LN]GTDP field
 
	ARGUMENTS:
		. CID  Account Number	/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$  grand total for all delinquent periods including late and
		miscellaneous charge	/TYP=$
 
	EXAMPLE:
		W $$GTDP^LNCDI(5)
	*/
 
	new data,GTDP	
 
	set GTDP=0
 
	type ResultSet rs=Db.select("DPTO1,DPTO2,DPTO3,DPTO4,DPTO5,DPTO6,DPTO7,LCHG,MCND,UNAPF","LN","CID=:CID") 
	if rs.isEmpty() quit GTDP
	set data=rs.next(),data=rs.getRow()

	for I=1:1:10 set GTDP=GTDP+$P(data,$C(9),I)

	quit GTDP


public NDDEL(XCID,EFD) //  return [LNXDLR]NDDEL

	/*
	The function is used to compute [LNXDLR]NDDEL field
 
	ARGUMENTS:
		. XCID  Account Number		/TYP=N/REQ/MECH=VAL
		. EFD   Effective Date		/TYP=D/MECH=VAL
 
	RETURNS:
		. $$  Number Days Delinquent	/TYP=N
 
	EXAMPLE:
		W $$NDDEL^LNCDI(5,^CUVAR(2))
	*/


	new DIST1ND,NDDEL

	set DIST1ND=Db.getOneRow("DIST1ND","LN","XCID")
	set NDDEL=$S((DIST1ND-EFD)<0:(EFD-DIST1ND),1:0)

	quit NDDEL


public INBAL1(XCID,XSLCD,XPL) // return [LNPP6]INBAL

	/*
	The function is used to compute [LNPP6]INBAL field
 
	ARGUMENTS:
		. XCID  Account Number	/TYP=N/REQ/MECH=VAL
		. XSLCD Seller Code	/TYP=T/REQ/MECH=VAL
		. XPL   Pool ID		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$  Investor Balance  /TYP=$
 
	EXAMPLE:
		$$INBAL1^LNCDI(6008,'ABC',1)
	*/


	new BAL,PP,INBAL 

	if ($G(XSLCD)="")!($G(XPL)="")!(XSLCD="") quit 0
	set BAL=Db.getOneRow("BAL","LN","XCID")
	set PP=Db.getOneRow("PP","LNPP2","XSLCD,XPL")
	set INBAL=BAL*PP/100

	quit INBAL

 
public AMT4SALE(SBAL,CONTRA,SOLD,INCD,PL) // [LNLS4]SOLDCMP

	/*
	The function is used to compute [LNLS4]SOLDCMP field
 
	ARGUMENTS:
		. SBAL    Account Balance At Sale			/TYP=$/REQ/MECH=VAL
		. CONTRA  Contra Account				/TYP=N/REQ/MECH=VAL
		. SOLD    Amount Sold - Contra Account Processing	/TYP=$/REQ/MECH=VAL
		. INCD    Investor Code					/TYP=N/REQ/MECH=VAL
		. PL     Pool Number					/TYP=T/REQ/MECH=VAL
 
	RETURNS:
		. $$  Loan Amount to be Sold  /TYP=$
 
	EXAMPLE:
 
		$$AMT4SALE^LNCDI(400,,,1,100)
		$$AMT4SALE^LNCDI([LNLS4]SBAL,[LNLS4]CONTRA,[LNLS4]SOLD,[LNLS4]INCD,[LNLS4]PL)
	*/


	new PP,AMT4SALE

	set PP=Db.getOneRow("PP","LNLS2","INCD,PL")
	if CONTRA set AMT4SALE=SOLD
	else  set AMT4SALE=PP*SBAL/100

	quit AMT4SALE




public PPCMP(XPL,XINCD,XCID,XPSEQ) // return [LNLS6]PPCMP

	/*
	The function is used to compute [LNPP6]PPCMP field
 
	ARGUMENTS:
		. XPL   Pool ID			/TYP=N/REQ/MECH=VAL
		. XINCD Investor Code		/TYP=N/REQ/MECH=VAL
		. XCID  Account Number		/TYP=N/REQ/MECH=VAL
		. XPSEQ Sequence Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$  Percent Sold		/TYP=N
 
	EXAMPLE:
		$$PPCMP^LNCDI(3,12,4,1)
	*/

	new OPS,PICM,PP,PPCMP

	set data=Db.getOneRow("PICM,PP","LNLS2","XINCD,XPL")
	set PICM=$P(data,$C(9),1) 
	set PP=$P(data,$C(9),2)
	set OPS=Db.getOneRow("OPS","LNLS6B","XCID,XPSEQ")
	set PPCMP=$S(PICM=6:OPS,1:PP)

	quit PPCMP


public ACTIVE(XCID,XINCD,XPL,RFPF) //  return [LNLS6]ACTIVE

	/*
	The function is used to compute [LNPP6]ACTIVE field
 
	ARGUMENTS:
		. XCID  Account Number		/TYP=N/REQ/MECH=VAL
		. XINCD Investor Code		/TYP=N/REQ/MECH=VAL
		. XPL   Pool ID			/TYP=N/REQ/MECH=VAL
		. RFPF  Marked Inactive Flag	/TYP=L/REQ/MECH=VAL
 
	RETURNS:
		. $$  Active Account Flag  /TYP=L
 
	EXAMPLE:
		$$ACTIVE^LNCDI(3,12,4,0)
	*/

	new STAT,DTC,REMLD,data,ACTIVE

	set data=Db.getOneRow("STAT,DTC","LN","XCID")
	set STAT=$P(data,$C(9),1) set DTC=$P(data,$C(9),2)
	if (XINCD="")!(XPL="") set REMLD=""
	else  set REMLD=Db.getOneRow("REMLD","LNLS2","XINCD,XPL")
	set ACTIVE=$S(STAT=4&(DTC'>REMLD):0,1:'$G(RFPF))

	quit ACTIVE


public	INVYLD(XCID,XPSEQ) // [LNLS6]INVYLD

	/*
	The function is used to compute [LNLS6]INVYLD field
 
	ARGUMENTS:
		. XCID  Account Number (must be sold loan) /TYP=N/REQ/MECH=VAL
		. XPSEQ Sequence Number			   /TYP=N/
 
	RETURNS:
		. $$  Investor's Yield   /TYP=$
 
	EXAMPLE:
		$$INVYLD^LNCDI(800011187,1)
	*/

	if (XCID="")!(XPSEQ="") quit ""
 
	// Loans sold account level data
	if 'Db.isDefined("LNLS6","XCID,XPSEQ") quit ""
	new data,INCD,PL,PASSTHRU,MAXYLD,MINYLD,PRNDM,PRNDF,OPTR
	set data=Db.getOneRow("INCD,PL,PASSTHRU,MAXYLD,MINYLD,PRNDM,PRNDF,OPTR","LNLS6","XCID,XPSEQ")
	set INCD=$p(data,$c(9),1)
	set PL=$p(data,$c(9),2)
	set PASSTHRU=$p(data,$c(9),3)
	set MAXYLD=$p(data,$c(9),4)
	set MINYLD=$p(data,$c(9),5)
	set PRNDM=$p(data,$c(9),6)
	set PRNDF=$p(data,$c(9),7)
	set OPTR=$p(data,$c(9),8)

	// Return override pass-through-rate if it exists
	if $g(OPTR) quit OPTR
 
	// Return investor yield if it exists
	new data1,YIELD,FEEP,REMND
	set data1=Db.getOneRow("YIELD,FEEP,REMND","LNLS2","INCD,PL")
	set YIELD=$p(data1,$c(9),1) 
	set FEEP=$p(data1,$c(9),2) 
	set REMND=$p(data1,$c(9),3)
	if $g(YIELD) quit YIELD
 
	// Otherwise return pass-through-rate (account rate less service fee %)
	new data2,IRN,TREXD,TRATE
	set data2=Db.getOneRow("IRN,TREXD,TRATE","LN","XCID")
	set IRN=$p(data2,$C(9),1) 
	set TREXD=$p(data2,$C(9),2) 
	set TRATE=$p(data2,$C(9),3)
	if TREXD>$s($g(PLRPT):$g(PLRPT),1:REMND) set IRN=TRATE
	if $g(FEEP) quit $g(IRN)-$g(FEEP)

	// Return Pass-Through Margin plus IRN if Pass-Through exists
	new rate
	if $g(PASSTHRU) do {
		set rate=IRN+PASSTHRU
		if MINYLD'="",rate<MINYLD set rate=MINYLD
		if MAXYLD'="",rate>MAXYLD set rate=MAXYLD
		
		// If rounding method and rounding factor exist - round
		if PRNDM'="",PRNDF'="",PRNDM'=0 do {
			new up,down
			set up=((rate\PRNDF)*(PRNDF))+(PRNDF)
			set down=(rate\PRNDF)*(PRNDF)

			// prndm from table STBLPRNDM
			if PRNDM=2 set rate=up quit	
			if PRNDM=3 set rate=down quit
			if PRNDM=1 set rate=$s((rate-down)>(up-rate):up,1:down)
			}
		}
	if $g(PASSTHRU) quit rate
	
	// Return loan rate if others don't exist
	quit $g(IRN)


public	GAINLOSS(XCID,XPSEQ) // [LNLS6]INVYLD
 
        /*
        The function is used to compute [LNLS6]GAINLOSS field
 
        ARGUMENTS:
                . XCID  Account Number (must be sold loan) /TYP=N/REQ/MECH=VAL
                . XPSEQ Sequence Number                    /TYP=N/
 
        RETURNS:
                . $$  Investor's Gain/Loss   /TYP=$
 
        EXAMPLE:
                $$INVYLD^LNCDI(800011187,1)
        */
	 
        if (XCID="")!(XPSEQ="") quit ""

	new INVYLD
	set INVYLD=$$INVYLD^LNCDI(XCID,XPSEQ)
 
        // Loans sold account level data
	if 'Db.isDefined("LNLS6","XCID,XPSEQ") quit ""
	new data,INCD,PL,PLRIC,PLRIR
        set data=Db.getOneRow("INCD,PL,PLRIC,PLRIR","LNLS6","XCID,XPSEQ")
        set INCD=$p(data,$c(9),1)
	set PL=$p(data,$c(9),2)
        set PLRIC=$p(data,$c(9),3)
        set PLRIR=$p(data,$c(9),4)
      
        // Loans sold pool level data
        new data1,PP,REMND
        set data1=Db.getOneRow("PP,REMND","LNLS2","INCD,PL")
        set PP=$p(data1,$c(9),1)
	set REMND=$p(data1,$c(9),2)
            
 
        // Loan table, Interest Rate
        new data2,IRN,TREXD,TRATE
        set data2=Db.getOneRow("IRN,TREXD,TRATE","LN","XCID")
        set IRN=$p(data2,$C(9),1)
        set TREXD=$p(data2,$C(9),2)
        set TRATE=$p(data2,$C(9),3)
        if TREXD>$s($g(PLRPT):$g(PLRPT),1:REMND) set IRN=TRATE
        if 'IRN quit ""
        
	/*
	 Calculate gain or loss
		Interest collected * investor's yield divided by the loan rate,
	        times the investor's percentage, minus the interest remitted,
		then round to 2 decimal positions
	*/

	new gain
	set gain=(PLRIC*INVYLD/IRN*PP/100)-PLRIR
	set gain=$fn(gain,"",2)
	quit gain


public INBAL(CCID,XCID,XINCD,XPL) // return [LNLS6]INBAL

	/*
	The function is used to compute [LNPP6]INBAL field
 
	ARGUMENTS:
		. CCID  Contra Account Number	/TYP=N/REQ/MECH=VAL
		. XCID  Account Number		/TYP=N/REQ/MECH=VAL
		. XINCD Investor Code		/TYP=N/REQ/MECH=VAL
		. XPL   Pool ID			/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Investor Balance		/TYP=$
 
	EXAMPLE:
		$$INBAL^LNCDI(800015728,800012369,'NEG3',1)
	*/

	if (XCID="")!(XINCD="")!(XPL="") quit 0

	new data,ARUF,BAL,UDBAL,PP,BAL1,BAL2,INBAL

	set data=Db.getOneRow("ARUF,BAL,UDBAL","LN","XCID")
	set ARUF=$P(data,$C(9),1) 
	set BAL=$P(data,$C(9),2) 
	set UDBAL=$P(data,$C(9),3) 
	set PP=$P(data,$C(9),4)
	if CCID'="" set BAL1=Db.getOneRow("BAL","LN","CCID")
	set PP=Db.getOneRow("PP","LNLS2","XINCD,XPL")
	set BAL2=($S('ARUF:+BAL,1:BAL-UDBAL))
	set INBAL=$S($L(CCID):BAL1,1:(BAL2*PP/100))

	quit INBAL


public NABCHIS(XINCD,XPL,INPUT)

	/*
	The function is used to compute [LNLS6]NABCHIS field
 
	ARGUMENTS:
		. XINCD Investor Code	/TYP=N/REQ/MECH=VAL
		. XPL   Pool ID		/TYP=N/REQ/MECH=VAL
		. INPUT			/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. $$  Neg Am Bal Change /TYP=$
 
		[LNLS6]NABCHIS
		[LNLS6]PLRAPIS
		[LNLS6]PLRCDIS
		[LNLS6]PLRFCIS
		[LNLS6]PLRICIS
		[LNLS6]PLROBIS
		[LNLS6]PLROCIS
		[LNLS6]PLRPBIS
		[LNLS6]PLRPCIS
		[LNLS6]PLRRA
		[LNLS6]PLRRPIS
		[LNLS6]PLRSBIS
		[LNLS6]PLRSCIS
		[LNLS6]RFPLBIS
 
	EXAMPLE:
		$$NABCHIS^LNCDI(12,3,0)
	*/

	new PP,RESULT

	set PP=Db.getOneRow("PP","LNLS2","XINCD,XPL")
	set RESULT=INPUT*PP/100

	quit RESULT

 
public PLFSA(PLRCA,XCID,INVYLD) // return [LNLS6]PLFSA

	/*
	The function is used to compute [LNLS6]PLFSA field
 
	ARGUMENTS:
		. PLRCA   Last Remit - Curtailment Prin Adjustment	/TYP=$/REQ/MECH=VAL
		. XCID    Loan Sold Account				/TYP=N/REQ/MECH=VAL
		. INVYLD  Investor's Yield				/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. $$  Service Fee on Schedule Adjustments		/TYP=$
 
	EXAMPLE:
		$$PLFSA^LNCDI(0,800012369,10)
	*/

	new IRN,PLFSA

	set IRN=Db.getOneRow("IRN","LN","XCID")
	if (IRN'=""),(IRN'=0) set PLFSA=(PLRCA*(IRN-INVYLD)/IRN)
	else  set PLFSA=""

	quit PLFSA

 
public POBPRPF(XCID,XINCD,XPL) // return [LNLS6]POBPRPF

	/*
	The function is used to compute [LNPP6]POBPRPF field
 
	ARGUMENTS:
		. XCID  Account Number				/TYP=N/REQ/MECH=VAL
		. XINCD Investor Code				/TYP=N/REQ/MECH=VAL
		. XPL   Pool ID					/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Paid Off Before Prev Remit Period Flag	/TYP=L
 
	EXAMPLE:
		$$POBPRPF^LNCDI(4,12,3)
	*/

	// Determines whether (1) or not (0) loan was paid off prior to the
	// previous remittance period, considering:
 
	// Account is not closed
	if (XCID="")!(XINCD="")!(XPL="") quit ""
	new data,DTCL,RFRE,LRDT,POGD
	set DTCL=Db.getOneRow("DTC","LN","XCID")
	if DTCL="" quit 0
	set data=Db.getOneRow("REMFRE,REMLD,POGD","LNLS2","XINCD,XPL")
	set RFRE=$P(data,$C(9),1) set LRDT=$P(data,$C(9),2) set POGD=$P(data,$C(9),3)
 
	// Find first remittance date prior to last remittance date
	set PRDT=$$NJD^UFRE(LRDT,"-"_RFRE) if ER quit 0
 
	// Adjust previous remittance date if grace date processing in place
	if POGD do {
		new ER,MON,YR
		set ER=0
 
		set MON=$$MON^SCADAT(PRDT,1)
		set YR=$$YEAR^SCADAT(PRDT,1)
 
		for POGD=POGD:-1 set PRDT=$$DSJD^SCADAT(MON_"/"_POGD_"/"_YR) if 'ER quit 
		}
 
	if DTCL'>PRDT quit 1

	quit 0


public	AMOMDT(CID,TRM,PTRM,JD,FRE) // Amorization maturity date

	/*
	The function is used to compute [LNPP6]AMOMDT field
 
	ARGUMENTS:
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
		. TRM  Account Term			/TYP=T/REQ/MECH=VAL
		. PTRM Payment Term			/TYP=T/REQ/MECH=VAL
		. JD   Date of First Payment		/TYP=D/REQ/MECH=VAL
		. FRE  Distribution 1 Frequency		/TYP=D/REQ/MECH=VAL
 
	RETURNS:
		. $$   Amortization Maturity Date	/TYP=D
 
	EXAMPLE:
		$$AMOMDT^LNCDI([LN]CID,[LN]TRM,[LN]PTRM,[LN]DFP,[LN]DIST1FRE)
	*/

	new NJD,MDT,ODT

	if '$L(TRM) set TRM=PTRM
	set FRE="-"_FRE
	set NJD=$$NJD^UFRE(JD,FRE) if ER quit "" // 09/30/99 - SIVCHUKA
	set ODT=NJD do ^UMDT set AMOMDT=MDT

	quit AMOMDT


public AVL(BUD,ACT,ADD,CID) // return [LNENT]AVL

	/*
	The function is used to compute [LNENT]AVL field
 
	ARGUMENTS:
		. BUD  Projected				/TYP=$/REQ/MECH=VAL
		. ACT  Actual					/TYP=$/REQ/MECH=VAL
		. ADD  Add Back					/TYP=$/REQ/MECH=VAL
		. CID  Account Number				/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Balance Available for Disbursement	/TYP=$
 
	EXAMPLE:
		$$AVL^LNCDI([LNENT]BUD,[LNENT]ACT,[LNENT]ADD,[LNENT]CID)
	*/

	new AVL,REVF

	set REVF=Db.getOneRow("REVF","LN","CID")
	set AVL=(BUD-ACT+$S(REVF:ADD,1:0))

	quit AVL


public AUADJ(CID) // return [LN]AUADJ

	/*
	The function is used to compute [LN]AUADJ field
 
	ARGUMENTS:
		. CID  Account Number				/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Auto Escrow Update - Adjustment Amount	/TYP=$
 
	EXAMPLE:
		$$AUADJ^LNCDI(1234)
	*/
 
	quit $$AUADJ^LNAEU(CID)


public AVLBAL(CID) // return [LN]AVLBAL

	/*
	The function is used to compute [LN]AVLBAL field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Available Balance	/TYP=$
 
	EXAMPLE:
	 	$$AVLBAL^LNCDI(1234)
	*/

	new AVLBAL 

	do AVLBAL^LNCO(,CID)

	quit AVLBAL


public BALPTYE(CID) // return [LN]BALPTYE
 
	/*
	The function is used to compute [LN]BALPTYE field
 
	ARGUMENTS:
		 . CID  Account Number	 /TYP=N/REQ/MECH=VAL
 	RETURNS:
		 . $$   Balance - prior tax year-end   /TYP=$
 	
	EXAMPLE:
		 $$BALPTYE^LNCDI(1234)
	
	*/	
	
	new %DS,TD,BALPTYE,TAXE,EPTY
 
	set TAXE=$$EOTY^SCADAT(%SystemDate,1)
	set EPTY=$P($$DAT^%ZM(TAXE,"MM/DD/YEAR"),"/",3)-1
	set %DS=$$DAT^%ZM(TAXE,"MM/DD/")_EPTY set %JD=$$^SCAJD(%DS) quit:ER  set TD=%JD

	type RecordHIST0 hist0 = Db.getRecord("HIST0", "CID=:CID,JD=TD", 1)
	
	quit +hist0.bal	 


public	BALPYE(CID) // return [LN]BALPYE

	/*      
	The function is used to compute [LN]BALPYE field
 
	ARGUMENTS:
		. CID  Account Number	 /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Balance - prior year   /TYP=$
 
	EXAMPLE:
		  $$BALPYE^LNCDI(1234)
	*/       
	
	new %DS,%JD,BALPYE,X,MM

	set FINE=$$EOFY^SCADAT(%SystemDate,1)
	set FEPY=$P($$DAT^%ZM(FINE,"MM/DD/YEAR"),"/",3)-1
	if '$D(%PYE) new %PYE set %DS=$$DAT^%ZM(FINE,"MM/DD/")_FEPY set %JD=$$^SCAJD(%DS) quit:ER  set %PYE=%JD

	type RecordHIST0 hist0 = Db.getRecord("HIST0", "CID=:CID,JD=:%PYE", 1)
	
	quit +hist0.bal
 

public	BRREG(CID,BOO) // Shell script for computed data item BRREG
 
	quit $$BRREG^DEPCDI(BOO)
 
		
public	CIFEQV(CID,ACN,BSE,AMT,SEC) // Value of account in customer's (CIF) base currency

	quit $$CIFEQV^DEPCDI(CID,ACN,BSE,AMT,SEC)

 
public DLCO(CID,COA) // [LN]DLCO

	/*
	The function is used to compute [LN]DLCO field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
		. COA  Charge-Off Amount	/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. $$   Date of Last Chargeoff   /TYP=D
 
	EXAMPLE:
		$$DLCO^LNCDI(1234,100)
	*/

	new DLCO

	set DLCO="" 
	if 'COA quit DLCO
	
	type ResultSet rs = Db.select("TJD,TAMT", "HIST", "CID=:CID AND ITC1=1 AND ITC6<>1 AND ITC12<>1", "TSEQ DESC")
	
	while rs.next() do {
		
		if 'rs.getCol("TAMT").piece("#", 10).isNull(), DLCO < rs.getCol("TJD") set DLCO = rs.getCol("TJD")
	}

	quit DLCO


public EBBAL(CID) // return [LN]EBBAL

	/*
	The function is used to compute [LN]EBBAL field
 
	ARGUMENTS:
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Estimated Balloon Balance	/TYP=$
 
	EXAMPLE:
		$$EBBAL^LNCDI(1234)
	*/ 

	quit $$EBBAL^LNCO(CID)

 
public ESCCP(CID) // return [LN]ESCCP

	/*
	The function is used to compute [LN]ESCCP field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Current Escrow Payment	/TYP=$
 
	EXAMPLE:
		$$ESCCP^LNCDI(1234)
	*/


	new data,B,CURRAMT,ESCCP,X 

	type ResultSet rs=Db.select("PE01PA,PE02PA,PE03PA,PE04PA,PE05PA,PE06PA,PE07PA,PE08PA,PE09PA,PE10PA,PE11PA,PE12PA,PE13PA,PE14PA,PE15PA,PE16PA,PE17PA,PE18PA,PE19PA,PE20PA","LNBIL0","CID=:CID") 
	if rs.isEmpty() quit 0
	set data=rs.next(),data=rs.getRow()

 
	set ESCCP=0
	for I=1:1:20 set B=$P(data,$C(9),I) if B do {
		set CURRAMT=Db.getOneRow("CURRAMT","DEP","B")
		set ESCCP=ESCCP+CURRAMT
		}

	quit ESCCP


public FPM(CID) // return [LN]FPM

	/*
	The function is used to compute [LN]FPM field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Full Payments Made	/TYP=N
 
	EXAMPLE:
		$$FPM^LNCDI(1234)
	*/
 
	new FPM,I,J,%X,%P,M,X1,X2

	set X1=Db.getOneRow("FPC01,FPC02,FPC03,FPC04,FPC05,FPC06,FPC07,FPC08,FPC09,FPC10,FPC11,FPC12","LN","CID")
 	set A=+$$DAT^%ZM(%SystemDate,"MM/DD/YY") 
	set FPM=0 
	set %P=27 
	set M=1 
	for I=1:1 quit:I>A  set FPM=FPM+$P(X1,$C(9),I)
	set X2=Db.getOneRow("FPP12,FPP11,FPP10,FPP09,FPP08,FPP07,FPP06,FPP05,FPP04,FPP03,FPP02,FPP01","LN","CID")
	for J=13:-1:I set FPM=FPM+$P(X2,$C(9),M) set M=M+1

	quit FPM

 
public	FSID(CID,ACN) // Primary account financial statement ID

	/*
	The function is used to compute [LN]FSID field
 
	ARGUMENTS:
		. CID  Account Number				/TYP=N/REQ/MECH=VAL
		. ACN  Customer Number				/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Primary Borrower Financial Statement ID	/TYP=N
 
	EXAMPLE:
		$$FSID^LNCDI(1234,1)
	*/

	new FSID

	if $G(CID)=""!($G(ACN)="") quit ""
 
	type ResultSet rs=Db.select("FSID","RELCIF","CID=:CID") 
	if rs.isEmpty() quit ""
	set FSID=rs.next(),FSID=rs.getRow()

 
	quit FSID


public	LTVC(CID) // Shell script for computed data item LTVC

	/*
	The function is used to compute LN.LTVC field
 
	ARGUMENTS:
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
	RETURNS:
		. $$   Loan to Value Ratio - Current	/TYP=N
	EXAMPLE:
		$$LTVC^LNCDI(1234)
	*/

	quit $$LTVC^LNCO2(CID)


public	MCHG(CID) // Shell script for computed data item MCHG

	/*
	The function is used to compute [LN]MCHG field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Miscellaneous Charge Due /TYP=$
 
	EXAMPLE:
		$$MCHG^LNCDI(1234)
	*/
 
	type Number MCHG = 0
	
	type ResultSet rs = Db.select("SUM(FEEREM)", "LNFEE", "CID=:CID")
 
	if rs.next() set MCHG = rs.getCol(1)
	
	quit MCHG


public	MCND(CID) // Shell script for computed data item MCND

	/*
	The function is used to compute [LN]MCND field
 
	ARGUMENTS:
		. CID  Account Number				/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Misc Charges Outstanding - Not Due	/TYP=$
 
	EXAMPLE:
		$$MCND^LNCDI(1234)
	*/

	quit $$MCND^LNCO3(,,CID)


public	MCOL(CID) // Multiple loan indicator - Loan file

	/*
	The function is used to compute [LN]MCOL field
 
	ARGUMENTS:
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$  Multiple Collateral Indicator	/TYP=L
 
	EXAMPLE:
		$$MCOL^LNCDI(1234)
	*/

	new A,A1
 
	type ResultSet rs=Db.select("COLL","LNCOL","CID=:CID","COLL DESC") 
	if rs.isEmpty() quit 0
	set A=rs.next(),A=rs.getRow()

	type ResultSet rs1=Db.select("COLL","LNCOL","CID=:CID AND COLL<:A","COLL DESC")
	if rs1.isEmpty() if A quit 0
	set A1=rs1.next(),A1=rs1.getRow()

 
	if A1 quit 1

	quit 0


public	OPUID(CID) // Shell script for computed data item OPUID

	/*
	The function is used to compute [LN]OPUID field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$  Opened Account - User ID	/TYP=T
 
	EXAMPLE:
		$$OPUID^LNCDI(1234)
	*/

	quit $$OPUID^LNCO(CID)


public	PCMVAL(PCM) // PCM Value

	/*
	The function is used to compute [LN]PCMVAL field
 
	ARGUMENTS:
		. PCM  Payment Calculation Method	/TYP=T/REQ/MECH=VAL
 
	RETURNS:
		. $$  PCM Value				/TYP=T
 
	EXAMPLE:
		$$PCMVAL^LNCDI(15)
	*/

	new PCMP

	if $G(PCM)="" quit ""
	set PCMP=Db.getOneRow("PCMP","STBLPCM","PCM")

	quit PCMP


public	PDS(Number CID,Number STAT,Number OSEQ,Number SCHSEQ) // Payment delinquency status

	/*
	The function is used to compute [LN]PDS field
 
	ARGUMENTS:
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
	 	. STAT Account Status			/TYP=N/REQ/MECH=VAL
		. OSEQ Oldest@Bill #			/TYP=N/REQ/MECH=VAL
		. SCHSEQ Scheduled@Bill Sequence	/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$  Payment Delinquency Status	/TYP=T
 
	EXAMPLE:
		$$PDS^LNCDI([LN]CID,[LN]STAT,[LN]OSEQ,[LN]SCHSEQ)
	*/

	type String A,PDS

	// Close
	if STAT=4 set PDS=$$^MSG(7093) quit PDS
	set A=OSEQ-SCHSEQ-1.5
 
	type ResultSet rs=Db.select("DES","LNPDS2","TABLE='1' AND UPLIMIT>:A")
	if rs.isEmpty() quit ""
	if rs.next() set PDS=rs.getCol("DES")
 
	quit PDS
 

public	PRMET(CID,BMET,PTF,CBMET,PBI) // Payment method

	/*
	The function is used to compute [LN]PRMET field
 
	ARGUMENTS:
		. CID   Account Number			/TYP=N/REQ/MECH=VAL
		. BMET  Bill Print Flag			/TYP=L/REQ/MECH=VAL
		. PTF   Preauthorized Transfer Flag	/TYP=L/REQ/MECH=VAL
		. CBMET Coupon Book Production Method	/TYP=N/REQ/MECH=VAL
		. PBI   Passbook Flag			/TYP=L/REQ/MECH=VAL
 
	RETURNS:
	 	. $$  Payment Processing Method		/TYP=T
 
	EXAMPLE:
		$$PRMET^LNCDI([LN]CID,[LN]BMET,[LN]PTF,[LN]CBMET,[LN]PBI)
	*/

 	new PRMET

	set PRMET=""
	if BMET set PRMET=PRMET_"B"	    // bill
	if PTF set PRMET=PRMET_"T"	     // PAT
	if CBMET set PRMET=PRMET_"C"	   // coupon
	if PBI set PRMET=PRMET_"P"	     // passbook
	if PRMET="" set PRMET="$"

	quit PRMET

 
public	PRNRPD(ARUF,BAL,CRLMT,TDR,UDBAL) // Principal repaid

	/*
	The function is used to compute [LN]PRNRPD field
 
	ARGUMENTS:
		. ARUF  Advances to Reduce Undisbursed Flag	/TYP=L/REQ/MECH=VAL
		. BAL   Ledger Balance				/TYP=$/REQ/MECH=VAL
		. CRLMT Credit Limit - Current			/TYP=$/REQ/MECH=VAL
		. TDR  Total Disbursement Amount		/TYP=$/REQ/MECH=VAL
		. UDBAL Total Disbursement Amount		/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. $$   Principal Repaid				/TYP=$
 
	EXAMPLE:
		$$PRNRPD^LNCDI([LN]ARUF,[LN]BAL,[LN]CRLMT,[LN]TDR,[LN]UDBAL)
	*/

	new BALANCE,DISBURSD

	set BALANCE=BAL
	if ARUF set BALANCE=BAL-UDBAL
	set DISBURSD=TDR
	if DISBURSD>CRLMT set DISBURSD=CRLMT
	set PRNRPD=DISBURSD-BALANCE
	if PRNRPD<0 set PRNRPD=0

	quit PRNRPD


public	SCHPMT(CID) // Shell script for computed data item SCHPMT

	/*
	The function is used to compute [LN]SCHPMT field
 
	ARGUMENTS:
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Payment - Next Scheduled Amount	/TYP=$
 
	EXAMPLE:
		$$SCHPMT^LNCDI(1234)
	*/

	new SCHPMT

	do SCHPMT^LNCO3(CID)

	quit SCHPMT

 
public	SYSEQV(CID,BSE,AMT) // Shell script for computed data item SYSEQV

	/*
	The function is used to compute [LN]SYSEQV field
 
	ARGUMENTS:
		. CID  Account Number				/TYP=N/REQ/MECH=VAL
		. BSE  Currency Code				/TYP=T/REQ/MECH=VAL
		. AMT  Ledger Balance				/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. $$  Equivalent Value in Bank's Base Currency	/TYP=$
 
	EXAMPLE:
		($$SYSEQV^LNCDI([LN]CID,[LN]CRCD,[LN]BAL))
	*/

	new SYSEQV

	quit $$SYSEQV^DEPCDI(CID,BSE,AMT)


public TLSEQ(Number CID)        // Last History Tran Sequence

	/*
	The function is used to compute [LN]TLSEQ field
 
	Arguments:
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
	*/

        quit Db.currVal("HIST","CID")
 

public TSEQ(Number CID) // Next History Trans Sequence

	/*
	The function is used to compute [LN]TSEQ field
 
	Arguments:
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
	*/

        quit Db.nextVal("HIST","CID")

 
public	UNMC(CID) // Shell script for computed data item UNMC

	/*
	The function is used to compute [LN]UNMC field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Uncollected Misc Charges	/TYP=$
 
	EXAMPLE:
		$$UNMC^LNCDI(1234)
	*/


	new UNMC

	quit $$UNMC^LNCO3(,CID)


public	XCF01(CID) // Shell script for computed data item XCF01

	/*
	The function is used to compute [LN]XCF01 field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Statement Info From CIF	/TYP=T
 
	EXAMPLE:
		$$XCF01^LNCDI(1234)
	*/

	quit $$XCF01^DEPCDI(CID)


public	XLN01(CID) // Shell script for computed data item XLN01

	/*
	The function is used to compute [LN]XLN01 field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Average Balance Cycle	/TYP=T
 
	EXAMPLE:
		$$XLN01^LNCDI(1234)
	*/

	new XLN01

	do ADBC1^UAVB1

	quit XLN01

 
public	XLN02(CID) // Shell script for computed data item XLN02

	/*
	The function is used to compute [LN]XLN02 field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Average Bal Prior Cycle	/TYP=T
 
	EXAMPLE:
		$$XLN02^LNCDI(1234)
	*/

	new XLN02

	do ADBC2^UAVB1

	quit XLN02

 
public	XLN03(CID) // Shell script for computed data item XLN03

	/*
	The function is used to compute [LN]XLN03 field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Average Bal Current Month	/TYP=T
 
	EXAMPLE:
		$$XLN03^LNCDI(1234)
	*/

	new XLN03

	do ADBM1^UAVB1

	quit XLN03

 
public	XLN04(CID) // Shell script for computed data item XLN04

	/*
	The function is used to compute [LN]XLN04 field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   Average Bal Prior Month	/TYP=T
 
	EXAMPLE:
		$$XLN04^LNCDI(1234)
	*/

	new XLN04

	do ADBM2^UAVB1

	quit XLN04


public	ADUBQ(CID)  // Shell script for computed data item XLN04
 
        /*
        The function is used to compute [LN]ADUBQ field
 
        ARGUMENTS:
                . CID  Account Number           /TYP=N/REQ/MECH=VAL
 
        RETURNS:
                . $$   Average Bal Prior Quarter  /TYP=T
 
        EXAMPLE:
                $$ADUBQ^LNCDI([LN]CID
        */
 
        new ADUBQ

        do ADBQ1^UAVB1
	set ADUBQ=$P(ADUBQ,"|",10)

        quit ADUBQ
 

public	XLN05(CID) // Shell script for computed data item XLN05

	/*
	The function is used to compute [LN]XLN05 field
 
	ARGUMENTS:
		. CID  Account Number	/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Com'l Comm't	/TYP=T
 
	EXAMPLE:
		$$XLN05^LNCDI(1234)
	*/

	new XLN05

	do C^LNCO2(CID)

	quit XLN05

 
public	XLN06(CID) // Shell script for computed data item XLN06

	/*
	The function is used to compute [LN]XLN06 field
 
	ARGUMENTS:
		. CID  Account Number   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Curr & Uncoll Amts /TYP=T
 
	EXAMPLE:
		$$XLN06^LNCDI(1234)
	*/
 
	new XLN06

	do U^LNCO(CID)

	quit XLN06

 
public	XLN07(CID) //Shell script for computed data item XLN07

	/*
	The function is used to compute [LN]XLN07 field
 
	ARGUMENTS:
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$  Delinquency Principal, Interest, Escrow and Feees Amounts
		for up to seven Delinquency Period	/TYP=T
 
	EXAMPLE:
		$$XLN07^LNCDI(1234)
	*/

	new XLN07

	do DLBTPC^LNCO(CID)

	quit XLN07

 
public	XLN08(CID) // Shell script for computed data item XLN08

	/*
	The function is used to compute [LN]XLN08 field
 
	ARGUMENTS:
		. CID  Account Number   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Last Primary Tran
 
	EXAMPLE:
		$$XLN08^LNCDI(1234,1)
	*/
 
	new XLN08

	do T^LNCO2(CID)

	quit XLN08


public	XLN09(CID) // Shell script for computed data item XLN09

	/*
	The function is used to compute [LN]XLN09
 
	ARGUMENTS:
		. CID  Account Number   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Payoff		/TYP=T
 
	EXAMPLE:
		$$XLN09^LNCDI(1234)
	*/ 
 
	new XLN09

	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	type RecordTTX ttx=Class.new("RecordTTX")

	do P^LNPO2(.ln,.ttx) if ER Q ""

	quit XLN09


XLN09EX(CID,PCE)	//Returns PCE piece of [LN]XLN09

	/*
	The function is used to extract data from [LN]XLN09 for computed
	payoff columns.

	ARGUMENTS:
		. CID  Account Number         /TYP=N/REQ/MECH=VAL
		. PCE  Piece Number           /TYP=N/REQ/MECH=VAL

	RETURNS:
		. $$ Payoff data              /TYP=T

	EXAMPLE:
		$$XLN09EX^LNCDI(90000012345,21)
	*/

        quit $P(($$XLN09(CID)),$C(124),PCE)



public	XLN10(CID) // Shell script for computed data item XLN10

	/*
	The function is used to compute [LN]XLN10
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Participation Sold Amounts	/TYP=T
 
	EXAMPLE:
		$$XLN10^LNCDI(1234)
	*/
 
	new XLN10

	do LS^LNCO(CID)

	quit XLN10


public	XLN11(CID,HIP) // Calculate Accident Ins Premium/Paid by Flag

	/*
	The function is used to compute [LN]XLN11
 
	ARGUMENTS:
		. CID  Account Number   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Accident Insurance /TYP=T
 
	EXAMPLE:
		$$XLN11^LNCDI(1234)
	*/
 
	if 'HIP quit ""

	new XLN11,IA

	set XLN11=""
	set IA=Db.getOneRow("AMT,PDBY","LNCYCINS","CID,'IH'")
	set $P(XLN11,"|",1)=$P(IA,$C(9),1)
	set $P(XLN11,"|",2)=$P(IA,$C(9),2)

	quit XLN11
 

public	XLN12(CID,LIP) // Calculate Life Ins Premium/Paid by Flag

	/*
	The function is used to compute [LN]XLN12
 
	ARGUMENTS:
		. CID  Account Number   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Life Insurance 	/TYP=T
 
	EXAMPLE:
		$$XLN12^LNCDI(1234)
	*/
	
	new XLN12,IL

	set XLN12=""
	
	if 'LIP quit XLN12
	
	set IL=Db.getOneRow("AMT,PDBY","LNCYCINS","CID,'IL'")
	set $P(XLN12,"|",1)=$P(IL,$C(9),1)
	set $P(XLN12,"|",2)=$P(IL,$C(9),2)

	quit XLN12


public	XLN13(CID,DIP) // Calculate Disability Ins Premium/Paid by Flag

	/*
	The function is used to compute [LN]XLN13
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Disability Insurance	/TYP=T
 
	EXAMPLE:
		$$XLN13^LNCDI(1234)
	*/

	new XLN13,ID

	set XLN13=""
	if 'DIP quit XLN13
	set ID=Db.getOneRow("AMT,PDBY","LNCYCINS","CID,'ID'")
	set $P(XLN13,"|",1)=$P(ID,$C(9),1)
	set $P(XLN13,"|",2)=$P(ID,$C(9),2)

	quit XLN13

 
public	XLN14(CID) // Shell script for computed data item XLN14

	/*
	The function is used to compute [LN]XLN14
 
	ARGUMENTS:
		. CID  Account Number   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Secondary Cif's 	/TYP=T
 
	EXAMPLE:
		$$XLN14^LNCDI(1234)
	*/
 
	new XLN14

	do SCIF^LNCO2(CID)

	quit XLN14

 
public	XLN15(CID) // Shell script for computed data item XLN15

	/*
	The function is used to compute [LN]XLN15
 
	ARGUMENTS:
	. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
	. $$ Secondary CIF Borrowers	/TYP=T
 
	EXAMPLE:
		$$XLN15^LNCDI(1234)
	*/

	new XLN15

	do SNAM^LNCO2(CID)

	quit XLN15

 
public	XLN16(CID,PFLG) // Shell script for computed data item XLN16

	/*
	The function is used to compute [LN]XLN16
 
	ARGUMENTS:
		. CID  Account Number   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Collateral Data	/TYP=T
 
	EXAMPLE:
		$$XLN16^LNCDI(1234)
	*/
 
	new X,XLN16

	do COLL^LNCO2(CID,.PFLG)

	quit XLN16

 
public	XLN18(CID) // Shell script for computed data item XLN18

	/*
	The function is used to compute [LN]XLN18
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Average Daily Bal Y-T-D	/TYP=T
 
 	EXAMPLE:
		$$XLN18^LNCDI(1234)
	*/
 
	new XLN18

	do ADBY1^UAVB1

	quit XLN18

 
public	XLN19(CID) // Shell script for computed data item XLN19

	/*
	The function is used to compute [LN]XLN19
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Average Daily Bal Prior Yr /TYP=T
 
	EXAMPLE:
		$$XLN19^LNCDI(1234)
	*/

	new XLN19

	do ADBP1^UAVB1

	quit XLN19


public	XLN20(CID) // Shell script for computed data item XLN20

	/*
	The function is used to compute [LN]XLN20
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Remitted Prior Year	/TYP=T
 
	EXAMPLE:
		$$XLN20^LNCDI(1234)
	*/
 
	new XLN20

	do RPY^LNCO2(CID)

	quit XLN20

 
public	XLN21(CID) // Compute Problem Loan Restructuring Data

	/*
	The function is used to compute [LN]XLN21
 
	ARGUMENTS:
		. CID  Account Number   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		.$$  Problem Loan Data	/TYP=T
 
	EXAMPLE:
		$$XLN21^LNCDI(1234)
	*/
 
	new data,x 

	type ResultSet rs=Db.select("PLTYP,PLRES","LNPL3A","CID=:CID","RSEQ DESC") 
	if rs.isEmpty() quit ""
	set data=rs.next(),data=rs.getRow()
 
	quit $TR(data,$C(9),"|")
 

public	XLN22(CID) // Shell script for computed data item XLN22

	/*
	The function is used to compute [LN]XLN22
 
	ARGUMENTS:
		. CID  Account Number				/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$   System Use - Earnings Analysis Info	/TYP=T
 
	EXAMPLE:
		$$XLN22^LNCDI(1234)
	*/

	new XLN22

	do CMP^PABOD

	quit XLN22

 
public	XLN23(CID) // Shell script for computed data item XLN23

	/*
	The function is used to compute [LN]XLN23
 
	ARGUMENTS:
		. CID  Account Number				/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ XLN23  Loan Budgeting Unassigned Value 	/TYP=T
 
	EXAMPLE:
		$$XLN23^LNCDI(1234)
	*/

	new XLN23

	do CMP^LNENT

	quit XLN23


public	XLN24(CID) // Shell script for computed data item XLN24

	/*
	The function is used to compute [LN]XLN24
 
	ARGUMENTS:
		. CID  Account Number				/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ XLN24   System Use - Asset Classifications	/TYP=T

	EXAMPLE:
		$$XLN24^LNCDI(1234)
	*/
 
	new XLN24

	do ^LNAC1(CID)

	quit XLN24

 
public	XLN25(CID) // Principal and interest lump payment amounts

	/*
	The function is used to compute [LN]XLN25
 
	ARGUMENTS:
		. CID  Account Number				/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ XLN25   System Use - Payment Lump Amounts	/TYP=T
 
	EXAMPLE:
		$$XLN25^LNCDI(1234)
	*/
 
	new data,A,B,C,XLN25

	set XLN25=""
 
	type ResultSet rs=Db.select("PE01EA,PE01LA,PE02EA,PE02LA,PE03EA,PE03LA,PE04EA,PE04LA,PE05EA,PE05LA,PE06EA,PE06LA,PE07EA,PE07LA,PE08EA,PE08LA,PE09EA,PE09LA,PE10EA,PE10LA,PE11EA,PE11LA,PE12EA,PE12LA,PE13EA,PE13LA,PE14EA,PE14LA,PE15EA,PE15LA,PE16EA,PE16LA,PE17EA,PE17LA,PE18EA,PE18LA,PE19EA,PE19LA,PE20EA,PE20LA","LNBIL0","CID=:CID") 
	if rs.isEmpty() quit ""
	set data=rs.next(),data=rs.getRow()

 
	for I=1:2 set C=$P(data,$C(9),I) quit:C=""  if (C="P"!(C="I")) do {
		set P=0 if C="I" set P=1
		set $P(XLN25,"|",P+1)=+$P(data,$C(9),I+1)
		}

	quit XLN25
 

public	XLN26(CID) // Shell script for computed data item XLN26

	/*
	The function is used to compute [LN]XLN26
	
	ARGUMENTS:
		. CID  Account Number				/TYP=N/REQ/MECH=VAL
	
	RETURNS:
		. $$ XLN26    System Use - First Primary Tran	/TYP=T
	
	EXAMPLE:
		$$XLN26^LNCDI(1234)
	*/

	new XLN26

	do F^LNCO2(CID)

	quit XLN26

	
public	XLN28(CID) // Shell script for computed data item XLN28

	/* 
	The function is used to compute [LN]XLN28
	
	ARGUMENTS:
		. CID  Account Number						/TYP=N/REQ/MECH=VAL
	
	RETURNS:
		. $$ XLN28		 System Use - Anticipated Payoff	/TYP=T
	
	EXAMPLE:
		$$XLN28^LNCDI(1234)
	*/	

	type String XLN28

	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	type RecordTTX ttx=Class.new("RecordTTX")

	do P^LNPO2(.ln,.ttx) if ER Q ""

	quit XLN28

	
public	XLN29(CID) // Shell script for computed data item XLN29

	/* 
	The function is used to compute [LN]XLN29
	
	ARGUMENTS:
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
	
	RETURNS:
		. $$ System Use - Miscellaneous Totals /TYP=T
	
	EXAMPLE:
		$$XLN29^LNCDI(1234)
	*/

	new XLN29

	do XLN29^LNCO3(,CID)

	quit XLN29

 
public	XLN30(CID) // Shell script for computed data item XLN30
 
	/*
	 The function is used to compute [LN]XLN30
 
	 ARGUMENTS:
		 . CID  Account Number	 /TYP=N/REQ/MECH=VAL
 
	 RETURNS:
		 . $$  Average Daily Bal Tax Year to Date	 /TYP=T
 
	 EXAMPLE:
		  $$XLN30^LNCDI(1234)
	*/
	
	new XLN30

	do ADBTYTD^UAVB1

	quit XLN30
 
 
public	XLN31(CID) // Shell script for computed data item XLN31
 
	/*
	 The function is used to compute [LN]XLN19
 
	 ARGUMENTS:
	     . CID  Account Number	 /TYP=N/REQ/MECH=VAL
 
	 RETURNS:
	     . $$  Average Daily Bal Prior Tax Yr      /TYP=T
 
	 EXAMPLE:
	      $$XLN31^LNCDI(1234)
	*/
 
	new XLN31

	do ADBPTY^UAVB1

	quit XLN31


public	MLN(COLL) // Multiple loan indicator - Collateral File (COL)

	/* 
	The function is used to compute [COL]MLN
	
	ARGUMENTS:
		. COLL  Collateral Record Number	/TYP=N/REQ/MECH=VAL
	
	RETURNS:
		. $$ Multiple Loan Indicator		/TYP=L
	
	EXAMPLE:
		$$MLN^LNCDI(12)
	*/

	if COLL="" quit ""

	new A,MLN,XCID,XCID1
	
	type ResultSet rs=Db.select("CID","LNCOL","COLL=:COLL","CID DESC") 
	if rs.isEmpty() quit 0
	set XCID=rs.next(),XCID=rs.getRow()	

	
	if XCID="" quit 0
	
	type ResultSet rs1=Db.select("CID","LNCOL","COLL=:COLL AND CID<:XCID","CID DESC")
	if rs1.isEmpty() quit 0
	set XCID1=rs1.next(),XCID1=rs1.getRow()
	
	if XCID,XCID1 quit 1

	quit 0


public	SLTVC(Number COLL,
	      Number CID) 	
	
	//Calculate current loan to value ratio single collateral

	/* 
	The function is used to compute [COL]SLTVC
	
	ARGUMENTS:
		. COLL  Collateral Record Number	/TYP=N/REQ/MECH=VAL
		. CID   Account Number			/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Current Loan to Value Ratio	/TYP=N
 
	EXAMPLE:
		$$SLTVC^LNCDI(1,1234)
	*/
 
	type public Boolean ER
	type Number COLVAL, SLTVC
	type String COLCRCD
	
	set SLTVC=0
	
	type RecordCOL col=Db.getRecord("COL","COLL=:COLL",1)
	if 'col.getMode() quit ""
		
	set COLVAL=col.colval
	
	if COLVAL.isNull() set COLVAL=col.price
	
	if COLVAL.isNull() quit "" 
		
	if '(col.colval.isNull()),'(col.price.isNull()),(col.price<col.colval) set COLVAL=col.price	
	
	type RecordLN ln=Db.getRecord("LN","CID=:CID")
	
	set COLCRCD=col.crcd 
		
	if COLCRCD.isNull() set COLCRCD=ln.crcd
	
	if COLCRCD'=ln.crcd do CAMT^CRCDUTL(COLCRCD,ln.crcd,.COLVAL)
	
	set SLTVC=((ln.balcmp/COLVAL)*100).roundDec()
	
	quit SLTVC


public	RSRT(AUTO,REV,DEL,MAN) // Compute the data item [DAYENDLNNAO]RSRT

	/* 
	The function is used to compute [DAYENDLNNAO]RSRT
	
	ARGUMENTS:
		. AUTO		  Automatic Placement Flag	/TYP=L/REQ/MECH=VAL
		. REV		   Reversal Flag			/TYP=L/REQ/MECH=VAL
		. DEL		   Deletion Flag			/TYP=L/REQ/MECH=VAL
		. MAN		   Manually Set Non-accrual	/TYP=L/REQ/MECH=VAL
	
	RETURNS:
		. $$ Report Sort /TYP=N
	
	EXAMPLE:
		$$RSRT^LNCDI(1,1,1,1)
	*/

	if 'AUTO,'REV,'DEL,'MAN quit 0	 // 0 = No automatic placement, but warned.
	if AUTO,'REV,'DEL,'MAN quit 1	  // 1 = Automatically placed in nonaccrual.
	if 'AUTO,REV quit 2		    // 2 = Removed from nonaccrual status.
	if AUTO,DEL quit 3		     // 3 = Deleted from ^DAYEND consideration.
	if 'AUTO,MAN quit 4		    // 4 = Manually placed in nonaccrual.
	if AUTO,REV,'MAN quit 5		    // 5 = Date automatically removed from non-accrual	

	quit 0


public	XH01(CID,TSEQ) // Assignment expression for data item XH01 in file HIST

	/*
	The function is used to compute [HIST]XH01
 
	ARGUMENTS:
		. CID   Account Number			/TYP=N/REQ/MECH=VAL
		. TSEQ  Transaction Sequence Number	/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ System Use - Loan Tran Breakdown	/TYP=T
 
	EXAMPLE:
		$$XH01^LNCDI(1,12)
	*/
 
	new XH01

	set XH01=""
	do HIST^LNCO3(CID,TSEQ)

	quit XH01


public	ACRAT(TREXD,IRN,TRATE) //  Accrual Rate

	/*
	  The function is used to compute [LN]ACRAT
 
	  ARGUMENTS:
			. TREXD Teaser Rate - Expiration Date	/TYP=D/REQ/MECH=VAL
			. IRN  Nominal Interest Rate		/TYP=N/REQ/MECH=VAL
			. TRATE Teaser Rate			/TYP=N/REQ/MECH=VAL
 
	  RETURNS:
			. $$ Accrual Rate /TYP=N
 
	  EXAMPLE:
			$$ACRAT^LNCDI(T,5,2)

	*/
	
	quit $S(%SystemDate'<TREXD:IRN,1:TRATE)


public	ADVPP(CUPR) //  Computed Advanced Principal Paid

	/*
	The function is used to compute [LN]ADVPP
 
	ARGUMENTS:
		. CUPR Current Principal		/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. $$ Computed Advanced Principal Paid	/TYP=$
 
	EXAMPLE:
		$$ADVPP^LNCDI(100)
	*/

	quit ($S(CUPR<0:(-(CUPR)),1:0))


public	ANND(APCND,ANOFF) //  Analysis - Next Date Created

	/*
	The function is used to compute [LN]ANND
 
 	ARGUMENTS:
		. APCND Escrow Analysis Pmt Change Next Date	/TYP=D/REQ/MECH=VAL
		. ANOFF Payment Change Analysis Date Offset	/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Analysis - Next Date Created		/TYP=D
 
	EXAMPLE:
		$$ANND^LNCDI(T,100)
	*/

	quit ($S(APCND:APCND-ANOFF,1:""))


public	BALCMP(ARUF,BAL,UDBAL) // Balance (Computed)

	/*
	The function is used to compute [LN]BALCMP
 
	ARGUMENTS:
		. ARUF  Advances to Reduce Undisbursed Flag	/TYP=L/REQ/MECH=VAL
		. BAL   Ledger Balance				/TYP=$/REQ/MECH=VAL
		. UDBAL Unadvanced Balance			/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. $$ Balance					/TYP=$
 
	EXAMPLE:
		$$BALCMP^LNCDI(1,100,50)
	*/

	quit ($S('ARUF:+BAL,1:BAL-UDBAL))

 
public	CARDUF(CID) //  Card Use Flag
 
	new XCID 
	
	type ResultSet rs=Db.select("DISTINCT CID","CRDGRP","CID=:CID") 
	if rs.isEmpty() quit 0
	set XCID=rs.next(),XCID=rs.getRow()	

 
	if XCID'="" quit 1
	
	quit 0
 

public	CBPNR(CBPND,CBOFF) // Coupon Production - Next Run Effective

	/*
	The function is used to compute [LN]CBPNR
 
  	ARGUMENTS:
		. CBPND  Coupon Book Production Next Date	/TYP=D/REQ/MECH=VAL
		. CBOFF  Coupon Book Production Eff Pmt Offset	/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Coupon Production - Next Run Effective	/TYP=$ ; ARGUMENTS:
 
	EXAMPLE:
		$$CBPNR^LNCDI(T+2,100)
	*/ 

	quit ($S($L(CBPND):CBPND+CBOFF,1:""))


public	DUIN2(STAT,CUIN,UNIN) // Total Interest Due (In Bill File Only)

	/*
	The function is used to compute [LN]DUIN2
 
	ARGUMENTS:
		. STAT Account Status				/TYP=N/REQ/MECH=VAL
		. CUIN Current Interest				/TYP=$/REQ/MECH=VAL
		. UNIN Uncollected Interest			/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. $$ Total Interest Due (In Bill File Only)	/TYP=$
 
	EXAMPLE:
		$$DUIN2^LNCDI(1,100,50)
	*/

	quit $S(STAT=4:0,1:CUIN+UNIN)


public	ESUADD(REVF,XLN23) //  Loan Budgeting Unassigned Add Back Amt

	/*
	The function is used to compute [LN]ESUADD
 
	ARGUMENTS:
		. REVF   Revolving Account Flag			/TYP=L/REQ/MECH=VAL
		. XLN23  Loan Budgeting Unassigned Value	/TYP=T/REQ/MECH=VAL
 
	RETURNS:
		. $$ Loan Budgeting Unassigned Add Back Amt	/TYP=$
 
	EXAMPLE:
		$$ESUADD^LNCDI(1,1)
 	*/

	quit $S(REVF:$P(XLN23,$C(124),3),1:0)


public	FMAB(FMA) // Front Money Deposit Account Balance

	/* 
	The function is used to compute [LN]FMAB
 
	ARGUMENTS:
		. Front Money Deposit Account			/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Front Money Deposit Account Balance	/TYP=$
 
	EXAMPLE:
		$$FMAB^LNCDI(1111)
 	*/
 
	if $G(FMA)="" quit ""
	new BAL

	set BAL=Db.getOneRow("BAL","ACN","FMA")

	quit +BAL


public	IPTD(ICM,DIST1ND,DIST1LD) // Interest Paid to Date

	/* 
	The function is used to compute [LN]IPTD
 
	ARGUMENTS:
		. ICM  Interest Collection Method	/TYP=N/REQ/MECH=VAL
		. DIST1ND Distribution 1 Next Due	/TYP=D/REQ/MECH=VAL
		. DIST1LD Distribution 1 Last Due	/TYP=D/REQ/MECH=VAL
 
	RETURNS:
		. $$ Interest Paid to Date		/TYP=D
 
	EXAMPLE:
		$$IPTD^LNCDI(1,T+1,T)
	*/

	quit ($S(ICM:DIST1ND,1:DIST1LD))


public	IPYE(IPLCF,IPTY,PENPTY) // Interest Paid - Form 1098 Reportable

	/* 
	The function is used to compute [LN]IPYE
 
	ARGUMENTS:
		. IPLCF Add Late Charge to Interest Paid Flag	/TYP=L/REQ/MECH=VAL
		. IPTY  Interest Paid - Prior Tax Year		/TYP=$/REQ/MECH=VAL
		. PENPTY  Penalty Prior Tax Year		/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. Interest Paid - Form 1098 Reportable		/TYP=$
 
	EXAMPLE:
		$$IPYE^LNCDI(1,100,30)
	*/

	quit ($S('IPLCF:IPTY,1:IPTY+PENPTY))

 
public	INTOFFDT(ICHND,INTOFF,INTOFFCL) //Interest Review Offset Date

	/* 
	The function is used to compute [LN]INTOFFDT
 
	ARGUMENTS:
		. ICHND       Interest Change - Next Date	/TYP=D/REQ/MECH=VAL
		. INTOFF      Interest Review Offset Days	/TYP=N/REQ/MECH=VAL
		. INTOFFCL    Interest Review Offset Calendar	/TYP=T/REQ/MECH=VAL
 
	RETURNS:
		. $$  Interest Review Offset Date		/TYP=D
 
	EXAMPLE:
		$$INTOFFDT^LNCDI(59999,5,"CALENDAR")
	*/

	if '$D(INTOFFCL) set INTOFFCL=""
	if $G(INTOFF)="" quit ICHND
 
	if INTOFF'="",INTOFFCL'="" set INTOFFDT=$$PRBD^UNBD(ICHND,INTOFF,INTOFFCL)
	else  set INTOFFDT=ICHND-INTOFF

	quit INTOFFDT


public	IUNT(IAM,STAT,IUN,IPL) //  Interest - Unearned (Current)

	/* 
	The function is used to compute [LN]IUNT
 
	ARGUMENTS:
		. IAM   Interest Amortization Method	/TYP=N/REQ/MECH=VAL
		. STAT Account Status			/TYP=N/REQ/MECH=VAL
		. IUN  Interest - Unearned (Original)	/TYP=$/REQ/MECH=VAL
		. IPL  Interest Paid - Life		/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. Interest - Unearned (Current)		/TYP=$
 
	EXAMPLE:
	$$IUNT^LNCDI(1,1,100,30)
	*/

	if '$D(CID) quit ($S($E(IAM)&'(STAT):IUN-IPL,1:0))
	set EXTAMT=Db.getOneRow("EXTAMT","LN","CID")
 
	quit ($S($E(IAM)&'(STAT):IUN-(IPL-EXTAMT),1:0))


public	LRIAS(DLR,ACR,LRIAB,LRIPS) // Last Renewal - Interest Accrued Since

	/* 
	The function is used to compute [LN]LRIAS
 
	ARGUMENTS:
		. DLR  Date of Last Restructuring		/TYP=D/REQ/MECH=VAL
		. ACR  Accrued Interest				/TYP=N/REQ/MECH=VAL
		. LRIAB Last Renewal - Interest Accrual Balance	/TYP=N/REQ/MECH=VAL
		. LRIPS Last Renewal - Interest Paid Since	/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. Last Renewal - Interest Accrued Since		/TYP=$
 
	EXAMPLE:
		$$LRIAS^LNCDI(T,300,100,30)
	*/

	quit $S(DLR:ACR-LRIAB+LRIPS,1:"")

 
public	LRIPS(LRD,IPL,LRIPB) // Last Renewal - Interest Paid Since

	/* 
	The function is used to compute [LN]LRIPS
 
	ARGUMENTS:
		. LRD  Last Renewal - Interest Paid Since	/TYP=$/REQ/MECH=VAL
		. IPL  Interest Paid - Life			/TYP=$/REQ/MECH=VAL
		. LRIPB Last Renewal - Interest Paid Balance	/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. Last Renewal - Interest Paid Since		/TYP=$
 
	EXAMPLE:
		$$LRIPS^LNCDI(300,100,30)
	*/

	quit $S(LRD:IPL-LRIPB,1:"")
 

public	NAM(ACN) //   Borrower

	/* 
	The function is used to compute [LN]NAM
 
	ARGUMENTS:
		. ACN  Customer Number  /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. Borrower		/TYP=T
 
	EXAMPLE:
	$$NAM^LNCDI(300)
	*/

	new NAM

 	set NAM=Db.getOneRow("NAM","CIF","ACN")

	quit $E(NAM,1,27)


public	NCOA(STAT,COA,REC) // Net Charge-off Balance

	/* 
	The function is used to compute [LN]NCOA
 
	ARGUMENTS:
		. STAT Account Status		/TYP=N/REQ/MECH=VAL
		. COA  Charge-Off Amount	/TYP=$/REQ/MECH=VAL
		. REC  Recovery Amount		/TYP=$/REQ/MECH=VAL
 
	RETURNS:
		. Net Charge-off Balance	/TYP=$
 
	EXAMPLE:
		$$NCOA^LNCDI(1,100,10)
	*/

	quit $S(STAT=4:0,1:COA-REC)


public	NLR(CID) //  Number of Restructurings

	/* 
	The function is used to compute [LN]NLR field
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Number of Restructurings	/TYP=N
 
	EXAMPLE:
		$$NLR^LNCDI(1234)
	*/

	new data
	
	type ResultSet rs=Db.select("RSEQ","LNPL3A","CID=:CID","RSEQ DESC") 
	if rs.isEmpty() quit ""
	set data=rs.next(),data=rs.getRow()
 
	quit data

 
public	ODD2(CNTDR,ODD) // First Disbursment Date - Computed

	/* 
	The function is used to compute [LN]ODD2 field
 
	ARGUMENTS:
		. CNTDR Number of Debits		/TYP=N/REQ/MECH=VAL
		. ODD  Original Disbursement Date	/TYP=D/REQ/MECH=VAL
 
	RETURNS:
		. $$ First Disbursment Date - Computed	/TYP=D
 
	EXAMPLE:
		$$ODD2^LNCDI(1,'12/01/97')
	*/

	quit ($S(CNTDR:ODD,1:""))

 
public	PCOLDES(COLL,CID) // Primary Collateral Description

	/* 
	The function is used to compute [LN]PCOLDES field
 
	ARGUMENTS:
		. COLL Collateral Record Number		/TYP=N/REQ/MECH=VAL
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$  Primary Collateral Description	/TYP=T
 
	EXAMPLE:
		$$PCOLDES^LNCDI(1,1234)
	*/

	new DESC

	if (CID="")!(COLL="") quit ""
	set DESC=Db.getOneRow("DESC","LNCOL","CID,COLL")

	quit ($S(COLL:DESC,1:" "))

 
public	UIDCID(ACN) // Account Owned By User

	/* 
	The function is used to compute [LN]UIDCID
 
	ARGUMENTS:
		. ACN  Customer Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. Account Owned By User		/TYP=L
 
	EXAMPLE:
		$$UIDCID^LNCDI(300)
	*/

	new XACN,XUID

	set XUID=%UserID
	set XACN=Db.getOneRow("ACN","SCAU","XUID")
	if ACN=XACN quit 1
	
	quit 0


public	XLN17(PTSP,CID) // System Use - Fee Income Amortization

	quit ""


public	PATUF(CID) //  Preauthorized Transfer Use Flag

	/* 
	The function is used to compute [LN]PATUF
 
	ARGUMENTS:
		. CID  Account Number			/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Preauthorized Transfer Use Flag	/TYP=L
 
	EXAMPLE:
		$$PATUF^LNCDI(300)
	*/

	new XCID
	
	type ResultSet rs=Db.select("CID","PAT","CID=:CID") 
	if rs.isEmpty() quit 0
	set XCID=rs.next(),XCID=rs.getRow()
 
	if XCID'="" quit 1
	
	quit 0
 	

public	WBAL(CGL,GLC) // [AOAMO]WBAL - Dealer Reserve Account Balance

	/* 
	The function is used to compute [LN]WBAL
 
	ARGUMENTS:
		. CGL  Credit Account Number		/TYP=N/REQ/MECH=VAL
		. GLC  G/L Indicator Credit CID		/TYP=L/REQ/MECH=VAL
 
	RETURNS:
		. $$ Dealer Reserve Account Balance	/TYP=$
 
	EXAMPLE:
		$$WBAL^LNCDI(300,1)
	*/
 
	new CID,BAL

	if GLC quit 0
	set CID=CGL
	if 'CID quit 0
	set BAL=Db.getOneRow("BAL","ACN","CID")

	quit +BAL


public	PROVPCT(Number ACLS,		// Provision Category
		Number PROVBAL,		// Provision Balance
		Number CID,		// Provision Category
		RecordACN acn)		// RecordACN object

	// Calculate and return Provision Percentage

	type Number TARGET
	type String CLS
 
	// Account is no longer in a provision category
	if ACLS.isNull() quit 0
	if CID.isNull() quit 0

	if acn.exists() do {
		set TARGET = $$PROVBAL(.acn, ACLS, CID)
		set CLS = acn.cls
	}

	else  do {
		type RecordACN acn = Db.getRecord("ACN", "CID = :CID", 1)
		set TARGET = $$PROVBAL(.acn, ACLS, CID)
		set CLS = acn.cls
	}

	if 'TARGET quit 0
	if 'PROVBAL quit 0

	// For deposits, convert to positive if negative value
	if CLS = "D" set TARGET = $FN(TARGET, "-")
 
	// Provision Percentage of Target Balance
	quit ((PROVBAL / TARGET) * 100).roundDec(5,,)
 

public	PROVBAL(RecordACN acn,		// Account
		Number ACLS,		// Provision Category
		Number CID)		// Account Number
		
	// Calculate and return Provision Target Balance

	type Number BAL, BALCMP, COLVAL, TARGET
	type String CALC, CLS, PGM

	// BAL and CLS are expected to be available as arguments when calling
	// BCHLNRCALC for both loans and deposits
	set BAL = acn.bal
	set CLS = acn.cls
	
	set CALC = ""

	type RecordUTBLACC utblacc = Db.getRecord("UTBLACC", "CLS = :CLS, AC = :ACLS", 1)

	if (CLS = "L") do {
	 
		// type RecordLN ln = Db.getRecord("LN", "CID = :CID")
		type RecordLN ln = {RecordACN}acn

		// BALCMP and COLVAL are required when calling BCHLNRCALC for loans only
		set BALCMP = ln.balcmp		
		set COLVAL = ln.provcol
		}
	
	// Use provision extrinsic
	if 'utblacc.provext.isNull() do {
	
		set CALC = utblacc.provext
		
		if (CALC.extract(1, 2) '= "$$") set CALC = "$$"_CALC
		
		set CALC = "S TARGET="_CALC
		}
	
	// Use provision Data-QWIK expression
	else  if 'utblacc.provcalc.isNull() set CALC = "S TARGET=$$dqprov"_CLS_ACLS_"^LNRCMP1(.acn)"
	
	// Use original calculation with computed balance	
	else  do {

		set PGM = $$GET^UBCHID("BCHLNRCALC") if PGM.isNull() quit
		
		set CALC = "S TARGET=$$CALC^"_PGM_"(BAL,CLS)"
		}
	
	// Execute CALC and return TARGET balance for computation
	#ACCEPT DATE=05/16/06;PGM=Eugene Titov;CR=21315
	if 'CALC.isNull() xecute CALC

	quit TARGET
	

public	CTLVAL(CID) // Calculate the value to loan ratio - current

	/* 
	The function is used to compute [LN]CTLVAL
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Collateral to Loan Value	/TYP=N
 
	EXAMPLE:
		$$CTLVAL^LNCDI(1234)
	*/

	new VTLBAL,XLN16

	set VTLBAL=$P($$XLN09^LNCDI(CID),"|",1)
	if '$G(VTLBAL) quit 0

	quit $$^SCARND($P($$XLN16^LNCDI(CID),"|",3)/VTLBAL,"",CID)

 
public	XLNBLP01(CID,SCHSEQ) //Private;LNBLP computed items related to LNBIL1 file

	/* 
	The function is used to compute [LNBLP]XLNBP01
 
	ARGUMENTS:
		. CID   Account Number					/TYP=N/REQ/MECH=VAL
		. SCHSEQ Scheduled Internal Bill Sequence Number	/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Lnblp- lnbil1 computed fields			/TYP=T
 
	EXAMPLE:
		$$XLNBLP01^LNCDI(1234,1)
	*/

	new data,I,XLNBLP01

	set XLNBLP01=""
	set data=$$GETBILPE^ESCFUNCS(CID,SCHSEQ,"EA,AD","CDIB,CTAB")
	set $P(XLNBLP01,"|",4)=$P(data,$C(9),1)
	set $P(XLNBLP01,"|",5)=$P(data,$C(9),2)
	for I=3:2:42 do {
		if $P(data,$C(9),I)="I" set $P(XLNBLP01,"|",1)=+$P(data,$C(9),I+1)
		if $P(data,$C(9),I)="P" set $P(XLNBLP01,"|",2)=+$P(data,$C(9),I+1)
		if $P(data,$C(9),I)["ESC" set $P(XLNBLP01,"|",3)=$P(XLNBLP01,"|",3)+$P(data,$C(9),I+1)
		}

	/* Compute UNES. This calculation is only valid if the loan's payment
	   string contains ESC.  */

	// Get payment string data.
	new escdata,lndata,APD,STRDATA,XBILDT,XPAS,XTYPE,UNES,UNIN,UNPR
	set lndata=Db.getOneRow("PAS,TYPE","LN","CID")
	set XPAS=$P(lndata,$C(9),1),XTYPE=$P(lndata,$C(9),2)
	set STRDATA=Db.getOneRow("DISTRIB","LNPAS2","XPAS")
	if STRDATA'["ESC" S $P(XLNBLP01,"|",6)="" quit XLNBLP01

	//Get BILDT from SCHSEQ on billing detail

	set XBILDT=Db.getOneRow("CBCD","LNBIL1","CID,SCHSEQ")
	set escdata=Db.getOneRow("APD,UNIN,UNPR","LNBLP","XBILDT,XTYPE,CID")
	set APD=$P(escdata,$C(9),1),UNIN=$P(escdata,$C(9),2),UNPR=$P(escdata,$C(9),3)
	set UNES=APD-UNIN-UNPR S $P(XLNBLP01,"|",6)=UNES

	quit XLNBLP01
 

public	OSEQDT(CID) // Bill Oldest Unsatisfied Seq Due Date

	/* 
	The function is used to compute [LN]OSEQDT
 
	ARGUMENTS:
		. CID  Account Number				/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Bill Oldest Unsatisfied Seq Due Date	/TYP=D
 
	EXAMPLE:
		$$OSEQDT^LNCDI(1234)
	*/

	new data,DIST1ND,OSEQ,OSEQDT,SCHSEQ

	set data=Db.getOneRow("SCHSEQ,DIST1ND,OSEQ","LN","CID")
	set SCHSEQ=$P(data,$C(9),1) 
	set DIST1ND=$P(data,$C(9),2) 
	set OSEQ=$P(data,$C(9),3)
	if OSEQ<SCHSEQ set OSEQDT=Db.getOneRow("CDPD","LNBIL1","CID,OSEQ")
	else  set OSEQDT=DIST1ND

	quit OSEQDT


public PML(CID) //  Send Promotional Mail

	/* 
	The function is used to compute [LN]PML
 
	ARGUMENTS:
		. CID  Account Number		/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Send Promotional Mail	/TYP=L
 
	EXAMPLE:
		$$PML^LNCDI(1234)
	*/

	new MF,PML

	set MF=Db.getOneRow("MF","ACN","CID")
	if MF="" quit 0
	set PML=Db.getOneRow("PROMO","UTBLMF","MF")

	quit +PML


public	ADJACR3(Number CID,		// Account Number
		Date EFD)		// System Date		/NOREQ

	//  Adjusted Accrual Calculation - Precalculated (Add-On/Discount)
	
	type Number %ACR, %LNACR, %PLDF

	type RecordCUVAR cuvar = Db.getRecord("CUVAR")

	if EFD.isNull() set EFD = cuvar.tjd

	type RecordLN ln = Db.getRecord("LN", "CID = :CID")
	
	if 'ln.iam quit 0
 
	#ACCEPT DATE=11/18/03;PGM=John Carroll;CR=7239
	set %SystemDate = EFD
	set %PLDF = ln.pldf

	type RecordLNACR3 lnacr3 = Db.getRecord("LNACR3", "EFD = :%SystemDate, GRP = :ln.grp, TYPE = :ln.type, CID = :CID", 1)
 
	// Calculate adjusted accrual for add-on/discount loans - returns %ACR
	do ACR^LNACR3(.ln, .lnacr3)

	quit %ACR
 

public	FPLDG(XCOLL) //  Collateral Fixed Pledged Amount Secured

	/* 
	The function is used to compute [COL]FPLDG.  This is the total
	amount of all loan collateral fixed pledged amounts for this
	collateral record in the collateral record currency.
 
	ARGUMENTS:
		. COLL Collateral Record   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Total Fixed Pledged Amount
 
	EXAMPLE:
		$$FPLDG^LNCDI(12)
	*/

	new count,data,FPLDG

	set FPLDG=0

	type ResultSet rs=Db.select("FPLDG","LNCOL","LNCOL.COLL=:XCOLL")
	if rs.isEmpty() quit 0
	while rs.next() do {
		set data=rs.getRow()
		set FPLDG=FPLDG+$P(data,$C(9),1)
		}

	quit FPLDG

 
public	PCTPLDG(XCOLL) //  Collateral Percent Pledged

	/* 
	The function is used to compute [COL]PCTPLDG.  This is the total
	percent pledged of all loan collateral percent pledged for this
	collateral record.
 
	ARGUMENTS:
		. COLL Collateral Record   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Total Percent Pledged
 
	EXAMPLE:
		$$PCTPLDG^LNCDI(12)
	*/

	new count,data,PCTPLDG

	set PCTPLDG=0

	type ResultSet rs=Db.select("PCTPLDG","LNCOL","LNCOL.COLL=:XCOLL") 
	if rs.isEmpty() quit 0 
	while rs.next() do {
		set data=rs.getRow()
		set PCTPLDG=PCTPLDG+$P(data,$C(9),1)
		}

	quit PCTPLDG


public	LNCOLTYP(XCOLL,XCID) //  Loan Collateral Type

	/* 
	This function is used to compute the collateral type [LNCOL]COLTYP
	of a collateral record.  The collateral type is held in the user
	table UTBLCOLCD which is keyed by collateral record and product group.
 
	ARGUMENTS:
		. COLL Collateral Record	/TYP=N/REQ/MECH=VAL
		. CID  Loan Account Record	/TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Collateral Type
 
	EXAMPLE:
		$$LNCOLTYP^LNCDI(57,40000035)
	*/

	new XGRP,XSCOLCD,XTYPE

	if $G(XCOLL)="" quit 0
	if $G(XCID)="" quit 0
	set XGRP=Db.getOneRow("GRP","LN","XCID")
	set XSCOLCD=Db.getOneRow("SCOLCD","COL","XCOLL")
	set XTYPE=Db.getOneRow("TYPE","UTBLCOLCD","XGRP,XSCOLCD")

	quit XTYPE

 
public	COLBAL(XCID,PLDGCB) // Collateral Account Ledger Balance

	/* 
	This function is used to compute [COL]COLBAL.  This is the
	balance of the collateral account number [COL]COLACN.  For Collateral
	Type of 70 (Pledged Account), the field [COL]COLBAL will be
	displayed instead of collateral value [COL]COLVAL.
 
	ARGUMENTS:
		. CID  Pledged Account Record   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Balance
 
	EXAMPLE:
		$$COLBAL^LNCDI(40000035)
	*/

	new BAL

	if $G(XCID)="" quit 0
	if 'Db.isDefined("DEP","XCID")
	if $G(PLDGCB)=1 set BAL=Db.getOneRow("BALCOL","DEP","XCID")
	if $G(PLDGCB)=2 set BAL=Db.getOneRow("BALAVL","DEP","XCID")
	if '$G(PLDGCB) set BAL=Db.getOneRow("BAL","DEP","XCID")

	quit BAL


public	PLDGAMT(XCOLL,PRCT,FAMT,XLNCOL,MAXPLDG) //  Collateral Pledged Amount Secured

	/* 
	The function is used to compute total pledged amount [COL]PLDGAMT or
	pledged amount in the loan collateral record [LNCOL]PLDGAMT in the
	pledged account's currency.
 
	ARGUMENTS:
		. COLL Collateral Record		/TYP=N/REQ/MECH=VAL
		. PRCT Percent Pledged			/TYP=N/REQ/MECH=VAL
		. FAMT Fixed Amount Pledged		/TYP=N/REQ/MECH=VAL
		. XLNCOL Computed from FILE LNCOL	/TYP=L/NOREQ/MECH=VAL
		. MAXPLDG Maximum Pledge Limit		/TYP=N/NOREQ/MECH=VAL 

	RETURNS:
		. $$ Pledged Amount Secured
 
	EXAMPLE:
		$$PLDGAMT^LNCDI(COLL,10,0)
	*/

	new data,XCOLACN,XCOLTYP,XCOLVAL,XCOLBAL,XSCOLCD,XPLDGAMT,XPLDGCB

	if 'Db.isDefined("COL","XCOLL")

	if '$G(%SystemDate) do {
		type public Cache %CUVAR
		type RecordCUVAR cuvar=%CUVAR.getRecord("CUVAR")
		#ACCEPT DATE=11/18/03;PGM=John Carroll
		set %SystemDate=cuvar.tjd
		}
	if '$G(ER) set ER=0
	
	type ResultSet rs=Db.select("COLACN,SCOLCD,COLVAL,PLDGCB","COL","COLL=:XCOLL") 
	if rs.isEmpty() set data=""
	else  set data=rs.next(),data=rs.getRow()
	
	set XCOLACN=$P(data,$C(9),1)
	set XSCOLCD=$P(data,$C(9),2)
	set XCOLVAL=$P(data,$C(9),3)
	set XPLDGCB=$P(data,$C(9),4)
	set XCOLBAL=$$COLBAL(XCOLACN,XPLDGCB)

	new XCOLTYP
	type ResultSet rs1=Db.select("TYPE","UTBLCOLCD","KEY=:XSCOLCD") 
	if rs1.isEmpty() set XCOLTYP=""
	else  set XCOLTYP=rs1.next(),XCOLTYP=rs1.getRow()	

	
	if XCOLTYP=70 do {
		if XCOLACN set XCOLVAL=XCOLBAL
		if $G(XLNCOL),XPLDGCB=2 set XCOLVAL=Db.getOneRow("PLDGAVL","DEP","XCOLACN")
		}
	
	/*
	 42288 - If computed pledged amount is greater than max pledge limit
	         return max pledge limit instead.
	*/

	set XPLDGAMT=$$^SCARND((XCOLVAL*$G(PRCT)/100),0,,,2)+$G(FAMT)

	if $G(MAXPLDG)="" quit XPLDGAMT
	if XPLDGAMT>MAXPLDG set XPLDGAMT=MAXPLDG

        quit XPLDGAMT	


public	PLDGCRLMT(Number CID) //  Collateral Pledged Amount Secured Converted to Loan Currency

 	/* 
	The function is used to compute [LNCOL]PLDGAMT of all pledged accounts
	of collateral type 70 securing the loan in the loan account's
	currency.  This value is used to determine the loan account's credit
	limit based upon the total pledged amount securing the loan.
 
	ARGUMENTS:
		. CID  Secured Loan Account Number   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Total Pledged Amount Secured in Loan Currency
 
	EXAMPLE:
		$$PLDGCRLMT^LNCDI(CID)
	*/

	type Number TPLDGAMT

	set TPLDGAMT=0
	type RecordLN ln=Db.getRecord("LN","CID=:CID")

        type ResultSet rs=Db.select("COLL","LNCOL","CID=:CID AND COLTYP=70")	

	while rs.next() do {
		
		type Number PLDGAMT,COLL

		set COLL=rs.getCol("COLL")
		type RecordLNCOL lncol=Db.getRecord("LNCOL","CID=:CID,COLL=:COLL")

		set PLDGAMT=$$PLDGAMT^LNCDI(lncol.coll,lncol.pctpldg,lncol.fpldg)
		if PLDGAMT=0 quit 
		type RecordCOL col=Db.getRecord("COL","COLL=:ln.coll")
		if col.crcd'=ln.crcd do CAMT^CRCDUTL(col.crcd,ln.crcd,.PLDGAMT)
		set TPLDGAMT=TPLDGAMT+PLDGAMT
		}

	quit TPLDGAMT


public	MINRATE(CID,FLG) // Calculation for Minimum Rate Differential

	/* 
	This function is executed to determine the interest rate for a
	deposit secured loan with minimum rate differential defined.
	This procedure will compute the highest interest rate amongst the
	pledge accounts securing the loan.
 
	ARGUMENTS:
		. CID Secured Loan Account Number	/TYP=N/REQ/MECH=VAL
 
		. FLG Process Flag			/TYP=N/NOREQ/MECH=VAL
			1 - Calculate interest rate using the pledged
			account's index as if the rate was to
			change today.
			0 - Uses interest rate on account DEP.IRN
 
	RETURNS:
		. DRATE Highest deposit account rate.
	*/

	new ACS,BAL,COLACN,COUNT,data,DRATE,INDEX,LCID,RATE,STORE
 
	set LCID=$G(CID)
	if $G(%SystemDate)="" do {
		type public Cache %CUVAR
		type RecordCUVAR cuvar=%CUVAR.getRecord("CUVAR")
		#ACCEPT DATE=11/18/03;PGM=John Carroll
		set %SystemDate=cuvar.tjd
		}
	set DRATE=""
	
	type ResultSet rs=Db.select("COL.COLL,COL.COLACN","LNCOL,COL","LNCOL.CID=:LCID AND LNCOL.COLTYP=70 AND COL.COLL=LNCOL.COLL AND PLDGAMT IS NOT NULL") 

	while rs.next() do {
	       set data=rs.getRow() 
		set COLACN=$P(data,$C(9),2)
		quit:'COLACN 
		// Getting the Pledged Account information.
		set STORE=Db.getOneRow("IRN,INDEX,BAL,ACS","DEP","CID=:COLACN")
		set RATE=$P(STORE,$C(9),1)
		set INDEX=$P(STORE,$C(9),2)
		set BAL=$P(STORE,$C(9),3)
		set ACS=$P(STORE,$C(9),4)
		// Calculate account rate for Index - RATE is returned
		if $G(FLG),(INDEX'=""),(ACS<%SystemDate) do {
			set PAR("INDEX")=INDEX
			set PAR("IXLOAD")=0
			set PAR("NOTSER")=0
			set PAR("IPMODE")=0
			set PAR("ROUND")=1
			set PAR("LIMIT")=1
			do CTLCID^UINDX(CID,%SystemDate,BAL,PAR) quit:ER
			}
		if DRATE<RATE set DRATE=RATE
		}

	quit DRATE
	

public	PLDGMDT(CID) // Calculation for Maturity Date of Deposit Secured Loan

	/* 
	This function is executed to determine the maturity date for a
	deposit secured loan.	
	This procedure will compute the earlies maturity date amongst the
	pledge accounts securing the loan.
 
	ARGUMENTS:
		. CID Secured Loan Account Number    /TYP=N/REQ/MECH=VAL
 
 	RETURNS:
		. DMDT Earliest deposit account maturity date.
	*/

	new COLACN,COUNT,data,DMDT,MDT,LCID
 
	set LCID=$G(CID)
	set DMDT=""
	
	type ResultSet rs=Db.select("COL.COLL,COL.COLACN","LNCOL,COL","LNCOL.CID=:LCID AND LNCOL.COLTYP=70 AND COL.COLL=LNCOL.COLL AND PLDGAMT IS NOT NULL") 

	while rs.next() do {
	       set data=rs.getRow() 
		set COLACN=$P(data,$C(9),2)
		quit:'COLACN 
		// Getting the Pledged Account information.
		set MDT=Db.getOneRow("MDT","DEP","COLACN")
		quit:'MDT 
		if 'DMDT set DMDT=MDT
		else  if MDT<DMDT set DMDT=MDT
		}

	quit DMDT
	

public	PLDGBAL(CID) // Returns Pledged Amount of the collateral account

	/*
	ARGUMENTS:
		. CID Collateral Account Number    /TYP=N/REQ/MECH=VAL
  
	RETURNS:
		. AMT Pledged Amount of the collateral account in all collateral
		records.
	*/

	if $G(CID)="" quit 0

	new AMT,count,data

	set AMT=0 

	type ResultSet rs=Db.select("PLDGAMT","COL","COLACN=:CID") 

	while rs.next() do {
		set data=rs.getRow()
		set AMT=AMT+$P(data,$C(9),1)
		}

	quit AMT
 

public	AVB(CID,OFFSET) // Returns the Average Monthly Balance
	
	/* 
	Arguments:
 
		. CID  Account Number
 
		. OFFSET  The number of months prior to the effective dated
		month that the average balance is being calculated for.
 
	RETURNS:
 
		. AVB  The average monthly balance for the given month.
	*/ 

	new AVB,DAT,data,DDBAL,DIM
 
	// Get the julian date for the desired month
	set DAT=$$ADDMJD^SCADAT(%SystemDate,-OFFSET)
 
	// Set the month and the days in that month
	set MON=$$MON^SCADAT(DAT,1)
	set DIM=$$NODM^SCADAT(DAT,1)
 
	// Get the actual dollar days balance and calculate the average balance
	set list="DDBALCUR,DDBAL1,DDBAL2,DDBAL3,DDBAL4,DDBAL5,DDBAL6,DDBAL7,DDBAL8,DDBAL9,DDBAL10,DDBAL11,DDBAL12" 
	set data=Db.getOneRow(list,"LN","CID")
 
	if OFFSET=0 set DDBAL=$P(data,$C(9),1)
	else  set DDBAL=$P(data,$C(9),MON+1)
 
	set AVB=DDBAL/DIM		      // Dollar Days Balance / Days in Month
 
	quit AVB
 

public	MEBAL(CID,OFFSET) // Returns the Month End Balance

	/*
	ARGUMENTS:
 
		. CID	  Account Number
 
		. OFFSET      The number of months prior to the effective dated
		month that the month end balance is being calculated for.
 
	RETURNS:
 
		. MEBAL	 The average month balance for the given month.
	*/ 

	new MEBAL,DAT,data
 
	// Get the julian date for the desired month
	set DAT=$$ADDMJD^SCADAT(%SystemDate,-OFFSET)
 
	// Set the month and the days in that month
	set MON=$$MON^SCADAT(DAT,1)
 
	// Get the actual month end balance
 
	set data=Db.getOneRow("MEBAL1,MEBAL2,MEBAL3,MEBAL4,MEBAL5,MEBAL6,MEBAL7,MEBAL8,MEBAL9,MEBAL10,MEBAL11,MEBAL12","LN","CID")
 
	set MEBAL=$P(data,$C(9),MON)
 
	quit MEBAL


public FINDATE(STRTDT,OFFST,CAL,CBIND)

	/*
	DESCRIPTION: This extrinsic function returns a target date, using
		business date convention, given a reference date, a
		number of offset days, a non-business date calendar,
		and a calendar/business indicator. It is used to compute
		[LN]CNDT and [LN]RNDT, and is also used in the
		calculation of [LN]SRCDT.
 
	KEYWORDS: DATE
 
	ARGUMENTS:
		. STRTDT  The date to start with	/TYP=D/REQ
 
		. OFFST   The number of offset days     /TYP=N/REQ
 
		. CAL     Non-business date calendar    /TYP=T/REQ
 
		. CBIND   Calendar/business indicator   /TYP=L/NOREQ
 
	RETURNS:
		. $$    Target date		     /TYP=D
 
	EXAMPLE:
		S CNDT=$$FINDATE^LNCDI(CNVDT,CNOFF,CNCAL,CCBIND)
	*/
 
	new TRGDT,I

	if ($G(STRTDT)="") quit ""
 
	if $G(CAL)="" set TRGDT=STRTDT-OFFST quit TRGDT
	if $G(CBIND) for I=STRTDT-1:-1 if $$BD^UNBD(I,CAL) set OFFST=OFFST-1 if 'OFFST quit 
	if '$G(CBIND) do {
		set I=STRTDT-OFFST
		for I=I:-1 quit:$$BD^UNBD(I,CAL) 
		}
	set TRGDT=I

	quit TRGDT


public	TRMD(CID) // Calculate Account Term in Days
 
	new data,TRMD,DLR,ODT,MDT

	set data=Db.getOneRow("DLR,MDT,ODT","LN","CID")
	set DLR=$P(data,$C(9),1) set MDT=$P(data,$C(9),2) set ODT=$P(data,$C(9),3)
	if MDT="" quit ""
	if DLR="" set TRMD=MDT-ODT
	else  set TRMD=MDT-DLR

	quit TRMD
 
 
public IBPY(Number CID) // Interest Billed Prior Year
 
	/* 
	DESCRIPTION: Returns the amount of interest billed in the prior
		     year, regardless of whether or not it was paid.
 
	KEYWORDS: Interest
 
	ARGUMENTS:
		. CID    Loan account number	/TYP=N/REQ
		. SCHSEQ Schedule Sequence	/TYP=N/REQ 
 
	RETURNS:
		. $$    Interest Billed		/TYP=$
 
	EXAMPLE:
		set AMT=$$IBPY^LNCDI(CID)
 	*/

	quit $$IBPY^LNU(CID)

 
public DEDPPY(CID) // Total Deductable Loan Fees Paid Prior Year
 
	/* 
	DESCRIPTION: Returns the amount of loan fees paid prior year for
		loan fee plans which are deductable.
 
	KEYWORDS: Loan Fees
 
	ARGUMENTS:
		. CID   Loan account number		/TYP=N/REQ
 
 
	RETURNS:
		. $$    Loan Fees Paid Prior Year	/TYP=$
 
	EXAMPLE:
		. S AMT=$$DEDPPY^LNCDI(CID)
 	*/

	quit $$DEDPPY^LNU(CID)	
 

public DEDPPTY(CID) // Total Deductable Loan Fees Paid in the Prior tax Year
 
	/*
	DESCRIPTION: Returns the amount of loan fees paid prior tax year for
		     loan fee plans which are deductable.
 
	KEYWORDS: Loan Fees
 
	ARGUMENTS:
		. CID   Loan account number	     /TYP=N/REQ
 
 
	RETURNS:
		. $$    Loan Fees Paid Prior Tax Year       /TYP=$
 
	EXAMPLE:
		. S AMT=$$DEDPPY^LNCDI(CID)
	*/

	quit $$DEDPPTY^LNU(CID)


public	PLDGCTOT(COLL) //  Pledged Collateral Total

	/* 
	The function is used to compute the pledged collateral total
	of all collateral types securing the loan in the loan account's
	currency.
 
	ARGUMENTS:
		. COLL  Collateral Record Number   /TYP=N/REQ/MECH=VAL
 
	RETURNS:
		. $$ Total collateral pledged in all collateral records
 
	EXAMPLE:
		$$PLDGCTOT^LNCDI(COLL)
	*/

	type Number TPLDGAMT
	
	if COLL.get().isNull() quit 0

	set TPLDGAMT=0

	type ResultSet rs=Db.select("PLDGAMT","LNCOL","COLL=:COLL") 

	while rs.next() do {
		set TPLDGAMT=TPLDGAMT+rs.getCol("PLDGAMT")
		}
	
	quit TPLDGAMT

 
public	LPDTAMT(CID) // Last Payment Amount
 
	/* 
	Input:  CID
	Output: LPDTAMT
	*/
	 
	type String ETC=""
	type Number LPDTAMT=0
 
	quit:'CID.exists() 0
	quit:CID.isNull() 0
	
	type ResultSet rs=Db.select("ETC,TAMT","HIST","CID=:CID AND ETC IS NOT NULL","TSEQ DESC") 
	while rs.next() do { quit:LPDTAMT
		set ETC=rs.getCol("ETC")
		type RecordTRN trn=Db.getRecord("TRN","ETC=:ETC",1)
		if trn.pcfl9 set LPDTAMT=rs.getCol("TAMT").piece("#",1)
		}

	quit LPDTAMT 


public IFDA(CID)  // Interest Free Disbursement Amount

	/*
 
	Arguments:
		. CID   Account Number			/TYP=N/REQ/METH=VAL
 
 
	Returns:
		. $$    Int Free Disbursement Amount	/TYP=$
 
	*/
 
	new EXPDT,IDGP,ND,TOT,SDD
 
	set TOT=0
 
	type ResultSet rs=Db.select("SDD,REPYMT,EXPDT,SDA","LNDS1","CID=:CID")

	if 'rs.isEmpty() while rs.next() do {
		set SDD=rs.getCol(1)    // Loan Scheduled Disbursement Date
		if SDD>TJD quit
		set REPYMT=rs.getCol(2) // repayment amount
		set EXPDT=rs.getCol(3)  // grace period expr date
		set SDA=rs.getCol(4)    // disb amount
		if EXPDT'<TJD set TOT=TOT+SDA-REPYMT
		}
 
	quit TOT


public	COLTOT(CID) // Collateral Total Held Against Loan
	
	/*
	The function is used to compute [LN]COLTOT field. It is the sum
	of all deposit accounts pledged as collateral.
	
	ARGUMENTS:
		. CID  Account Number  /TYP=N/REQ/MECH=VAL
	
	RETURNS:
		. $$  Collateral Total /TYP=$
	 
	EXAMPLE:
		W $$COLTOT^LNCDI(100)
	 
	*/
	
	new COUNT,LCRCD,BAL,COLL,COLACN,XBAL,XCOLL,XCRCD,XCOLACN,data

	set BAL=0
	set LCRCD=Db.getOneRow("CRCD","LN","CID")
	type ResultSet rs
	set rs=Db.select("COLL","LNCOL","CID=:CID")
   	
	/* Get the balance amount for each collateral held against loan.
	   Check for the currency of the collateral and if different from the
	   loan convert to loan currency. Add the balances to get the
	   collateral total.
	*/
 	
	while rs.next() do {
		set COLL=rs.getCol(1)
		if 'COLL quit 0
			set COLACN=Db.getOneRow("COLACN","COL","COLL")
			if COLACN="" quit
			set data=Db.getOneRow("BAL,CRCD","DEP","COLACN")
			set XBAL=$P(data,$C(9),1)
			set XCRCD=$P(data,$C(9),2)
		if XCRCD'=LCRCD do CAMT^CRCDUTL(XCRCD,LCRCD,.XBAL)
		set BAL=BAL+XBAL
		}

	quit BAL


public	DELQPB(Number CID) 	// Account Number

	/*
	Delinquency Period Band
		 
	The function is used to compute [LN]DELQPB field. The computed number
	of payments a member(customer) is considered delinquent.
	
	RETURNS:
		. $$  Delinquency Period Band /TYP=N
	
	EXAMPLE:
		W $$DELQPB^LNCDI(100)
	
	*/

	type Number DELQPB, NP, pcmval1, pcmval3, XDELQPB
 	type Date PMTDT1
 	
	set DELQPB = 0
	set XDELQPB = 0
	
	type RecordLN ln = Db.getRecord("LN","CID")

	// If Ledger Balance is less than Collateral Total no further processing
	if (ln.bal < ln.coltot) quit 0   // P&I Amount is associated with this loan

	set pcmval1 = ln.pcmval.extract(1) // Fixed Amount as indicated in account record	
	set pcmval3 = ln.pcmval.extract(3)       

	/* Calculate the Delinquency Period Band for Level Repayment Method
	    (P&I) Loan. The Total Due is the amount of all bills which are
	    outstanding for the loan in the payment file which includes Bulk
	    Principal Payments if any as they are part of the bill record.
	    Then calculate the Delinquency Period Band which is the
	    Total Due divided by Principal and Interest Payment.
	*/
 	
	if (pcmval1 = 1) , (ln.pmtpi > 0) set DELQPB = ln.tdue / ln.pmtpi
 	
	/* Calculate the Delinquency Period Band for Traditional Repayment
	    Method (Fixed) Loan. The Total Due is the amount of all bills which
	    are outstanding for the loan in the payment file which includes Bulk
	    Principal Payments if any as they are part of the bill record.
	    Then calculate the Delinquency Period Band which is the
	    Total Due divided by Fixed Principal Amount.
	*/
 	
	if (pcmval3) , (ln.fpa > 0) set DELQPB = ln.tdue / ln.fpa
 	
	/* If the System Date is greater than the Account Maturity
	   Date, Delinquency Period Band will be the greater of (difference
	   between number of Payments from disbursement date through system
	   date) and Delinquency Period Band calculated for either P&I or Fixed
	   repayment methods.
	*/
	 
	if (%SystemDate > ln.mdt) do {

		// Date of one frequency before 1st payment date.
		set PMTDT1 = $$NJD^UFRE(ln.dfp, ln.dist1fre, ,  1)  
		
		//Number of Payments from disbursement date through system date		
		set NP = $$NBROPMT^PROCLN(ln.type, %SystemDate, ln.odd, ln.dist1fre, PMTDT1, ln.dist1af)

		set XDELQPB = NP - ln.onp
		if (DELQPB < XDELQPB) set DELQPB = XDELQPB
		}

	quit DELQPB


public	NETEXP(CID)   //  Collateral Total Held Against Loan

	/*
	The function is used to compute [LN]NETEXP field. It is the Current
	loan balance minus the sum of all share and deposit accounts pledged
	as collateral.[LN]COLTOT
	
	ARGUMENTS:
		. CID  Account Number  /TYP=N/REQ/MECH=VAL

	RETURNS:
		. $$  Net Exposure     /TYP=$

	EXAMPLE:
		W $$NETEXP^LNCDI(100)
	 
	*/

	new BAL,NETEXP,BAL,COLTOT,data
 
	/* Calculate the Net Exposure which is equal to the ledger balance
	   minus the collateral total held against a loan.
	*/
 	
	set NETEXP=0
	set data=Db.getOneRow("BAL,COLTOT","LN","CID")
	set BAL=$P(data,$C(9),1)
	set COLTOT=$P(data,$C(9),2)
	set NETEXP=BAL-COLTOT

	quit NETEXP


public	NONPERF(CID) // Non-Performing Indicator

	/*
	The function is used to determine if the loan is in a non-performing
	status.

	ARGUMENTS:
	. CID  Account Number  /TYP=N/REQ/MECH=VAL

	RETURNS:
	. $$  Non-performing status (1 for true, 0 for false)

	EXAMPLE:
	W $$NONPERF^LNCDI(CID)
	*/

	new DAYSDELQ,ANPP

	type ResultSet rs=Db.select("DAYSDELQ","LN","CID=:CID")
	if rs.isEmpty() quit ""
	set DAYSDELQ=rs.next(),DAYSDELQ=rs.getRow()

	set ANPP=Db.getOneRow("ANPP","LN","CID")

	if 'ANPP quit 0
	if DAYSDELQ>ANPP quit 1

	quit 0

	
public	ASPTY(CID) // Assessed Fees Prior Tax Year
 
	/* 
	The function is used to compute [LN]ASPTY field.
 
	ARGUMENTS:
	 . CID  Account Number  /TYP=N/REQ/MECH=VAL
 
	EXAMPLE:
	 W $$ASPTY^LNCDI(100)
 	*/
	
	quit ($P(($$XLN29^LNCDI(CID)),$C(124),12))
 

public	ASTYTD(CID) // Assessed Fees Tax Year to Date
	    
	 /*
	 The function is used to compute [LN]ASTYTD field.
 
	 ARGUMENTS:
	    . CID  Account Number  /TYP=N/REQ/MECH=VAL
 
	 EXAMPLE:
	     W $$ASTYTD^LNCDI(100)
 
	*/

	quit ($P(($$XLN29^LNCDI(CID)),$C(124),11))
  

public	ADBPTY(CID) // Average Daily Balance Prior Tax Year

	/*
	The function is used to compute [LN]ADBPTY field.
 
	ARGUMENTS:
	   . CID  Account Number  /TYP=N/REQ/MECH=VAL
 
	EXAMPLE:
	     W $$ADBPTY^LNCDI(100)
 
	*/

	quit ($P(($$XLN31^LNCDI(CID)),$C(124),1))
  

public	ADBTYTD(CID) // Average Daily Balance Tax Year to-date
 
	/*
	The function is used to compute [LN]ADBTYTD field.
 
	ARGUMENTS:
	  . CID  Account Number  /TYP=N/REQ/MECH=VAL
 
	EXAMPLE:
	W $$ADBTYTD^LNCDI(100)
 	*/
	
	quit ($P(($$XLN30^LNCDI(CID)),$C(124),1))

 
public IRAMTR(IRCID,CID)  // Interest Reserve Amount Remaining
        /*
        This section retrieves and returns the amount of funds remaining
        in a loan's interest reserve account.
        */
 
        new AMTREM
 
        if ($G(IRCID)="")!($G(CID)="") quit ""
        if 'Db.isDefined("RELIR","IRCID,CID") quit ""
        set AMTREM=Db.getOneRow("IRAMTR","RELIR","IRCID,CID")
 
        quit AMTREM


public COMDUE(CID,LIT)  // Computed Commitment Fields

        /*
          This section will calculate the principal, interest, late charges,
          loan fees, escrow, or total due for a commitment by looping through
          all of the commitment's account and sub-commitments.
 
          The LIT paramter may take one of 6 values:
                "DUPR" - for computed commitment principal due
                "DUIN" - for computed commitment interest due
                "LCHG" - for computed commitment late charge due
                "TFEE" - for computed commitment loan fees due
                "DUES" - for computed commitment escrow due
                "TDUE" - for computed commitmebt total amount due
 
          If the LIT parameter does not equal one of these literals, a value of
          "" (null) will be returned.  The LIT parameter is actually the name
          of the column in LN which needs to be summed for all accounts under
          the commitment in order to return the total for that column.
        */
 
        new DUE,SUMDUE,XCID
 
        if $G(CID)="" quit ""
        set SUMDUE=0
 
        // Should only return a value if LN.CBF=1
        set CBF=Db.getOneRow("CBF","LN","CID")
        if 'CBF quit ""
 
        // Get all loan account numbers linked to the commitment
        type ResultSet rs=Db.select("CID","LN","CCL=:CID")
        if rs.isEmpty() quit ""
 
        // Check for valid column names
        set LIT=$G(LIT)
        if '((LIT="DUPR")!(LIT="DUIN")!(LIT="LCHG")!(LIT="TFEE")!(LIT="DUES")!(LIT="TDUE")) quit ""
 
        while rs.next() do {
                new DATA,DUE,XCID,XDATA
                set XCID=rs.getCol(1)  // Next account tied to commitment
                if 'Db.isDefined("LN","XCID") quit
                set XDATA=Db.getOneRow("CCL,CPF","LN","XCID")
                set XCCL=$P(XDATA,$C(9),1)    // Account's Commitment Number
                set XCPF=$P(XDATA,$C(9),2)    // Account's Comm. Processing Flag
 
                /*
                   The following if statement is for sub-commitments under the
                   master commitment and uses recursion.  The else is for
                   accounts tied to the commitment or sub-commitment.
                */
 
                if XCPF,(XCCL=CID) set DUE=$$COMDUE^LNCDI(XCID,LIT) if 1
                else  do {
			set DATA=Db.getOneRow("DUPR,DUIN,LCHG,TFEE,DUES,TDUE","LN","XCID")
			set DUE=$S((LIT="DUPR"):$P(DATA,$C(9),1),(LIT="DUIN"):$P(DATA,$C(9),2),(LIT="LCHG"):$P(DATA,$C(9),3),(LIT="TFEE"):$P(DATA,$C(9),4),(LIT="DUES"):$P(DATA,$C(9),5),(LIT="TDUE"):$P(DATA,$C(9),6),1:0)
			}

		if $G(DUE)="" quit

                set SUMDUE=SUMDUE+DUE
                }

        quit SUMDUE 


public DAYSDELQ(CID) // Computed DAYSDELQ for LN
        /*
        This section returns the number of days delinquent for an entire
        commitment or for one loan based upon the value of th LN.CDF and
        LN.CPF flags.  The computed DAYSDELQ for a commitment with both
        flags on is equal to the number of days delinquent of the most
        delinquent account tied to the commitment.
        */
 
        new CDF,CPF,HIGHDD,STAT,xdata
 
        set CID=$G(CID)
        if CID="" quit ""
 
        set xdata=Db.getOneRow("CDF,CPF,STAT","LN","CID")
        set CDF=$P(xdata,$C(9),1)
        set CPF=$P(xdata,$C(9),2)
	set STAT=$P(xdata,$C(9),3)		// ABS 07/06/01
	if STAT=4 quit ""			// ABS 07/06/01
        set HIGHDD=0
 
        if CDF,CPF do {     // For calculating days delinquent on a commitment
                type ResultSet rs=Db.select("CID","LN","CCL=:CID")
                if rs.isEmpty() quit
                while rs.next() do {
                        new data,TEMPDD,XCID,XCDF,XCPF,XDIST
 
                        set XCID=rs.getCol(1)  // Next account tied to comm.
                        if 'Db.isDefined("LN","XCID") quit
                        set data=Db.getOneRow("CDF,CPF,DIST1ND","LN","XCID")
                        set XCDF=$P(data,$C(9),1)
                        set XCPF=$P(data,$C(9),2)
                        set XDIST=$P(data,$C(9),3)
                        if XCDF,XCPF set TEMPDD=Db.getOneRow("DAYSDELQ","LN","XCID")
                        else  set TEMPDD=$S(XDIST="":"",%SystemDate-XDIST<0:"",1:%SystemDate-XDIST)
                        if $G(TEMPDD)="" quit
                        if TEMPDD>HIGHDD set HIGHDD=TEMPDD
                        }
                if 1            // Preserves $T
                }
        else  do {      // For calculating days delinquent on an individual loan
                set XDIST=Db.getOneRow("DIST1ND","LN","CID")
                set HIGHDD=$S(XDIST="":"",%SystemDate-XDIST<0:"",1:%SystemDate-XDIST)
                }

        quit HIGHDD


public DOLDEL(CID) // Computed DOLDEL for LN
        /*
        This section returns the total delinquent amount for a single loan
        or for an entire commitment.  To return the computed commitment
        delinquency amount, the CDF and CPF flags must both be enabled
        on the master commitment's account record.
        */
 
        new data,TOTDEL,xdata
 
        set CID=$G(CID),CDF=$G(CDF),CPF=$G(CPF)
        if CID="" quit ""
 
        set xdata=Db.getOneRow("CDF,CPF","LN","CID")
        set CDF=$P(xdata,$C(9),1)
        set CPF=$P(xdata,$C(9),2)
 
        set TOTDEL=0
        if CDF,CPF do {
                type ResultSet rs=Db.select("CID","LN","CCL=:CID")
                if rs.isEmpty() quit
                while rs.next() do {
                        new TEMPAMT
                        set XCID=rs.getCol(1)  // Next account tied to comm.
                        if 'Db.isDefined("LN","XCID") quit
 
                        set XCCL=Db.getOneRow("CCL","LN","XCID")
                        set XCPF=Db.getOneRow("CPF","LN","XCID")
                        if XCCL,XCPF set TEMPAMT=Db.getOneRow("DOLDEL","LN","XCID")
                        else  do {
                                set data=Db.getOneRow("UNIN,UNPR,UNES","LN","XCID")
                                set XUNIN=$P(data,$C(9),1)
                                set XUNPR=$P(data,$C(9),2)
                                set XUNES=$P(data,$C(9),3)
                                set TEMPAMT=XUNIN+XUNPR+XUNES
                                }
                        set TOTDEL=TOTDEL+TEMPAMT
                        }
                if 1            // Preserves $T
                }
        else  do {
                set data=Db.getOneRow("UNIN,UNPR,UNES","LN","CID")
                set XUNIN=$P(data,$C(9),1)
                set XUNPR=$P(data,$C(9),2)
                set XUNES=$P(data,$C(9),3)
                set TOTDEL=XUNIN+XUNPR+XUNES
                }
        quit TOTDEL


public CVBAL(CID)    // Customer View Loan Balance
 
        /*  This subroutine returns the balance of the main customer view loan,
	which includes principal, accrued interest, assesed fees and late
	charges.
       	*/

	new xdata,BAL,ACR,MCHG,LCHG

	set CID=$G(CID)
        if CID="" quit ""
 
        set xdata=Db.getOneRow("BALCMP,ACR,MCHG,LCHG","LN","CID")
	if $G(ER) quit ""
        set BAL=$P(xdata,$C(9),1)
        set ACR=$P(xdata,$C(9),2)
        set MCHG=$P(xdata,$C(9),3)
        set LCHG=$P(xdata,$C(9),4)

	quit (BAL+ACR+MCHG+LCHG)


public SUBPRIN(CID,PCIDSTAT)    // Sub-account principal

	/*  This subroutine returns the principal balance of any of the bank
	level sub-accounts used to drive general ledger transactions for
	problem loans.  The PCIDSTAT will represent the type of bank level
	sub-account
	ARGUMENTS:
	. CID           Account Number  /TYP=N/REQ/MECH=VAL
	. PCIDSTAT      Problem Loan Account Status
			1 - Current Account
			2 - Non-Accrual Account
			3 - Charge-Off Account
	*/
	new data
	type ResultSet rs=Db.select("BAL","LN","CVCID=:CID AND PCIDSTAT=:PCIDSTAT AND STAT=0")
	
	if rs.isEmpty() quit ""
	set data=rs.next(),data=rs.getRow()
	quit $G(data)
 
public SUBINT(CID,PCIDSTAT)     //Sub-account accrued interest amount
	/*  This subroutine returns the accrued interest amount of any of the
	bank level sub-accounts used to drive general ledger transactions for
	problem loans.  The PCIDSTAT will represent the type of bank level
	sub-account
	ARGUMENTS:
	. CID           Account Number  /TYP=N/REQ/MECH=VAL
	
	. PCIDSTAT      Problem Loan Account Status
	                1 - Current Account
	                2 - Non-Accrual Account
	                3 - Charge-Off Account
	*/

	new data
	type ResultSet rs=Db.select("ACR","LN","CVCID=:CID AND PCIDSTAT=:PCIDSTAT AND STAT=0")
	
	if rs.isEmpty() quit ""
	set data=rs.next(),data=rs.getRow()

	quit $G(data)


public SUBLC(CID,PCIDSTAT)      //Sub-account late charge amount
	/*  This subroutine returns the late charge amount of any of the bank
	level sub-accounts used to drive general ledger transactions for
	problem loans.  The PCIDSTAT will represent the type of bank level
	sub-account
	ARGUMENTS:
	. CID           Account Number  /TYP=N/REQ/MECH=VAR

	. PCIDSTAT      Problem Loan Account Status	
        		1 - Current Account
			2 - Non-Accrual Account
			3 - Charge-Off Account
	*/
	new data
	type ResultSet rs=Db.select("LCHG","LN","CVCID=:CID AND PCIDSTAT=:PCIDSTAT AND STAT=0")
	
	if rs.isEmpty() quit ""
	set data=rs.next(),data=rs.getRow()

	quit $G(data)


public SUBFEE(CID,PCIDSTAT)     //Sub-account total miscellaneous fee amount
	/*  This subroutine returns the fee amount of any of the bank level
	sub-accounts used to drive general ledger transactions for
	problem loans.  The PCIDSTAT will represent the type of bank level
	sub-account.
	ARGUMENTS:
	. CID           Account Number  /TYP=N/REQ/MECH=VAL
 
	. PCIDSTAT      Problem Loan Account Status
			1 - Current Account
			2 - Non-Accrual Account
			3 - Charge-Off Account
	*/

	new data
	type ResultSet rs=Db.select("MCHG","LN","CVCID=:CID AND PCIDSTAT=:PCIDSTAT AND STAT=0")
	
	if rs.isEmpty() quit ""
	set data=rs.next(),data=rs.getRow()

	quit $G(data)


public	TYPEDES(XCID)   //Product Type Description
	/*
	 The function is used to compute [LN]TYPEDES field
 
	 ARGUMENTS:
	 . XCID		Account Number   /TYP=N/REQ/MECH=VAL
 
	 RETURNS:
	       $$  Product Type Description
 
	 EXAMPLE:$$TYPEDES^LNCDI(CID)
	*/
 
	new DESC,XTYPE
 
	set XTYPE=Db.getOneRow("TYPE","LN","XCID")
	if 'XTYPE quit ""
 
	set DESC=Db.getOneRow("DES","PRODDFTL","XTYPE")

	quit DESC


public	MINPAYPT(XCID) // Percentage of Minimum Payment
	/*
	  The function is used to compute [LN]MINPAYPT field

	  ARGUMENTS:
		. XCID         Account Number   /TYP=N/REQ/MECH=VAL

	  RETURNS:
		$$  Percentage of Minimum Payment

	  EXAMPLE:
		$$MINPAYPT^LNCDI(CID)
	*/

	new data,XCALOP,XFACT,XPBPOR,XRPP

	set XFACT=""
	set data=Db.getOneRow("RPP,PBPOR","LN","XCID")
	set XRPP=$P(data,$C(9),1)
	set XPBPOR=$P(data,$C(9),2)

	if XRPP="" quit ""
	if XPBPOR'="" quit XPBPOR

	set XCALOP=Db.getOneRow("CALOP","UTBLRPP","XRPP")

	if XCALOP'=0 quit ""

	type ResultSet rs=Db.select("FACT","UTBLRPPB","PLAN=:XRPP")
	if rs.next() set XFACT=rs.getCol(1) quit

	quit XFACT


public	PBAL(XCID,XLSTDT)  // Penalty Balance
	
	/*
	 This function is used to compute [LN]PBAL field
        
          ARGUMENTS:
                . XCID         Account Number                   /TYP=N/REQ
                . XLSTDT       Penalty Balance Last Cutoff Date /TYP=D/REQ
         
          RETURNS:
                $$  Penalty Balance
         
          EXAMPLE:
                $$PBAL^LNCDI(CID,PBLSTDT)
	*/

	if ($G(XCID)="")!($G(XLSTDT)="") quit 0

	new PBAL,PGM
	type public Cache %CUVAR
	type RecordCUVAR cuvar=%CUVAR.getRecord("CUVAR")

	set PGM=cuvar.pbalrtn
	if PGM="" quit 0
        
	if $G(TJD)="" set TJD=cuvar.tjd

	if $E(PGM,1)="^" S PGM=PGM_"("_XCID_","_XLSTDT_",.PBAL)"
	else  quit 0

	set PBAL=0
	do @PGM		// Compute PBAL via rtn defined in CUVAR.PBALRTN

        quit PBAL       // Quit returning Penalty Balance


public	PMTDEL(XCID)	// Number of Payments Delinquent

	/*
	 This function is used to compute the [LN]PMTDEL field.

	 ARGUMENTS:
		. CID		Account Number		/TYP=N/REQ

	 RETURNS:
		$$ Number of Payments Delinquent

	 EXAMPLE:
		$$PMTDEL^LNCDI(CID)
	*/

	new data,DSEQ,SCHSEQ,STAT

	set data=Db.getOneRow("DSEQ,SCHSEQ,STAT","LN","XCID")
	set DSEQ=$P(data,$C(9),1)
	set SCHSEQ=$P(data,$C(9),2)
	set STAT=$P(data,$C(9),3)

	if STAT=4 quit ""

	quit SCHSEQ-DSEQ
	
	
public FBP(Number TYPE)	// Fixed bullet product

	/*
	 This function is used to compute the [LN]FBP field.

	 ARGUMENTS:
		. TYPE		Account type		/REQ

	 RETURNS:
		$$ PRODCTL.FBP from product of this type

	 EXAMPLE:
		$$FBP^LNCDI(TYPE)
	*/

	type RecordPRODCTL prodctl=Db.getRecord("PRODCTL","TYPE=:TYPE",1)
	
	quit prodctl.fbp

Public AGBAL(Number CID, Date FROMDT) //BASEL II
	/* Returns the aggregate balance of a loan over a period
	of months specified by the input parameters. This value
	is calculated based on the dollar-days fields (LN.DDBAL*)
	where the aggregate balance is equal to the sum of the 
	dollar days for the specified months, less an amount equal
	to the current principal balance times the number of days
	remaining in the month. */
	
	type String DDBALX
	type Number i, DLIM, FROMMNTH, SUMDDYS, SYSMNTH
	type RecordLN ln = Db.getRecord("LN","CID",1)
	if ln.getMode()= 0 quit ""
	set SUMDDYS = 0
	set FROMMNTH = FROMDT.month()
	set SYSMNTH = %SystemDate.month()
	for i = FROMMNTH:1:(SYSMNTH - 1) do {
		set DDBALX = "DDBAL"_i
		set SUMDDYS = SUMDDYS + ln.@DDBALX
		}
	set DLIM = %SystemDate.daysInMonth() - %SystemDate.day()
	set SUMDDYS = SUMDDYS + ln.ddbalcur - (ln.bal * DLIM)
	
	quit SUMDDYS
	
Public AGBALQ(Number CID)
	/*Aggregate Balance Quarter-to-Date
	  The accumulated daily account principal balance 
	  for the current quarter.  
	*/
	
	type Number ACQTRBAL
	type Date QTRFDT
	type Date TMPDT = (%SystemDate + 1).nextFreqDate("-1QA1")
	type RecordLN ln = Db.getRecord("LN","CID",1)
	if TMPDT = %SystemDate quit ln.bal
	set QTRFDT = %SystemDate.nextFreqDate("-1QA1")
	set ACQTRBAL = $$AGBAL(CID,QTRFDT)
	quit ACQTRBAL

Public AGBALH(Number CID)
	/*Aggregate Balance Half-Year-to-Date
	  The accumulated daily account principal balance 
	  for the current half-year.
	*/

	type Number ACHLFBAL
	type Date HLFFDT
	type Date TMPDT = (%SystemDate + 1).nextFreqDate("-2QA1")
	type RecordLN ln = Db.getRecord("LN","CID",1)
	if TMPDT = %SystemDate quit ln.bal
	set HLFFDT = %SystemDate.nextFreqDate("-2QA1")
	set ACHLFBAL = $$AGBAL(CID,HLFFDT)
	quit ACHLFBAL


Public AGBALY(Number CID)
	/*Aggregate Balance Year-to-Date
	  The accumulated daily account principal balance 
	  for the current year.
	*/

	type Number ACYLYBAL
	type Date YLYFDT
	type Date TMPDT = (%SystemDate + 1).nextFreqDate("-JAN1")
	type RecordLN ln = Db.getRecord("LN","CID",1)
	if TMPDT = %SystemDate quit ln.bal	
	set YLYFDT = %SystemDate.nextFreqDate("-JAN1")
	set ACYLYBAL = $$AGBAL(CID,YLYFDT)
	quit ACYLYBAL

Public AGDAYS(Number CID, Date FROMDT)
	/*Number of days the account has been open/active
	for which the aggregate balance is calculated 
	during a period of time */

	type Number ACTVDYS
	type RecordLN ln = Db.getRecord("LN","CID",1)
	if ln.getMode() = 0  quit ""
	if ln.odt > FROMDT set FROMDT = ln.odt
	set ACTVDYS = %SystemDate - FROMDT
	quit ACTVDYS

Public AGDAYSQ(Number CID)
	/*Aggregate Days Quarter-to-Date
	  Number of days the account has been open/ active 
	  for which the aggregate balance is calculated 
	  during the last quarter.
	*/
	type Date QTRFDT
	type Number AGBALQR
	type Date TMPDT = (%SystemDate + 1).nextFreqDate("-1QA1")
	if TMPDT = %SystemDate quit 1		
	set QTRFDT = %SystemDate.nextFreqDate("-1QA1")
	set AGBALQR = $$AGDAYS(CID,QTRFDT)
	quit AGBALQR


Public AGDAYSH(Number CID)
	/*Aggregate Days Half-Year-to-Date
	  Number of days the account has been open/ active 
	  for which the aggregate balance is calculated 
	  during the last half year.
	*/
	type Date HLFFDT
	type Number AGBALHF
	type Date TMPDT = (%SystemDate + 1).nextFreqDate("-2QA1")
	if TMPDT = %SystemDate quit 1		
	set HLFFDT = %SystemDate.nextFreqDate("-2QA1")
	set AGBALHF = $$AGDAYS(CID,HLFFDT)
	quit AGBALHF

Public AGDAYSY(Number CID)
	/*Aggregate Days Year-to-Date
	  Number of days the account has been open/ active 
	  for which the aggregate balance is calculated 
	  during the current year.
	*/

	type Date YLYFDT
	type Number AGBALYR
	type Date TMPDT = (%SystemDate + 1).nextFreqDate("-JAN1")
	if TMPDT = %SystemDate quit 1		
	set YLYFDT = %SystemDate.nextFreqDate("-JAN1")
	set AGBALYR = $$AGDAYS(CID,YLYFDT)
	quit AGBALYR

public CFPROC(Number CID)
	
	/*
	 This function is used to compute the [LN]CFRPROC - Cash Flow Projection Code
	 
	 This field is a code used to determine whether an account's cash flow needs to be 
	 re-projected. The value of this computed column is equal to the concatenated values 
	 of the loan's Distribution 1 Next Due (LN.DIST1ND), Scheduled Next Date (LN.SCHND) and
	 Last History Sequence (LN>TLSEQ).
	 
	 ARGUMENTS:
		. CID	Account Number			/TYP=N/REQ

	 RETURNS:
		$$ Cash Flow Projection Code

	 EXAMPLE:
		$$CFPROC^LNCDI(CID)
	*/

	type RecordLN ln = Db.getRecord("LN","CID = :CID")
	quit ln.dist1nd_ln.schnd_ln.tlseq
	
public PIPS(String PCM)			// Payment Calculation Method

	/*
	 This function is used to compute the [LN]PIPS - P&I Payment Schedule
	 Loan field, which indicates whether or not the account is a P&I loan
	 utilizing payment schedules.
	 
	 ARGUMENTS:
		. PCM	Payment Calculation Method	/TYP=N/REQ

	 RETURNS:
		$$ 1 - P&I Payment Schedule Loan
		   0 - Not a P&I Payment Schedule Loan

	 EXAMPLE:
		$$PIPS^LNCDI(PCM)
	*/

	type public Cache %CACHE()
	type Boolean PIPS

	type RecordSTBLPCM stblpcm = %CACHE("STBLPCM").getRecord("STBLPCM", "KEY = :PCM")

	if (stblpcm.pcmp.extract(3) = 6) set PIPS = 1
	else  set PIPS = 0

	quit PIPS


public EXTTOTTSC(Number CID)		// Account Number

	/*
	 This function is used to compute the [LN]EXTTOTSC - No. of Schedule
	 Extensions field.
	 This field indicates the number of P&I payment schedule extensions
	 processed for the loan.
	 
	 ARGUMENTS:
		. CID	Account Number			/TYP=N/REQ

	 RETURNS:
		$$ No. of Schedule Extensions

	 EXAMPLE:
		$$EXTTOTSC^LNCDI(CID)
	*/

	type Number EXTTOTSC

	type ResultSet rs = Db.select("COUNT(*)", "LNPS1", "CID = :CID AND PMTEXT = 1")

	if rs.next() set EXTTOTSC = rs.getCol(1)
	else  set EXTTOTSC = 0

	quit EXTTOTSC


public PMTPIREM(Number CID,		// Account Number
                Date PDD)		// Payment Due Date

	/*
	 This function is used to compute the [LNPS1]PMTPIREM - P&I Payment
	 Amount Remaining field.
	 This field indicates the Amount Still Due from the bill record
	 [LNBIL1.CASD], if bill is already generated for the payment schedule.
	 If no bill is generated, the P&I Payment amount from payment schedule
	 record [LNPS1.PMTPI].
	 
	 ARGUMENTS:
		. CID	Account Number			/TYP=N/REQ
		. PDD	Payment Due Date		/TYP=D/REQ

	 RETURNS:
		$$ P&I Payment Amount Remaining

	 EXAMPLE:
		$$PMTPIREM^LNCDI(CID, PDD)
	*/

	type Number PMTPIREM = 0

	type Resultset rs = Db.select("CASD", "LNBIL1", "CID = :CID AND CDPD = :PDD")

	if 'rs.isEmpty() do {
	
		while rs.next() set PMTPIREM = PMTPIREM + rs.getCol("CASD")
		}
	else  do {

		type RecordLNPS1 lnps1 = Db.getRecord("LNPS1", "CID = :CID, PDD = :PDD")

		set PMTPIREM = lnps1.pmtpi
		}

	quit PMTPIREM