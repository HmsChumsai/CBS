//DO NOT MODIFY  Channel Transactions Monitor|ZMKORN029|||||||1
  /*
	ORIG: Rapeepan Y. - 14 Aug 2008
	DESC: Channel Transactions Monitor

---- Comments --------------------------------------------------------

---- Revision History ------------------------------------------------

	July 29, 2011	Srisuda A.		
			- Add to check credit trasaction
			- Add to check Transaction Location is same
			- Add to check Minumum Amount of history transaction
			- Add to check Time Interval is more than or same as limited Time Interval 
			- Add to check Transaction do more than 1 time

	July 22, 2011	Srisuda A.		
			- Set ZSUSDLOG.DATE=$P($H,",",1)
			
	July 20, 2011	Srisuda A.		
			- Set ZSUSDLOG.DATE=%CurrentDate
	
	Oct 15, 2008	Rapeepan Y.
			Modified Linetag : HISTTIME , adding condition for check terminal location
				of ATM from Transaction Location field(dtj.tlo&hist.tlo) for R030 
				(Unusual trans. in same card but come from different trans. location)
	
	Oct 08, 2008	Rapeepan Y. 
			1. Modified Linetag : INIT and DETRULE , by adding check Min Tx Amount for R030
			2. Modified Linetag : HISTTIME 
				- Change get SystemDate from TJD to ^CUVAR(2)
				
	Oct 29, 2008	Rapeepan Y.
			- Add Rule Detection R029

	Sep 03, 2008	Srisuda A.
			- Add Rule Detection R031

	Dec 02, 2008	Srisuda A.
			- Change Global log status monitor from ZSVRMCTR to ZMONCTRL
			
	Dec 25, 2008	Srisuda A.
			- R031: Check ETC is SSB transaction by ZUTBLTRCD.PRODFLG="PB"

	Jan 16, 2009	Srisuda A.
			- Added to get value for field zsusdlog.ovrname

	Aug 24, 2009 	Srisuda A.
			- Modify how to set/get override user id from SPV(Supervisory Override) - LineTag:GOVRID^ZSURUTL

	Sep 04, 2009 	Srisuda A.
			- Add Rule Detection R046(A), R048(A) ,R049(A) 
	
	Nov 06,2009	Srisuda A.
			- Add Channel(ZSUSDLOG.CHNL) for Rule R028, R029, R031

	Nov 13, 2009	Srisuda A.
			- Check transaction is needed to Analyze in Surveillance $$CANLYZTR^ZSURUTL

	Jan 18, 2010	Srisuda A.		
			- Add Field Flag of KTB User and Channel Reference

	Jan 22, 2010	Srisuda A.
			- Skip transaction W/D for Fee

	Feb 08, 2010	Srisuda A.
			- Not Initiate Channel for R031, R032			

	Feb 19, 2010	Srisuda A.
			- Initiate Channel for R031 but not define channel.	

	Mar 22, 2010	Srisuda A.		
			- KTB Update to Profile 7.2

	Jun 15, 2010	Srisuda A.		
			- Modify for function Rerun
			
	July 05, 2011	Srisuda A.		
			- R029 Check only debit(0) transaction

	July 19, 2011	Srisuda Assawadeekul
			Modify R030 : If Fee Transaction then quit
				    : ATM transaction time	
				    																					
 ****** Consider using setAuditFlag for all objects in this procedure
   example :do dep.setAuditFlag(1)

 */
	// D TDTJ^ZMKORN029(61859,6185939985,91160197,10176)
MAIN(Number ZREDAYS)

	catch error {          
		type String ET

		set ET=error.type
		if ET["%GTM-" do ZE^UTLERR
		set ET=ET_"-"_error.thrownAt
		set ET=ET_","_error.description

		do LOG^ZSUREXC($T(+0),"*",%FN.get(),"",%ZTSEQ.get(),ET)
		}

	type Date DATE
	type Number EXIT,SEQ,MONTIME
	type String THRSHAMT
	
	// cache rule switch
	type String ZRULESW()
	
	// cache common condition applied
	type String TMPCAPPL()
	
	// cache common condition
	type String TMPCCIF(),TMPCPRDT(),TMPCCID(),TMPCKCUS()

	// cache detail rule to exclude
	type String TMPDRULE()
	
	// format THR0XX(RULE,SEQ)=VALUE
	// ZUTBLSUR028A , ZUTBLSUR030A
	// R028,1 - Limit Amount
	// R030,1 - Time Interval
	type Number THR028X(),THR030X()
	
	// Common condition of each rule
	// format1 THR00X(RULE,SEQ)=VALUE for Rule 29
	type Number THR00X()
	
	type Number ZLASTDD

	// Number of days to rerun
	set ZREDAYS=$G(ZREDAYS)
	set ZREDAYS=+ZREDAYS
	
	do SYSVAR^SCADRV0()
	
	lock +^ZMONCTRL("ZTRNCHNL"):5 else  quit
	
	type RecordZMONCTRL zsvrmctr=Db.getRecord("ZMONCTRL","PROCESSOR='ZTRNCHNL'",1)
	set zsvrmctr.pid=$$DECHEX^%ZHEX(%ProcessID)
	set zsvrmctr.sysdate=%CurrentDate
	set zsvrmctr.startime=%CurrentTime
	set zsvrmctr.stopdate=""
	set zsvrmctr.stoptime=""
	set zsvrmctr.stop=0
	do zsvrmctr.bypassSave()
	
		
	set DATE=%SystemDate-ZREDAYS
		
	set ZLASTDD=Db.prevKey("ZLKCHNL","TJD=''")
	
	if ZLASTDD>DATE set DATE=ZLASTDD
	
	
	//do INIT(.ZRULESW,.TMPCCIF,.TMPCPRDT,.TMPCCID,.TMPCKUS,.TMPCAPPL,.TMPDRULE,.THR028X,.THR030X)
	do INIT(.ZRULESW,.TMPCCIF,.TMPCPRDT,.TMPCCID,.TMPCKUS,.TMPCAPPL,.TMPDRULE,.THR028X,.THR030X,.THR00X)
	
	
	
	set EXIT=0
	for  do { quit:EXIT
		type RecordZLKCHNL zlkchnl=Db.getRecord("ZLKCHNL","TJD=:DATE",1)
		
		// Wait for next time interval 
                //set X=$$WAIT^%ZFUNC(10)
		
		set SEQ=Db.nextKey("ZANLYZTR","TJD=:DATE,SEQ=:zlkchnl.lstseq")
		if SEQ.isNull() do { quit
			set EXIT=$$CTRLX 
			
			// find next date for ZANLYZTR
			type ResultSet zrstr=Db.select("TJD","ZANLYZTR","TJD>:DATE")
			if zrstr.next() set DATE=zrstr.getCol(1)
			
			hang MONTIME
			}

		type RecordZANLYZTR zanlyztr=Db.getRecord("ZANLYZTR","TJD=:DATE,SEQ=:SEQ")

		if zanlyztr.fid="DTJ" do DTJ(DATE,zanlyztr.keys,.ZRULESW,.TMPCCIF,.TMPCPRDT,.TMPCCID,.TMPCKUS,.TMPCAPPL)

		if zanlyztr.fid="DMJ" do DMJ(DATE,zanlyztr.keys)
			
		set zlkchnl.lstseq=SEQ
		do zlkchnl.bypassSave()
		}

	lock -^ZMONCTRL("ZTRNCHNL")
	type RecordZMONCTRL zmonctrx=Db.getRecord("ZMONCTRL","PROCESSOR='ZTRNCHNL'")
	set zmonctrx.stopdate=%CurrentDate
	set zmonctrx.stoptime=%CurrentTime
	do zmonctrx.bypassSave()
	quit
	
	
TDTJ(DATE,DATETIME,CID,TSEQ)
	// d TDTJ^ZTRNCHNL(61854,6185403908,2280030322,1810)
	do SYSVAR^SCADRV0()
	type String ZRULESW,TMPCCIF,TMPCPRDT,TMPCCID,TMPCKUS,TMPCAPPL,TMPDRULE,THR028X,THR030X,THR00X
	do INIT(.ZRULESW,.TMPCCIF,.TMPCPRDT,.TMPCCID,.TMPCKUS,.TMPCAPPL,.TMPDRULE,.THR028X,.THR030X,.THR00X)
	type String KEYS
	set KEYS=DATETIME_","_CID_","_TSEQ	
	
	do DTJ(DATE,KEYS,.ZRULESW,.TMPCCIF,.TMPCPRDT,.TMPCCID,.TMPCKUS,.TMPCAPPL)
	quit
	
DTJ(Date DATE, String KEYS, String ZRULESW(), String TMPCCIF(), String TMPCPRDT(), String TMPCCID(), String TMPCKUS(), String TMPCAPPL)

	type public Cache %CACHE()

	type Number CID,DATETIME,TSEQ
	type String TSO()
	type Number ZR028FLG,ZR030FLG,ZR031FLG
	set (ZR028FLG,ZR030FLG,ZR031FLG)=""
	
	// Transaction amount (BAHT)
	type Number ZTRAMT
	catch error {
		type String ET

		set ET=error.type
		if ET["%GTM-" do ZE^UTLERR
		set ET=ET_"-"_error.thrownAt
		set ET=ET_","_error.description

		do LOG^ZSUREXC($T(+0),"*",%FN.get(),"",%ZTSEQ.get(),ET)
		}

	set DATETIME=KEYS.piece(",",1)
	set CID=KEYS.piece(",",2)
	set TSEQ=KEYS.piece(",",3)

	type RecordDTJ dtj=Db.getRecord("DTJ","TJD=:DATE,DATETIME=:DATETIME,CID=:CID,TSEQ=:TSEQ")
			
	// If Fee Transaction then quit
	if $$CHKISFEE^ZSURUTL(dtj.etc) quit
						
	// set transaction amount in thai baht
	set ZTRAMT=dtj.tot
	if (dtj.crcd'="THB"),(+dtj.sysbase'=0) set ZTRAMT=+dtj.sysbase
	
	do OUT^UTSO(.TSO,dtj.tso)
	
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC=:dtj.etc")
	type RecordSCAU scau=Db.getRecord("SCAU","UID=:dtj.uid")
	type RecordSCAU0 scau0=%CACHE("SCAU0").getRecord("SCAU0","UCLS=:scau.%ucls")

	type RecordACN acn=Db.getRecord("ACN","CID=:dtj.cid")
	type RecordCIF cif=Db.getRecord("CIF","ACN=:acn.acn")

	// If this transaction don't need to Analyze in Surveillance then quit
	if '$$CANLYZTR^ZSURUTL(.THR00X,scau.%ucls,scau0.zbatch,dtj.itc7) quit	
	
	// check if common condition applied or not
	// check exclusion condition for each rule
	set ZR028FLG=$$DETRULE("R028",acn,cif,scau,dtj,ZTRAMT)
	set ZR030FLG=$$DETRULE("R030",acn,cif,scau,dtj,ZTRAMT)
				
	// Any rule need sum hist in a day
	if ZR028FLG!ZR030FLG do RSUMHIST(.TSO,dtj,trn,scau,scau0,acn,cif,.THR028X,.THR030X)
	
	// Check Withdraw ATM in same day over threshold count 
	if $$DETRULE("R029",acn,cif,scau,dtj,ZTRAMT) do R029(.TSO,dtj,trn,scau,scau0,acn,cif)	

	// Description of value of ZRXXXFLG (R031FLG)
	// -If ZRXXXFLG=0 is excluded rule by Parameter Configuration
	// -If ZRXXXFLG=1 is included rule by Parameter configuration but not passed condition of rule detection
	// -If ZRXXXFLG=2 is included rule by Parameter configuration and passed condition of rule detection
	set ZR031FLG=$$DETRULE("R031",acn,cif,scau,dtj,ZTRAMT)
	if ZR031FLG set ZR031FLG=$$R031CHK(acn,dtj)
	if ZR031FLG do {
		// Ignore ec. / reversed transaction. 
		if +dtj.tamt'>0 quit
		if dtj.histrval'="" quit 
		
		do RTIMHIST(.TSO,dtj,scau,acn,cif,.THR00X,0,"R031")
		//if (ZR031FLG=2) do SUSPECT(.TSO,dtj,trn,scau,scau0,acn,cif,"R031")
		if (ZR031FLG=2) do {
			type String ZRFLG
			set ZRFLG=""
			do INISUR51^ZSURUTL("R031",.ZRFLG)
			do SUSDTJ^ZSURUTL(.TSO,dtj,trn,scau,scau0,acn,cif,"R031",.ZRFLG)
		}
	}
	
	//***********************Start-Surveillance 52************************************/
	do SURCHNL(.TSO,dtj,trn,scau,scau0,acn,cif,.THR00X)
	quit

TSURCHNL(String DATE,
	 String DATETIME,
	 String CID,
	 String TSEQ)
	// Ex. to Run	: 
	/*
	For Test R049 :
		W ^DTJ(60898,6156554773,5398,20)
		K ^ZSVRCTTX("R049",60898,0,1937,1000)
		D TSURCHNL^ZTRNCHNL(60898,6156554773,5398,20)
	For Test R046 :
		W ^DTJ(60873,6153534142,2968,60)
		K ^ZSVRCTTX("R046",60873,0,9999999999,15000)
		D TSURCHNL^ZTRNCHNL(60873,6153534142,2968,60)
		
	For Test R050 : 
		W ^DTJ(60963,6164653398,100003948523,82)
		D TSURCHNL^ZTRNCHNL(60963,6164653398,100003948523,82)
	*/
	type String ZRULESW,TMPCCIF,TMPCPRDT,TMPCCID,TMPCKUS,TMPCAPPL,TMPDRULE,THR028X,THR030X,THR00X
	do INIT(.ZRULESW,.TMPCCIF,.TMPCPRDT,.TMPCCID,.TMPCKUS,.TMPCAPPL,.TMPDRULE,.THR028X,.THR030X,.THR00X)


	type public Cache %CACHE()
	type RecordDTJ dtj=Db.getRecord("DTJ","TJD=:DATE,DATETIME=:DATETIME,CID=:CID,TSEQ=:TSEQ")
	
	// set transaction amount in thai baht
	set ZTRAMT=dtj.tot
	if (dtj.crcd'="THB"),(+dtj.sysbase'=0) set ZTRAMT=+dtj.sysbase
	
	do OUT^UTSO(.TSO,dtj.tso)
	
	type RecordTRN trn=%CACHE("TRN").getRecord("TRN","ETC=:dtj.etc")
	type RecordSCAU scau=Db.getRecord("SCAU","UID=:dtj.uid")
	type RecordSCAU0 scau0=%CACHE("SCAU0").getRecord("SCAU0","UCLS=:scau.%ucls")

	type RecordACN acn=Db.getRecord("ACN","CID=:dtj.cid")
	type RecordCIF cif=Db.getRecord("CIF","ACN=:acn.acn")
	
	do SURCHNL(.TSO,dtj,trn,scau,scau0,acn,cif,.THR00X)
	
	quit
	
	
TSURDMJ(String DATE,
	 String DATETIME,
	 String CID,
	 String TSEQ)
	
	type String ZRULESW,TMPCCIF,TMPCPRDT,TMPCCID,TMPCKUS,TMPCAPPL,TMPDRULE,THR028X,THR030X,THR00X
	do INIT(.ZRULESW,.TMPCCIF,.TMPCPRDT,.TMPCCID,.TMPCKUS,.TMPCAPPL,.TMPDRULE,.THR028X,.THR030X,.THR00X)

	type String KEYS
	set KEYS=DATETIME_","_CID_","_TSEQ
	do DMJ(DATE,KEYS)
	
	quit	
		
SURCHNL(String TSO(),
	RecordDTJ dtj,
	RecordTRN trn,
	RecordSCAU scau,
	RecordSCAU0 scau0,
	RecordACN acn,
	RecordCIF cif,
	String THR00X())
	// Surveillance detects Channel Transaction
	
	// Check Channel of DTJ Transaction
	type String ZRFLG
	set ZRFLG("ZCHNL")=$$CHKCHNL^ZSURUTL(dtj.etc,dtj.tlo,.THR00X)
	
	// Set Present Transaction Amount
	set ZRFLG("ZTRAMT",dtj.itc1)=$G(ZTRAMT)
	
	if '($G(ZRFLG("ZCHNL"))="") do {
		// R046
		do R046(.TSO,dtj,trn,scau,scau0,acn,cif,.ZRFLG)
		
		// R049
		set ZRFLG("R049")=$$R049(.TSO,dtj,trn,scau,scau0,acn,cif,.ZRFLG)
		if ($G(ZRFLG("R049"))=2) do SUSDTJ^ZSURUTL(.TSO,dtj,trn,scau,scau0,acn,cif,"R049",.ZRFLG)
		
		// R042
		set ZRFLG("R042")=$$R042CDBT(.TSO,dtj,trn,scau,scau0,acn,cif,.ZRFLG)
		
		// R050
		set ZRFLG("R050")=$$R050CDBT(.TSO,dtj,trn,scau,scau0,acn,cif,.ZRFLG)

		// Check Credit Transaction of TTX
		// - If one of the flag of rules is 1 then continue
		do TTXCHK(dtj.tjd,dtj.brcd,dtj.uid,dtj.trc,.ZRFLG)
		
		// If flag of each rule(ZRFLG(RULE)) is 2 then insert suslog record
		if ($G(ZRFLG("R042"))=2) do SUSDTJ^ZSURUTL(.TSO,dtj,trn,scau,scau0,acn,cif,"R042",.ZRFLG)
		
		// If flag of each rule(ZRFLG(RULE)) is 2 then insert suslog record
		if ($G(ZRFLG("R050"))=2) do SUSDTJ^ZSURUTL(.TSO,dtj,trn,scau,scau0,acn,cif,"R050",.ZRFLG)
		
	}
	quit

R046(String TSO(),
	RecordDTJ dtj,
	RecordTRN trn,
	RecordSCAU scau,
	RecordSCAU0 scau0,
	RecordACN acn,
	RecordCIF cif,
	String ZRFLG)
	
	// R046-Check Error Correction Transaction in the same day
	type String ZR046
	set ZR046="R046"_$G(ZRFLG("ZCHNL"))
	set ZRFLG("R046","RULE")=ZR046
	
	// - Check Rule Switch
	if '$D(ZRULESW(ZR046)) quit
	
	// - Check Common Filter
	if '$$DETCOM^ZSURUTL(ZR046,.acn,.cif) quit
	
	// - Check This Trasaction is Error Correction By check ITC6(ITC Byte 6 - Error-Corrected Flag) and amount of transaction is less than 0
	if '(dtj.itc6=1) quit
	if '(dtj.tamt<0) quit


	type Number ZR046FLG
	set ZR046FLG=0
	// If Account in ZUTBLSUIUCLS is include for R046
	if $D(TMPDRULE("ZSUIUCLS",ZR046)),(dtj.uid'=""),Db.isDefined("ZUTBLSUIUCLS","RULE=:ZR046,UCLS=:scau.%ucls") set ZR046FLG=1
	if (ZR046FLG=0) quit
	
	// Check ZSVRCTTX Record 
	// - if define then quit from check R046
	// - if not define then add record ZSVRCTTX and continue check R046
	if ($$SVRCTTX^ZSURUTL(ZR046,dtj.tjd,dtj.brcd,dtj.uid,dtj.trc)) quit
	
	// Insert record to Table ZSVRECTR for count Error Correction Transaction 
	// and Return Last Sequence of Table ZSVRECTR 
	// and Compare Number of Error Correction Transaction
	if '($$ECTR^ZSURUTL(ZR046,dtj)>$G(THR00X("ZSURTCNT",ZR046,"TCOUNT"))) quit
	// - Check Monitoring/Non-Monitoring Parameter
	if $$DETDTJ^ZSURUTL(ZR046,acn,cif,scau,dtj,ZTRAMT) do SUSDTJ^ZSURUTL(.TSO,dtj,trn,scau,scau0,acn,cif,"R046",.ZRFLG)

	quit	

R049(String TSO(),
	RecordDTJ dtj,
	RecordTRN trn,
	RecordSCAU scau,
	RecordSCAU0 scau0,
	RecordACN acn,
	RecordCIF cif,
	String ZRFLG)
	
	// R049-Check Appear Transaction After Close Branch
	
	set ZRFLG("R049","RULE")="R049"_$G(ZRFLG("ZCHNL"))
			
	// - Check Rule Switch
	if '$D(ZRULESW($G(ZRFLG("R049","RULE")))) quit 0
	
	// - If transaction is posted from Boot Exchange by Transaction Location (EX*)
	if $E(dtj.tlo,1,2)="EX" quit 0
	
	// - Check Common Filter
	if '$$DETCOM^ZSURUTL($G(ZRFLG("R049","RULE")),.acn,.cif) quit 0
	
	// - Check only Financial Transaction
	if '$$ISFIN^ZSURUTL(dtj.itc1) quit 0

	// Check ZSVRCTTX Record 
	// - if define then quit from check R049
	// - if not define then add record ZSVRCTTX and continue check R049
	if ($$SVRCTTX^ZSURUTL($G(ZRFLG("R049","RULE")),dtj.tjd,dtj.brcd,dtj.uid,dtj.trc)) quit 0
	
	// - Check is In Duration and Transaction is posted when Branch is closed.
	if '$$CHKCBTIM^ZSURUTL(dtj.tjd,dtj.brcd,dtj.time,$G(THR00X("ZSURDUR",$G(ZRFLG("R049","RULE")),"TIMSTR")),$G(THR00X("ZSURDUR",$G(ZRFLG("R049","RULE")),"TIMEND"))) quit 0
	
	// - Check Monitoring/Non-Monitoring Parameter
	if $$DETDTJ^ZSURUTL($G(ZRFLG("R049","RULE")),acn,cif,scau,dtj,ZTRAMT) quit 2 
	quit 0	
	
R050CDBT(String TSO(),
	RecordDTJ dtj,
	RecordTRN trn,
	RecordSCAU scau,
	RecordSCAU0 scau0,
	RecordACN acn,
	RecordCIF cif,
	String ZRFLG)
	
	// R050-Check Witdraw Loan account(Debit Transaction) and transfer to deposit account of other except main loander and co-loander
	
	set ZRFLG("R050","RULE")="R050"_$G(ZRFLG("ZCHNL"))
			
	// - Check Rule Switch
	if '$D(ZRULESW($G(ZRFLG("R050","RULE")))) quit 0
	
	// - Check Common Filter
	if '$$DETCOM^ZSURUTL($G(ZRFLG("R050","RULE")),.acn,.cif) quit 0
	
	// - Check only Loan Account
	if '(acn.cls="L") quit 0
	
	// - Check only Debit Transaction
	if '(dtj.itc1=0) quit 0
	
	// - Set Co-Customer from CIF-ACN Relationship Index
	set ZRFLG("R050","RELACN")=$$GRELACN^ZSURUTL(dtj.cid)
	
	// - Check Monitoring/Non-Monitoring Parameter
	if $$DETDTJ^ZSURUTL($G(ZRFLG("R050","RULE")),acn,cif,scau,dtj,ZTRAMT) quit 1
	quit 0	

TTXCHK(Number ZTJD, Number ZBRCD, String ZUID, Number  ZORTSEQ, String ZRFLGTTX)
	// Check TTX
	
	// Check flag of each rule for analyze need to check TTX or not
	if ('($G(ZRFLGTTX("R042"))=1)&'($G(ZRFLGTTX("R050"))=1)) quit
	
	// Initial Flag for each rule that is used in TTXCHK
	set ZRFLGTTX("R042","TMPFLG")=0
	set ZRFLGTTX("R050","TMPFLG")=0
		
	type Number ZTSEQ,ZTSEQCHK
	set (ZTSEQ,ZTSEQCHK)=(ZORTSEQ\1000)*1000
	set ZTSEQCHK=ZTSEQCHK+999
	// Loop for find records in TTX
	for  set ZTSEQ=$O(^TTX(ZTJD,ZBRCD,ZUID,ZTSEQ)) quit:((ZTSEQ>ZTSEQCHK)!(ZTSEQ=""))  do { 
		
		type RecordTTX ttx=Db.getRecord("TTX","TJD=:ZTJD,BRCD=:ZBRCD,UID=:ZUID,TSEQ=:ZTSEQ")
		type Number ZTRAMT
		// set transaction amount in thai baht
		set ZTRAMT=ttx.tamt
		if (ttx.crcd'="THB"),(+ttx.sysbase'=0) set ZTRAMT=+ttx.sysbase
		
		// Check Bank Transaction(GL Account)
		if 'Db.isDefined("ACN","CID=:ttx.cid") quit
		
		// Check only Customer Transaction
		type RecordACN acn=Db.getRecord("ACN","CID=:ttx.cid")
		type RecordCIF cif=Db.getRecord("CIF","ACN=:acn.acn")
		type RecordSCAU scau=Db.getRecord("SCAU","UID=:ttx.uid")

		// Check only Credit(1) Transaction (R034,R035,R038)
		if ttx.itc1 do {
			// Check is it Credit of Debit Transaction by Transaction Amount
			if '(+$G(ZRFLGTTX("ZTRAMT",0))=+ZTRAMT) quit
			
			// R042-Check Witdraw and transfer to other account with high amount
			if ($G(ZRFLGTTX("R042"))=1) set ZRFLGTTX("R042","TMPFLG")=($$R042CCRT(.ZRFLGTTX,acn,cif,scau,ttx,ZTRAMT))!$G(ZRFLGTTX("R042","TMPFLG"))
				
			// R050-Check Witdraw Loan account(Debit Transaction) and transfer to deposit account of other except main loander and co-loander
			if ($G(ZRFLGTTX("R050"))=1) set ZRFLGTTX("R050","TMPFLG")=($$R050CCRT(.ZRFLGTTX,acn,cif,scau,ttx,ZTRAMT))!$G(ZRFLGTTX("R050","TMPFLG"))
		}
	}
	if ($G(ZRFLGTTX("R042"))=1),($G(ZRFLGTTX("R042","TMPFLG"))) set ZRFLGTTX("R042")=2
	if ($G(ZRFLGTTX("R050"))=1),($G(ZRFLGTTX("R050","TMPFLG"))) set ZRFLGTTX("R050")=2
 
	quit

R050CCRT(String ZRFLGTTX,
	RecordACN acn,
	RecordCIF cif,
	RecordSCAU scau,
	RecordTTX ttx,
	String ZTRAMT)
	// Check condition of R050 with Transfering Credit Transaction(To Account)

	// If credit(1) transaction then continue
	if 'ttx.itc1 quit 0
	
	// Check Non-Monitoring Parameter
	if '($$DETTTX^ZSURUTL($G(ZRFLG("R050","RULE")),acn,cif,scau,ttx,ZTRAMT)) quit 0

	// -  If Customer Inclued in Co-Customer then it is not suspected transaction
	if $$CHKINCLU^ZSURUTL($G(ZRFLG("R050","RELACN")),cif.acn) quit 0
	
	quit 1
		
R031CHK(RecordACN acn,
	RecordDTJ dtj)
	// Check other condition of R032
	// Detect only debit(0) transaction 
	if dtj.itc quit 0
	// If ETC is not SSB Transaction then it is not included R031
	if '$$PRDSSB(dtj.etc) quit 0
	quit 1
	
DETRULE(String RULETYPE,
	RecordACN acn,
	RecordCIF cif,
	RecordSCAU scau,
	RecordDTJ dtj,
	String ZTRAMT)
	
	/*
	determine rule check flag by checking 
	1. Rule Switch is ON/OFF
	2. Common condition 
	3. Condition to exclude for each rule
	*/

	type Number ZRET
	
	set ZRET=1
	
	// rule switch
	if '$D(ZRULESW(RULETYPE)) set ZRET=0
	
	// common condition
	if ($G(TMPCAPPL(RULETYPE,1))=1),$D(TMPCCIF(acn.acn)) set ZRET=0
	if ($G(TMPCAPPL(RULETYPE,2))=1),$D(TMPCPRDT(acn.type)) set ZRET=0
	if ($G(TMPCAPPL(RULETYPE,3))=1),$D(TMPCCID(acn.cid)) set ZRET=0
	if ($G(TMPCAPPL(RULETYPE,4))=1),$D(TMPCKCUS(cif.zktbccode)) set ZRET=0


	if 'ZRET quit ZRET

	
	// Condition to exclude for each rule
	/*
	if $D(TMPDRULE("ZUTBLSUXPRDT",RULETYPE)),(acn.type'=""),Db.isDefined("ZUTBLSUXPRDT","RULE=:RULETYPE,PRDT=:acn.type") quit 0
	*/
	if $D(TMPDRULE("ZUTBLSUXUCLS",RULETYPE)),(scau.%ucls'=""),Db.isDefined("ZUTBLSUXUCLS","RULE=:RULETYPE,UCLS=:scau.%ucls") quit 0	
	if $D(TMPDRULE("ZUTBLSUXETC",RULETYPE)),(dtj.etc'=""),Db.isDefined("ZUTBLSUXETC","RULE=:RULETYPE,ETC=:dtj.etc") quit 0
	/*
	if $D(TMPDRULE("ZUTBLSUXKCUS",RULETYPE)),(cif.zktbccode'=""),Db.isDefined("ZUTBLSUXKCUS","RULE=:RULETYPE,ZKTBCCODE=:cif.zktbccode") do { if ZRET=0 quit 0
		set ZRET=0
		if $D(TMPDRULE("ZUTBLSUICIF",RULETYPE)),(acn.acn'=""),Db.isDefined("ZUTBLSUICIF","RULE=:RULETYPE,ACN=:acn.acn") set ZRET=1
		}
	if $D(TMPDRULE("ZUTBLSUXCID",RULETYPE)),(acn.cid'=""),Db.isDefined("ZUTBLSUXCID","RULE=:RULETYPE,CID=:acn.cid") quit 0
	*/
	if $D(TMPDRULE("ZUTBLSUXMIN",RULETYPE)) do { if ZRET=0 quit 0
		type RecordZUTBLSUXMIN zsuxmin=Db.getRecord("ZUTBLSUXMIN","RULE=:RULETYPE")
		if +zsuxmin.amt=0 quit
		if ZTRAMT<zsuxmin.amt set ZRET=0
		}
	
	
	quit ZRET

	
		
CTRLX()
	type RecordZMONCTRL zsvrmctr=Db.getRecord("ZMONCTRL","PROCESSOR='ZTRNCHNL'",1)
	if zsvrmctr.stop quit 1
	quit 0


INIT(String ZRULESW(), 
      String TMPCCIF(), 
      String TMPCPRDT(), 
      String TMPCCID(), 
      String TMPCKUS(), 
      String TMPCAPPL(), 
      String TMPDRULE(),
      Number THR028X(),
      Number THR030X(),
      Number THR00X())
      
	// ZUTBLSURUCLS - User Class for Analyze Surveillance
	type ResultSet zsurucls=Db.select("UCLS","ZUTBLSURUCLS")
	while zsurucls.next() set THR00X("ZSURUCLS",zsurucls.getCol("UCLS"))=""
	
	// ZRULESW - switch for each rule
	type ResultSet zrssw=Db.select("RULE","ZUTBLSURSW","FLG=1")
	while zrssw.next() set ZRULESW(zrssw.getCol(1))=""
	
	// Load common condition
	type ResultSet zrscom1=Db.select("ACN","ZUTBLSUCCIF")
	while zrscom1.next() set TMPCCIF(zrscom1.getCol(1))=""
	
	type ResultSet zrscom2=Db.select("PRDT","ZUTBLSUCPRDT")
	while zrscom2.next() set TMPCPRDT(zrscom2.getCol(1))=""
	
	type ResultSet zrscom3=Db.select("CID","ZUTBLSUCCID")
	while zrscom3.next() set TMPCCID(zrscom3.getCol(1))=""

	type ResultSet zrscom4=Db.select("ZKTBCCODE","ZUTBLSUCKCUS")
	while zrscom4.next() set TMPCKCUS(zrscom4.getCol(1))=""
	
	
	// Load rule - common condition applied
	type ResultSet zrscap=Db.select("RULE,FLGC1,FLGC2,FLGC3,FLGC4","ZUTBLSUCOAPP")
	while zrscap.next() do {
		set TMPCAPPL(zrscap.getCol(1),1)=+zrscap.getCol(2)
		set TMPCAPPL(zrscap.getCol(1),2)=+zrscap.getCol(3)
		set TMPCAPPL(zrscap.getCol(1),3)=+zrscap.getCol(4)
		set TMPCAPPL(zrscap.getCol(1),4)=+zrscap.getCol(5)		
		}
		
	/*		
	type ResultSet zrsd1=Db.select("RULE","ZUTBLSUXPRDT")
	while zrsd1.next() set TMPDRULE("ZUTBLSUXPRDT",zrsd1.getCol(1))=""
	*/
	type ResultSet zrsd2=Db.select("RULE","ZUTBLSUXUCLS")
	while zrsd2.next() set TMPDRULE("ZUTBLSUXUCLS",zrsd2.getCol(1))=""
	
	type ResultSet zrsd3=Db.select("RULE","ZUTBLSUXETC")
	while zrsd3.next() set TMPDRULE("ZUTBLSUXETC",zrsd3.getCol(1))=""
	
	type ResultSet zrsd4=Db.select("RULE","ZUTBLSUXKCUS")
	while zrsd4.next() set TMPDRULE("ZUTBLSUXKCUS",zrsd4.getCol(1))=""
	/*
	type ResultSet zrsd5=Db.select("RULE","ZUTBLSUICIF")
	while zrsd5.next() set TMPDRULE("ZUTBLSUICIF",zrsd5.getCol(1))=""
	
	type ResultSet zrsd6=Db.select("RULE","ZUTBLSUXCID")
	while zrsd6.next() set TMPDRULE("ZUTBLSUXCID",zrsd6.getCol(1))=""
	*/
	type ResultSet zrsd7=Db.select("RULE,AMT","ZUTBLSUXMIN")
	while zrsd7.next() set TMPDRULE("ZUTBLSUXMIN",zrsd7.getCol(1))=zrsd7.getCol(2)
	
			
	//  load criteria to log
	// R028
	if Db.isDefined("ZUTBLSUR028A","RULE='R028'") do {
		type RecordZUTBLSUR028A zcr028=Db.getRecord("ZUTBLSUR028A","RULE='R028'")
		set THR028X("R028",1)=zcr028.lmamt
	}
	// R030
	if Db.isDefined("ZUTBLSUR030A","RULE='R030'") do {
		type RecordZUTBLSUR030A zcr030=Db.getRecord("ZUTBLSUR030A","RULE='R030'")
		set THR030X("R030",1)=zcr030.timeint
	}
	
	// R029
	type ResultSet zrsd12=Db.select("RULE,TCOUNT","ZUTBLSURTCNT")
	while zrsd12.next() set THR00X(zrsd12.getCol(1),1)=zrsd12.getCol(2)	

	// R031
	type ResultSet zrsd13=Db.select("RULE,LAMT","ZUTBLSURLAMT")
	while zrsd13.next() set THR00X(zrsd13.getCol(1),1)=zrsd13.getCol(2)	

	//***********************Start-Surveillance 52************************************/
	// All Rule of Sur52 : R049
	// Channel Type Description of Surveillance(ZUTBLSURCHNL)
	type ResultSet zrsrchnl=Db.select("CHNL,PRETLO,PRODFLG,DCHNLFLG","ZUTBLSURCHNL")
	while zrsrchnl.next() set THR00X("ZSURCHNL",zrsrchnl.getCol("CHNL"))=zrsrchnl.getCol("PRETLO")_"|"_zrsrchnl.getCol("PRODFLG")_"|"_zrsrchnl.getCol("DCHNLFLG")

	// R046 - Surveillance Transaction Count(ZUTBLSURTCNT), User Class Included(ZUTBLSUIUCLS)
	type ResultSet zrstcnt=Db.select("RULE,TCOUNT","ZUTBLSURTCNT")
	while zrstcnt.next() set THR00X("ZSURTCNT",zrstcnt.getCol("RULE"),"TCOUNT")=zrstcnt.getCol("TCOUNT")
	type ResultSet zrsucls=Db.select("RULE","ZUTBLSUIUCLS")
	while zrsucls.next() set TMPDRULE("ZSUIUCLS",zrsucls.getCol("RULE"))=""
		
	// R049 - Duration(ZUTBLSURDUR)
	type ResultSet zrsd10=Db.select("RULE,TIMSTR,TIMEND","ZUTBLSURDUR")
	while zrsd10.next() set THR00X("ZSURDUR",zrsd10.getCol("RULE"),"TIMSTR")=zrsd10.getCol("TIMSTR") set THR00X("ZSURDUR",zrsd10.getCol("RULE"),"TIMEND")=zrsd10.getCol("TIMEND")	
	
	//***********************End-Surveillance 52************************************/	
	
	type Number DAYPUR1,DAYKEEP,DATEPUR
	set DAYPUR1=""
	set MONTIME=""
	// general config
	if Db.isDefined("ZUTBLTRANMOD","CO='KTB'") do {
		type RecordZUTBLTRANMOD ztrmd=Db.getRecord("ZUTBLTRANMOD","CO='KTB'")
		set DAYKEEP=ztrmd.daykeep1
		set MONTIME=ztrmd.montime
		}
	if DAYKEEP="" set DAYKEEP=30
	if MONTIME="" set MONTIME=5
	
	//set DATEPUR=^CUVAR(2)-DAYKEEP
	
	
	
	quit


TIM(X)
	/*
	Convert extended $H to time stamp

	Converts a $HOROLOG formatted date/time into a numeric date and
	time stamp.
 
	ARGUMENTS:
	     . X	Time ($HOROLOG format)

	RETURNS:
	     . $$	Time stamp			/TYP=N/REQ/MECH=VAL

	*/

	if $G(X)="" set X=$H
	quit X*1E5+$P(X,",",2)


START	// Start monitor

	do PRMT(1) quit:VFMQ="Q"
	do JOB(0)
	quit

START2	// Start monitor without prompt
	
	do JOB(0)
	
	quit

START3  // Start monitor with a specify days to rerun
	type Number ZREDAYS
	do PRMT2(.ZREDAYS) quit:VFMQ="Q"
	do JOB(ZREDAYS)
	quit

JOB(Number ZREDAYS)	// External entry point to spawn monitor

	type String PRCNAM
	type Number X
	set X=0

	set ZREDAYS=+ZREDAYS
	
	type RecordCUVAR cuvar=Db.getRecord("CUVAR")

	if '$$PID.isNull() set ER=1,RM=$$^MSG(8364) quit
	set PRCNAM="ZTRNCHNL_"_cuvar.ptmdirid

	set X=$$^%ZJOB("MAIN^ZTRNCHNL("_ZREDAYS_")","PRO="_PRCNAM,1)

	if X set RM(RM("").order(-1)+1)=$$^MSG(6800,PRCNAM)
	else  set RM(RM("").order(-1)+1)=$$^MSG(6799,PRCNAM)
	set ER="W"
	quit

STOP	// Issue a stop message to transaction monitor

	if $$PID.isNull() set ER=1,RM=$$^MSG(8366) quit
	do PRMT(0) quit:VFMQ="Q"

	type RecordZMONCTRL zsvrmctr=Db.getRecord("ZMONCTRL","PROCESSOR='ZTRNCHNL'",1)
	set zsvrmctr.stop=1
	do zsvrmctr.bypassSave()

	set ER="W"
	quit

STOP2	// Issue a stop message to transaction monitor without prompt
	type Number ZOUT,ZZPID
	type String ZCMD
	if $$PID.isNull() set ER=1,RM=$$^MSG(8366) quit

	type RecordZMONCTRL zsvrmctr=Db.getRecord("ZMONCTRL","PROCESSOR='ZTRNCHNL'",1)
	set zsvrmctr.stop=1
	set ZZPID=$$HEXDEC^%ZHEX(zsvrmctr.pid)		
	do zsvrmctr.bypassSave()
	
	set ZCMD="ps -p "_ZZPID_"  1>/dev/null"
	// wait until monitor stopped
	set ZOUT=0
	while 'ZOUT do {
		type RecordZMONCTRL zsvrmctx=Db.getRecord("ZMONCTRL","PROCESSOR='ZTRNCHNL'",1)
		if zsvrmctx.stoptime'="" set ZOUT=1 quit
		// check whether process is alive or not. if not, quit			
		if $$SYS^%ZFUNC(ZCMD) set ZOUT=1 quit
			
		// Wait for next time interval 
                set X=$$WAIT^%ZFUNC(10)
                
		}
	
	quit


PRMT(Number OPT)

	/*
	Prompts for startup/shutdown

	ARGUMENTS:
	     . OPT	Option		/LEN=1/REQ
	     		0 = Stop
	     		1 = Start
	*/

	type String %READ,%TAB()

	set %TAB("CONT")=".CONT2"

	set %READ="@@%FN,,,CONT/REQ"
	do ^UTLREAD if VFMQ="Q" quit
	if 'CONT set VFMQ="Q"
	quit

PRMT2(Number ZREDAYS)
	/*
	Prompt Date to rerun
	
	*/
	
	set %TAB("ZREDAYS")="/DES=Days to rerun/REQ/TYP=N/REQ/LEN=4"
	
	set %READ="@@%FN/REV/CEN,,,ZREDAYS"
	 		
	//Read from prompt
	do ^UTLREAD if VFMQ="Q" quit
	
	
	quit

PID()	// Return process ID

	type String PID

	type RecordZMONCTRL zsvrmctr=Db.getRecord("ZMONCTRL","PROCESSOR='ZTRNCHNL'",1)
	set PID=zsvrmctr.pid if PID.isNull() quit ""
	set PID=$$HEXDEC^%ZHEX(PID)

	if '$$VALID^%ZPID(PID) quit ""
	quit PID

RSUMHIST(String TSO(),
	RecordDTJ dtj,
	RecordTRN trn,
	RecordSCAU scau,
	RecordSCAU0 scau0,
	RecordACN acn,
	RecordCIF cif,
	Number THR028X(),
	Number THR030X())
	
	type Number AMT,CNT,ZREV,ZCARDNO,ZTIM,ZCTIM
	type String SUM(),TLO
	
	/* start comment for exclude rev,err
	// exclude reversal and error-corrected transaction

	ITC6
	ITC Byte 6 - Error-Corrected Flag         1  L        N    Computed: $E([DTJ]ITC,6)
	An indicator (Y/N) in the internal transaction code which is turned on
	if the transaction either:
	a) is an error correct, or
	b) has been error corrected.
	
	if dtj.itc6 quit
	
	
	ITC12
	ITC Byte 12 - Reversal Flag               1  L        N    Computed: $E([DTJ]ITC,12)
	An indicator (Y/N) in the internal transaction code which is turned on
	if the transaction either:
	a) is a reversal, or
	b) has been reversed.
	
	if dtj.itc12 quit
	
	
	HISTRVAL
	Reversed/Error Corrected Indicator        1  N        N
	Indicates whether the transaction was Error Corrected (1) or Reversed (2).
	Pulled from [HISTR]REVFLG.       
	
	if +dtj.histrval'=0 quit
	
	end comment for exclude rev,err
	*/
	
	
	/* check ATM transaction (for this day)
	 1. check product flag (only ATM  ,AT=ktb bank / PC=other bank)
	 flag 0 = Not ATM transaction
	      1 = ATM transaction
	*/
	if '$$PRDCHK(dtj.etc)  quit
			
	// 2. check Withdraw transaction (1=Credit , 0=Debit)
	if trn.dc  quit
			
	/* 3. check TTX that Debit transaction or not (Dr. from customer a/c and Cr. to G/L a/c)
	 flag 0 = Transfer Transaction
	      1 = Withdraw Transaction
	*/
	//if '$$TRFCHK(dtj.tjd,dtj.brcd,dtj.uid,dtj.trc) quit
	
	// 4. check exclude ec. reversed transaction. 
	if +dtj.tamt'>0 quit
	if dtj.histrval'="" quit
	
	// Get Card No. from TSO
	set ZCARDNO=+$G(TSO("ATMC"))
			
	if acn.cls="D" do {
		type Number AMT,ZTHRSH,ZTRF,ZAVR,ZDIF
		
		set (ZTHRSH,ZCTIM)=0
		if THR028X("R028",1).exists() set ZTHRSH=THR028X("R028",1)
		set ZTHRSH=+ZTHRSH
		
		//set ZTIM=THR030X("R030",1)*60
		set ZTIM=THR030X("R030",1)
		
		if (acn.grp="DDA")!(acn.grp="SAV") do { quit
			// ZTRF=1 count only ATM transaction 	
			set ZTRF=1 
			
			// R028,1 - Limit Amount
			// R030,1 - Time Interval  
			
			// Oct 15, 2008	Rapeepan Y. , adding check field tlo
			set TLO=dtj.tlo
			
			// ATM transaction time
			type Number ZATMTIM
			set ZATMTIM=dtj.time
			if Db.isDefined("HIST","CID=dtj.cid,TSEQ=dtj.tseq") do {
				type RecordHIST hist=Db.getRecord("HIST","CID=dtj.cid,TSEQ=dtj.tseq")
				if hist.ZATMTIM'="" do {
					set ZATMTIM=$$CVTIM^ZTRNCHNL(hist.ZATMTIM)
				}
			}

			do HISTTIME(.SUM,CID,dtj.tseq,100,ZCARDNO,ZTIM,ZATMTIM,.ZCTIM,.dtj,ZTHRSH)
			
			
			if (ZR030FLG=2) do {
				
				//if dtj.itc1=0 do {
					
					if ZCTIM'<2 do SUSPECT(.TSO,dtj,trn,scau,scau0,acn,cif,"R030")
					
				//}
			
			}
			
			if (ZR028FLG=2),(ZTHRSH>0) do {
				if dtj.itc1=0 do {
					//set AMT=SUM("AMT",0,0,0).piece("#",1)
					//if AMT'<ZTHRSH do {
						type String ZRFLG
						set ZRFLG=""
						do INISUR51^ZSURUTL("R028",.ZRFLG)
						do SUSDTJ^ZSURUTL(.TSO,dtj,trn,scau,scau0,acn,cif,"R028",.ZRFLG)
						}
					//}
				
			}
			
		
		}	// end of if (acn.grp="DDA")!(acn.grp="SAV") 
			
					
	}	// end if acn.cls="D" 
		
	quit
	
	
HISTTIME(String SUM(), Number CID, Number TSEQ, Number MAX, Number CARDNO, Number TPERIOD, Number DTJT, String ZDOPER, RecordDTJ dtj, Number ZTHRSH)

	/*
	ARGUMENTS:
	     . SUM	Summary array		/NOREQ/MECH=REFARR:W

			SUM("AMT",ITC1,ITC7,REV)
			SUM("CNT",ITC1,ITC7,REV)
			
			where ITC1 = Debit/Credit indicator
			             0 = Debit
			             1 = Credit

			      ITC7 = System generated transaction indicator
			             0 = Not a system generated transaction
			             1 = System generated transaction

			      REV  = E/C or reversal transaction indicator
			             0 = Not a E/C or reversal transaction
			             1 = E/C or reversal transaction

	     . CID	Account number		/REQ/MECH=VAL

	     . TSEQ	Transaction sequence	/REQ/MECH=VAL

	     . DYS	Number of days		/NOREQ/MECH=VAL/DFT=1

	     		1 = Today's activity
	     		2 = Today's & yesterday's activity
	     		3 = Today's & last 2 days activity
	     		...

	     . MAX	Maximum record count	/NOREQ/MECH=VAL/DFT=100
	     
	                The maximum number of history records to be
	                summarized.  This argument provides a means
	                to limit the summary, particularly for high
	                volume accounts.  Note that only financial
	                transactions are included in the count.
	               
	     . TPERIOD	Time period to count and sum transactions backward for the account (TPERIOD is time in seconds)
	     		Applied only original credit transaction (not REV transaction)
	     
	     . ZTRF 	Transfer Flag
	     		o - Calculate all transaction
	     		1 - Calculate only transfer transaction
	*/

	type Number I,ITC1,ITC7,REV,ZTIME,ZDIFF,ZDATE,ZCRDNO
	type String TAMT,ZTLO
	type Date XJD
	type String TSO()
	
	do OUT^UTSO(.TSO,dtj.tso)
	set ZATMTIME=+$G(UTSO("TIM"))

	if +DYS.get()=0 set DYS=1
	if +MAX.get()=0 set MAX=100
	if +TPERIOD.get()=0 set TPERIOD=0
	if +ZTRF.get()=0 set ZTRF=0
	
	//set XJD=TJD-1
	//set XJD=^CUVAR(2)-1		//Change get SystemDate from TJD to ^CUVAR(2)
	set XJD=dtj.tjd-1
	
	set (ZTIME,ZDATE,ZDOPER)=0

	for ITC1=0,1 for ITC7=0,1 for REV=0,1 set SUM("AMT",ITC1,ITC7,REV)="",SUM("CNT",ITC1,ITC7,REV)=""

	
	set ZDIFF=DTJT-TPERIOD
		//case 1
	if (ZATMTIME <= ZTHRSH*60) do {
	type ResultSet rs=Db.select("TSEQ,ZATMTIM,ATMD","HIST","CID=:CID AND (NOT TSEQ>:TSEQ) AND TJD>:XJD-2 AND NOT ITC1=''","TSEQ DESC")
	while rs.next() do { quit:MAX=0
		if (rs.getCol("ZATMTIM") < (86400-(ZTHRSH*60)) & ((rs.getCol("ATMD")=dtj.tjd-1))) quit
		type String ZHUID,ZHUCLS
		set ZHUCLS=""
		
		set MAX=MAX-1
		
		type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=rs.getCol(1)")
		set REV=$S(hist.itc6:1,hist.itc12:1,1:0)
		set ITC7=''hist.itc7
		set ITC1=+hist.itc1
		set TAMT=hist.tamt
		
		//  ATM transaction time
		if hist.ZATMTIM'="" set ZTIME=$$CVTIM^ZTRNCHNL(hist.ZATMTIM)
		else  set ZTIME=hist.time
		
		if hist.crcd'="THB",(+hist.sysbase'=0) set TAMT=+hist.sysbase
		set ZHUID=hist.uid
		
		if ZHUID'="",(Db.isDefined("SCAU","UID=:ZHUID")) do {
			type RecordSCAU zhscaux=Db.getRecord("SCAU","UID=:ZHUID")
			set ZHUCLS=zhscaux.%ucls
			}
		
		// exclude ec. reversed transaction.  both reversed and reveral
		if REV quit
		if hist.histrflg quit
		
		//if ITC1=1 quit		// only debit tran.
		if ITC7 quit
			
		// If Fee Transaction then quit
		if $$CHKISFEE^ZSURUTL(hist.etc) quit
						
		// check ATM transaction 
		// 1. check product flag (only ATM  ,AT=ktb bank / PC=other bank)
		// flag 0 = Not ATM transaction
		//      1 = ATM transaction
		if '$$PRDCHK(hist.etc) quit
		
		// 2. check Withdraw transaction (1=Credit , 0=Debit)
		//if trn.dc quit	//check hist.itc1 already 
			
		/* 3. check TTX that Debit transaction or not (Dr. from customer a/c and Cr. to G/L a/c)
		 flag 0 = Transfer Transaction
		      1 = Withdraw Transaction
		*/
		//if ZTRF,'$$TRFCHK(hist.tjd,hist.brcd,hist.uid,hist.trc) quit
		
		// Get Card No. from TSO
		do OUT^UTSO(.UTSO,hist.tso)
		set ZCRDNO=+$G(UTSO("ATMC"))
		
		if ZCRDNO'=CARDNO quit
			
		if (ZR028FLG=1) do {
			if hist.itc1'=0 quit		// only debit tran.
			
			if $D(TMPDRULE("ZUTBLSUXETC","R028")),(hist.etc'=""),Db.isDefined("ZUTBLSUXETC","RULE='R028',ETC=:hist.etc") quit
			// - Check transaction amount is more than minimun amount(ZUTBLSUXMIN)
			if '(TAMT>$G(TMPDRULE("ZUTBLSUXMIN","R028"))) quit
						
			if TAMT["#" do {
					for I=1:1:TAMT.length("#") set SUM("AMT",ITC1,ITC7,REV).piece("#",I)=SUM("AMT",ITC1,ITC7,REV).piece("#",I)+TAMT.piece("#",I)
					}
			else  do {
				set SUM("AMT",ITC1,ITC7,REV).piece("#",1)=SUM("AMT",ITC1,ITC7,REV).piece("#",1)+TAMT
				set SUM("AMT",ITC1,ITC7,REV).piece("#",2)=SUM("AMT",ITC1,ITC7,REV).piece("#",2)+TAMT
				}
			set SUM("CNT",ITC1,ITC7,REV)=SUM("CNT",ITC1,ITC7,REV)+1	
			
			type Number AMT
			set AMT=0
			set AMT=SUM("AMT",0,0,0).piece("#",1)
			if (AMT'<ZTHRSH) set ZR028FLG=2
						
		}
		
		if (ZR030FLG=1) do {
			/*
			// Oct 15, 2008	Rapeepan Y. , adding check field tlo
			set ZTLO=hist.tlo	// Transaction Location
			if $$TRIM^%ZS(ZTLO)=$$TRIM^%ZS(TLO) quit
			*/			
			if $D(TMPDRULE("ZUTBLSUXETC","R030")),(hist.etc'=""),Db.isDefined("ZUTBLSUXETC","RULE='R030',ETC=:hist.etc") quit
				
			// - Check transaction amount is more than minimun amount(ZUTBLSUXMIN)
			if '(TAMT>$G(TMPDRULE("ZUTBLSUXMIN","R030"))) quit
						
			// if transactions time's different more than or same as TPERIOD
			if ZTIME'<ZDIFF set ZDOPER=ZDOPER+1
			if (ZDOPER=2) set ZR030FLG=2		
		}
		
		if (ZR028FLG=2),(ZR030FLG=2) set MAX=0
		
		
	}	// end while rs.next()
		
		//end case1
		
		
		
		
		//Case 2
	
	type ResultSet rs=Db.select("TSEQ","HIST","CID=:CID AND (NOT TSEQ>:TSEQ) AND TJD>:XJD AND NOT ITC1=''","TSEQ DESC")
	while rs.next() do { quit:MAX=0
		type String ZHUID,ZHUCLS
		set ZHUCLS=""
		
		set MAX=MAX-1
		
		type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=rs.getCol(1)")
		set REV=$S(hist.itc6:1,hist.itc12:1,1:0)
		set ITC7=''hist.itc7
		set ITC1=+hist.itc1
		set TAMT=hist.tamt
		
		//  ATM transaction time
		if hist.ZATMTIM'="" set ZTIME=$$CVTIM^ZTRNCHNL(hist.ZATMTIM)
		else  set ZTIME=hist.time
		
		if hist.crcd'="THB",(+hist.sysbase'=0) set TAMT=+hist.sysbase
		set ZHUID=hist.uid
		
		if ZHUID'="",(Db.isDefined("SCAU","UID=:ZHUID")) do {
			type RecordSCAU zhscaux=Db.getRecord("SCAU","UID=:ZHUID")
			set ZHUCLS=zhscaux.%ucls
			}
		
		// exclude ec. reversed transaction.  both reversed and reveral
		if REV quit
		if hist.histrflg quit
		
		//if ITC1=1 quit		// only debit tran.
		if ITC7 quit
			
		// If Fee Transaction then quit
		if $$CHKISFEE^ZSURUTL(hist.etc) quit
						
		// check ATM transaction 
		// 1. check product flag (only ATM  ,AT=ktb bank / PC=other bank)
		// flag 0 = Not ATM transaction
		//      1 = ATM transaction
		if '$$PRDCHK(hist.etc) quit
		
		// 2. check Withdraw transaction (1=Credit , 0=Debit)
		//if trn.dc quit	//check hist.itc1 already 
			
		/* 3. check TTX that Debit transaction or not (Dr. from customer a/c and Cr. to G/L a/c)
		 flag 0 = Transfer Transaction
		      1 = Withdraw Transaction
		*/
		//if ZTRF,'$$TRFCHK(hist.tjd,hist.brcd,hist.uid,hist.trc) quit
		
		// Get Card No. from TSO
		do OUT^UTSO(.UTSO,hist.tso)
		set ZCRDNO=+$G(UTSO("ATMC"))
		
		if ZCRDNO'=CARDNO quit
			
		if (ZR028FLG=1) do {
			if hist.itc1'=0 quit		// only debit tran.
			
			if $D(TMPDRULE("ZUTBLSUXETC","R028")),(hist.etc'=""),Db.isDefined("ZUTBLSUXETC","RULE='R028',ETC=:hist.etc") quit
			// - Check transaction amount is more than minimun amount(ZUTBLSUXMIN)
			if '(TAMT>$G(TMPDRULE("ZUTBLSUXMIN","R028"))) quit
						
			if TAMT["#" do {
					for I=1:1:TAMT.length("#") set SUM("AMT",ITC1,ITC7,REV).piece("#",I)=SUM("AMT",ITC1,ITC7,REV).piece("#",I)+TAMT.piece("#",I)
					}
			else  do {
				set SUM("AMT",ITC1,ITC7,REV).piece("#",1)=SUM("AMT",ITC1,ITC7,REV).piece("#",1)+TAMT
				set SUM("AMT",ITC1,ITC7,REV).piece("#",2)=SUM("AMT",ITC1,ITC7,REV).piece("#",2)+TAMT
				}
			set SUM("CNT",ITC1,ITC7,REV)=SUM("CNT",ITC1,ITC7,REV)+1	
			
			type Number AMT
			set AMT=0
			set AMT=SUM("AMT",0,0,0).piece("#",1)
			if (AMT'<ZTHRSH) set ZR028FLG=2
						
		}
		
		if (ZR030FLG=1) do {
			/*
			// Oct 15, 2008	Rapeepan Y. , adding check field tlo
			set ZTLO=hist.tlo	// Transaction Location
			if $$TRIM^%ZS(ZTLO)=$$TRIM^%ZS(TLO) quit
			*/			
			if $D(TMPDRULE("ZUTBLSUXETC","R030")),(hist.etc'=""),Db.isDefined("ZUTBLSUXETC","RULE='R030',ETC=:hist.etc") quit
				
			// - Check transaction amount is more than minimun amount(ZUTBLSUXMIN)
			if '(TAMT>$G(TMPDRULE("ZUTBLSUXMIN","R030"))) quit
						
			// if transactions time's different more than or same as TPERIOD
			if ZTIME'<ZDIFF set ZDOPER=ZDOPER+1
			if (ZDOPER=2) set ZR030FLG=2		
		}
		
		if (ZR028FLG=2),(ZR030FLG=2) set MAX=0
		
		
	}	// end while rs.next()

	quit
	
	

	
	
TRFCHK(Number ZTJD, Number ZBRCD, String ZUID, Number ZORTSEQ)
	/*
	check whether the transaction specified if transacfer transaction or not
	determined by checking if there's another Non G/L transactino existed in TTX set,
	the transaction will be determined as transfer transaction
	input
		ZTJD	Transactioin Date
		ZBRCD	Trasaction branch code
		ZUID	Post by user
		ZORTSEQ	TTX TSEQ of the transaction. get from dtj.trc/hist.trc

	Return
		Boolean
		0 - Transfer transaction 
		1 - non trasfer transaction 
	
	*/
	new ZRETURN,ZTSEQCHK
	set ZRETURN=1
	set (ZTSEQ,ZTSEQCHK)=(ZORTSEQ\1000)*1000
	set ZTSEQCHK=ZTSEQCHK+999

	for  set ZTSEQ=$O(^TTX(ZTJD,ZBRCD,ZUID,ZTSEQ)) quit:((ZRETURN=0)!(ZTSEQ>ZTSEQCHK)!(ZTSEQ=""))  do { 
		new ZETC
		
		if ZTSEQ=ZORTSEQ quit
		type RecordTTX zttx=Db.getRecord("TTX","TJD=:ZTJD,BRCD=:ZBRCD,UID=:ZUID,TSEQ=:ZTSEQ")
		
		// check Cr. is G/L account or not
		// Ignore debit transaction
		if zttx.itc1=0 quit
		
		set ZETC=zttx.etc
		if Db.isDefined("TRN","ETC=:ZETC")
		type RecordTRN ztrn=Db.getRecord("TRN","ETC=:ZETC",1)
		if ztrn.getMode() do {
			if ztrn.cls="D"!(ztrn.cls="L") set ZRETURN=0
			
			}
		
		}
		
	
	quit ZRETURN
	
	
	
SUSPECT(String TSO(),
	RecordDTJ dtj,
	RecordTRN trn,
	RecordSCAU scau,
	RecordSCAU0 scau0,
	RecordACN acn,
	RecordCIF cif,
	String ZSUSPTYP)
	
	type String DESC,ZACNAME

	// Cost Center
	set ZBRCD=dtj.brcd
	if 'Db.isDefined("UTBLBRCD","BRCD=:ZBRCD") quit
	
	type RecordUTBLBRCD zcc=Db.getRecord("UTBLBRCD","BRCD=:ZBRCD")
	set ZCC=zcc.ccdef
	
	// Transaction current Date
	type Date ZLOGDATE
	type Number ZSUB
	
	
	set ZLOGDATE=$P($H,",",1)
	if ZLOGDATE="" set ZLOGDATE=dtj.cdt
	if ZLOGDATE="" set ZLOGDATE=dtj.tjd
	
	// start tp
	do Runtime.start("BA")
	
	set TSEQ=Db.nextVal("ZSUSDLOG","DATE=:ZLOGDATE")

	type RecordZSUSDLOG zsuspdtl=Db.getRecord("ZSUSDLOG","DATE=:ZLOGDATE,TSEQ=:TSEQ",1)

	set ZSUB=""
	set zsuspdtl.date=ZLOGDATE
	// Transaction Seq
	set zsuspdtl.tseq=TSEQ
	// Transaction Time
	set zsuspdtl.time=dtj.time
	// Account Number
	set zsuspdtl.cid=dtj.cid
	if acn.grp="CD",(acn.zmaster'=acn.cid),(acn.zmaster'="") do {
		set zsuspdtl.mastercid=acn.zmaster
		}
	
	// Transaction Code
	set zsuspdtl.etc=dtj.etc
	// Transaction Type
	set zsuspdtl.dc=$S(dtj.itc1=0:"D",1:"C")
	// EC Flag
	set zsuspdtl.ecflg=+dtj.itc6
	// Reversal Flag
	set zsuspdtl.revflg=+dtj.itc12
	// Transaction Amount
	set zsuspdtl.tamt=dtj.tot
	// Transaction Comment
	set zsuspdtl.tcmt=dtj.tcmt
	// Ending Balance of this account
	set zsuspdtl.endbal=dtj.endbal
	// Terminal Location
	set zsuspdtl.tlo=dtj.tlo
	// Original Branch
	set zsuspdtl.brcd=dtj.brcd
	// User ID
	set zsuspdtl.uid=dtj.uid
	// Flag of KTB User
	set zsuspdtl.uidktbflg=$$CHKUIDKTB^ZSURUTL(dtj.uid)
	// Channel Reference
	set zsuspdtl.chnref=""
		
	// Suspect Type
	set zsuspdtl.susptype=ZSUSPTYP
	
	set zsuspdtl.cc=ZCC

	set zsuspdtl.acn=acn.acn
	
	/* ---- Get override user id from SPV ---- */
	type String ZOVRID
	set ZOVRID=""
	set ZOVRID=$$GOVRID^ZSURUTL(dtj.tjd,dtj.brcd,dtj.uid,dtj.trc,dtj.cid)
	set zsuspdtl.ovrid=ZOVRID
	// Authorized User ID Name (OVRID Name)
	if ZOVRID'="",(Db.isDefined("SCAU","UID=:ZOVRID")) do {
		type RecordSCAU ovrscau=Db.getRecord("SCAU","UID=:ZOVRID")
		set zsuspdtl.ovrname=ovrscau.%ufn
		}
	
	// transaction rate
	set zsuspdtl.rate=dtj.rate
	// transaction baseamount (THB)
	set zsuspdtl.bseamt=+dtj.sysbase
	// etc des
	set zsuspdtl.trcdes=trn.des
	// user fullname
	set zsuspdtl.tlrname=scau.%ufn
	// user branch
	set zsuspdtl.tlrbrcd=scau.brcd
	// user br des
	set zsuspdtl.tlrbrdes=$$BRCDDES(scau.brcd)
	// cif name
	set zsuspdtl.cifname=cif.nam
	// cid boo
	set zsuspdtl.acbrcd=acn.boo
	// cid boo des
	set zsuspdtl.acbrdes=$$BRCDDES(acn.boo)
	// transaction branch
	set zsuspdtl.txbrcd=dtj.brcd
	// transaction branch des
	set zsuspdtl.txbrdes=$$BRCDDES(dtj.brcd)
	// cif boo
	set zsuspdtl.cifbrcd=cif.boo
	// cif boo des
	set zsuspdtl.cifbrdes=$$BRCDDES(cif.boo)
	// account class
	set zsuspdtl.cls=acn.cls
	// transaction currency
	if dtj.crcd="" set zsuspdtl.crcd="THB"
	else  set zsuspdtl.crcd=dtj.crcd
	// transaction trace number
	set zsuspdtl.trc=dtj.trc
	// hist seq
	set zsuspdtl.histseq=dtj.tseq
	// Transaction profile date
	set zsuspdtl.pdate=dtj.tjd
	
	// account name
	set ZACNAME=acn.title1
	if acn.title2'="" set ZACNAME=ZACNAME_","_acn.title2
	if acn.title3'="" set ZACNAME=ZACNAME_","_acn.title3
	if acn.title4'="" set ZACNAME=ZACNAME_","_acn.title4
			
	set zsuspdtl.acname=ZACNAME
	
	do zsuspdtl.bypassSave()
	
	do Runtime.commit()

	quit
	
BRCDDES(Number ZBRCD1)
	type String ZBRNAME
	set ZBRNAME=""
	if ZBRCD1="" quit ZBRNAME
	set ZBRCD1=+ZBRCD1
	type RecordUTBLBRCD zbrcd1=Db.getRecord("UTBLBRCD","BRCD=:ZBRCD1",1)
	set ZBRNAME=zbrcd1.desc
	quit ZBRNAME



PRDCHK(String ZETC)
	
	/*
	Return	0 - Not ATM Transaction
		1 - ATM Transaction
	*/
	
	type Number ZRETURN
	set ZRETURN=1 
	
	if Db.isDefined("ZUTBLTRCD","ETC=:ZETC") do {
		
		type RecordZUTBLTRCD trcd=Db.getRecord("ZUTBLTRCD","ETC=:ZETC")
		if (trcd.prodflg'="AT"),(trcd.prodflg'="PC") set ZRETURN=0
		if trcd.fee'="" set ZRETURN=0	// ignore Fee transaction
	}
	else  set ZRETURN=0
	
	quit ZRETURN
	
PRDSSB(String ZETC)
	
	/*
	Return	0 - Not SSB Transaction
		1 - SSB Transaction
	*/
	
	type Number ZRETURN
	set ZRETURN=1 
	
	if Db.isDefined("ZUTBLTRCD","ETC=:ZETC") do {
		
		type RecordZUTBLTRCD trcd=Db.getRecord("ZUTBLTRCD","ETC=:ZETC")
		if (trcd.prodflg'="PB") set ZRETURN=0
		
	}
	else  set ZRETURN=0
	
	quit ZRETURN
		
R029(String TSO(),
	RecordDTJ dtj,
	RecordTRN trn,
	RecordSCAU scau,
	RecordSCAU0 scau0,
	RecordACN acn,
	RecordCIF cif)
	
	type Number ZCTIM

	set ZCTIM=0
	
	/* check ATM transaction (for this day)
	 1. check product flag (only ATM  ,AT=ktb bank / PC=other bank)
	 flag 0 = Not ATM transaction
	      1 = ATM transaction
	*/
	if '$$PRDCHK(dtj.etc)  quit
			
	// 2. check Withdraw transaction (1=Credit , 0=Debit)
	if trn.dc  quit
			
	/* 3. check TTX that Debit transaction or not (Dr. from customer a/c and Cr. to G/L a/c)
	 flag 0 = Transfer Transaction
	      1 = Withdraw Transaction
	*/
	//if '$$TRFCHK(dtj.tjd,dtj.brcd,dtj.uid,dtj.trc) quit
	
	// 4. check exclude ec. reversed transaction. 
	if +dtj.tamt'>0 quit
	if dtj.histrval'="" quit
	
	// Get Card No. from TSO
	set ZCARDNO=+$G(TSO("ATMC"))
	
	if acn.cls="D" do {
		type Number AMT,ZTHRSH,ZTRF,ZAVR,ZDIF
		
		set (ZTHRSH,ZCTIM)=0
		if THR00X("R029",1).exists() set ZTHRSH=THR00X("R029",1)
		set ZTHRSH=+ZTHRSH	//threshold count
		
		if (acn.grp="DDA")!(acn.grp="SAV") do { quit
			
			do RTIMHIST(.TSO,dtj,scau,acn,cif,.THR00X,.ZCTIM,"R029")	
			//if ZCTIM>ZTHRSH do SUSPECT(.TSO,dtj,trn,scau,scau0,acn,cif,"R029")
			if ZCTIM>ZTHRSH do {
				type String ZRFLG
				set ZRFLG=""
				do INISUR51^ZSURUTL("R029",.ZRFLG)
				do SUSDTJ^ZSURUTL(.TSO,dtj,trn,scau,scau0,acn,cif,"R029",.ZRFLG)
			}
		}		
	}	
	
	quit	
 
RTIMHIST(String TSO(),
	RecordDTJ dtj,
	RecordSCAU scau,
	RecordACN acn,
	RecordCIF cif,
	Number THR00X(),
	Number ZDOPER,
	String RULETYPE)
	
	//type Number TPERIOD,MAX,ZDIFF,ZR016FLG,ZR017FLG
	type Number MAX,ZR031SUM,TSEQ
	set (MAX,ZR031SUM,TSEQ)=""
	set MAX=100
	set TSEQ=dtj.tseq
	//set (ZR016FLG,ZR017FLG)=0
	
	//set TPERIOD=$G(THR00X(RULETYPE,1))
	//set ZDIFF=(dtj.time)-TPERIOD
	//type RecordCUVAR cuvar=Db.getRecord("CUVAR")
	//set XJD=cuvar.tjd-1	
	set XJD=dtj.tjd-1
	
		
	type ResultSet rs=Db.select("TSEQ","HIST","CID=:CID AND (NOT TSEQ>:TSEQ) AND TJD>:XJD AND NOT ITC1=''","TSEQ DESC")
	while rs.next() do { quit:MAX=0
		type String ZHUID,ZHUCLS
		set ZHUCLS=""
		
		set MAX=MAX-1
		
		type RecordHIST hist=Db.getRecord("HIST","CID=:CID,TSEQ=rs.getCol(1)")
		type Number REV,ITC7,TAMT,ZTIME,ZHUID
		set (REV,ITC7,TAMT,ZTIME,ZHUID)=""
		set REV=$S(hist.itc6:1,hist.itc12:1,1:0)
		set ITC7=''hist.itc7
		//set ITC1=+hist.itc1
		set TAMT=+hist.tamt
		set ZTIME=hist.time
		if hist.crcd'="THB",(+hist.sysbase'=0) set TAMT=+hist.sysbase
		set ZHUID=hist.uid
		
		if ZHUID'="",(Db.isDefined("SCAU","UID=:ZHUID")) do {
			type RecordSCAU zhscaux=Db.getRecord("SCAU","UID=:ZHUID")
			set ZHUCLS=zhscaux.%ucls
			}
		
		// exclude ec. reversed transaction.  both reversed and reveral
		if REV quit
		if hist.histrflg quit

		if ITC7 quit
			
		// If Fee Transaction then quit
		if $$CHKISFEE^ZSURUTL(hist.etc) quit
				
		if RULETYPE="R029" do {
			// R029 Check only debit(0) transaction
			if (+hist.itc1) quit
			if '$$PRDCHK(hist.etc) quit
			type Number ZCRDNO
			set ZCRDNO=""
			// Get Card No. from TSO
			do OUT^UTSO(.UTSO,hist.tso)
			set ZCRDNO=+$G(UTSO("ATMC"))
			
			if ZCRDNO'=ZCARDNO quit
			
			if $D(TMPDRULE("ZUTBLSUXETC","R029")),(hist.etc'=""),Db.isDefined("ZUTBLSUXETC","RULE='R029',ETC=:hist.etc") quit
			
			set ZDOPER=ZDOPER+1
			
		}
		
		if (ZR031FLG=1) do {
			// Check debit(0) transaction from hist
			if (+hist.itc1) quit
			// If ETC is not SSB transaction then it is not included R031
			if '$$PRDSSB(hist.etc) quit
			if '$$DETRULE("R031",acn,cif,scau,dtj,TAMT) quit
			set ZR031SUM=ZR031SUM+TAMT
			if ZR031SUM>$G(THR00X("R031",1)) set ZR031FLG=2
		}		
	}	

	quit

TDMJ(TJD,DATETIME,CID,TSEQ)
	// D TDMJ^ZTRNCHNL(60874,6154358514,41025050,2)
	type String ZRULESW,TMPCCIF,TMPCPRDT,TMPCCID,TMPCKUS,TMPCAPPL,TMPDRULE,THR028X,THR030X,THR00X
	do INIT(.ZRULESW,.TMPCCIF,.TMPCPRDT,.TMPCCID,.TMPCKUS,.TMPCAPPL,.TMPDRULE,.THR028X,.THR030X,.THR00X)
	type String KEYS
	set KEYS=DATETIME_","_CID_","_TSEQ
	
	do DMJ(TJD,KEYS)
	quit

DMJ(Date DATE, String KEYS)
	type Number CID,DATETIME,TSEQ
	// Transaction amount (BAHT)
	type Number ZTRAMT
		
	catch error {
		type String ET

		set ET=error.type
		if ET["%GTM-" do ZE^UTLERR
		set ET=ET_"-"_error.thrownAt
		set ET=ET_","_error.description

		do LOG^ZSUREXC($T(+0),"*",%FN.get(),"",%ZTSEQ.get(),ET)
		}

	set DATETIME=KEYS.piece(",",1)
	set CID=KEYS.piece(",",2)
	set TSEQ=KEYS.piece(",",3)
	type RecordDMJ dmj=Db.getRecord("DMJ","TJD=:DATE,DATETIME=:DATETIME,CID=:CID,TSEQ=:TSEQ")
	
	//***********************Start-Surveillance 52*********************/
	type String DMJTSO,ZRFLG
	set (DMJTSO,ZRFLG)=""
	do OUT^UTSO(.DMJTSO,dmj.tso)
	//***********************End-Surveillance 52***********************/
	// set transaction amount in thai baht
	set ZTRAMT=+dmj.tamt
	if (dmj.crcd'="THB"),(+dmj.sysbase'=0) set ZTRAMT=+dmj.sysbase
		
	type RecordSCAU scau=Db.getRecord("SCAU","UID=:dmj.uid")
	type RecordSCAU0 scau0=Db.getRecord("SCAU0","UCLS=:scau.%ucls")
	
	// If this transaction don't need to Analyze in Surveillance then quit
	if '$$CANLYZTR^ZSURUTL(.THR00X,scau.%ucls,scau0.zbatch,dmj.itc7) quit	
	
	//***********************Start-Surveillance 52*********************/
	set ZRFLG("ZCHNL")=$$CHKCHNL^ZSURUTL(dmj.etc,dmj.tlo,.THR00X)

	if '($G(ZRFLG("ZCHNL"))="") do {
		// DMJTSO("ZCID") for R048
		set ZRFLG("DMJTSO","ZCID")=$G(DMJTSO("ZCID"))
		
		// R048 - Except Free of Trans
		set ZRFLG("R048")=$$R048CDMJ(.dmj,.scau,ZTRAMT,.ZRFLG)
		
		do TTXSET(dmj.tjd,dmj.brcd,dmj.uid,dmj.trc,.DMJTSO,.TMPDRULE,.ZRFLG)
	} 
	//***********************End-Surveillance 52***********************/
	quit

R048CDMJ(RecordDMJ dmj,
	RecordSCAU scau,
	String ZTRAMT,
	String ZRFLG)	
	/*
	Input:
		RecordDMJ dmj,
		RecordSCAU scau,
		String ZTRAMT
		S ZRFLG("ZCHNL"))="A"
	Output:
		0 - Excluded R048
		1 - Included R048
	*/
	
	type String ZRET
	set ZRET=1
	type String ZRULE
	set ZRULE="R048"_$G(ZRFLG("ZCHNL"))
	set ZRFLG("R048","RULE")=ZRULE
	
	// - Check Rule Switch
	if '$D(ZRULESW(ZRULE)) quit 0

	if '$$DETCOMDMJ^ZSURUTL(ZRULE,.dmj) quit 0
	
	// - If Transaction Code include with "WFE" that also include R048. 
	if '($E(dmj.etc,1,3)="WFE") quit 0
	if '((+dmj.tamt)>0) quit 0

	//set ZRET=$$DETDMJ^ZSURUTL(ZRULE,.dmj,.scau,ZTRAMT)
	
	quit ZRET
				
TTXSET(Number ZTJD, Number ZBRCD, String ZUID, Number  ZORTSEQ, String DMJTSO, String TMPDRULE, String ZRFLG)
	/* 
	Check Condition is related to TTX
	*/
	// Check flag of each rule for analyze need to check TTX or not
	if ('($G(ZRFLG("R048"))=1)) quit
	
	type Number ZTSEQ,ZTSEQCHK
	set (ZTSEQ,ZTSEQCHK)=(ZORTSEQ\1000)*1000
	set ZTSEQCHK=ZTSEQCHK+999
	for  set ZTSEQ=$O(^TTX(ZTJD,ZBRCD,ZUID,ZTSEQ)) quit:((ZTSEQ>ZTSEQCHK)!(ZTSEQ=""))  do { 

		type RecordTTX zttx=Db.getRecord("TTX","TJD=:ZTJD,BRCD=:ZBRCD,UID=:ZUID,TSEQ=:ZTSEQ")
		
		// Detect Customer Account
		if 'Db.isDefined("ACN","CID=:zttx.cid") quit
		type RecordACN acn=Db.getRecord("ACN","CID=:zttx.cid")
		type RecordCIF cif=Db.getRecord("CIF","ACN=:acn.acn")		
			
		if ($G(ZRFLG("R048"))=1) do R048CTTX(.zttx,.acn,.cif,.ZRFLG)
	}
	quit
	
R048CTTX(RecordTTX zttx,
	RecordACN acn,
	RecordCIF cif,
	String ZRFLG)
	
	type String ZR048
	set ZR048=$G(ZRFLG("R048","RULE"))
	
	// If it is Customer Accounts that is included in Table ACN then continue
	if 'Db.isDefined("ACN","CID=:zttx.cid") quit
	
	// Skip transaction W/D for Fee
	if $$CHKISFEE^ZSURUTL(zttx.etc) quit
		
	// Check Common Condition
	set ZRFLG("R048")=$$DETCOM^ZSURUTL($G(ZRFLG("R048","RULE")),.acn,.cif)
	if ($G(ZRFLG("R048"))=0) quit
	
	// If it is A/C From 
	// - Account of Transaction Source of Funds Transfer (Transfer from Account)=$G(ZRFLG("DMJTSO","ZCID"))		
	//if zttx.cid=$G(ZRFLG("DMJTSO","ZCID")) do { if $G(ZRFLG("R048"))=0 quit
	if zttx.itc1=0 do { if $G(ZRFLG("R048"))=0 quit
		// If it is transfering transaction then continue.
		if '$$CETCTRF^ZSURUTL(zttx.etc) quit
				
		type Number ZXMINRET
		set ZXMINRET=0
		// Condition to exclude for each rule			
		if $D(TMPDRULE("ZUTBLSUXMIN",ZR048)) do {
			type RecordZUTBLSUXMIN zsuxmin=Db.getRecord("ZUTBLSUXMIN","RULE=:ZR048")
			if +zsuxmin.amt=0 quit
			if (+zttx.tamt)<zsuxmin.amt quit
			set ZXMINRET=1
		}
		if 'ZXMINRET set ZRFLG("R048")=0 quit
		
		// Incase it is Transfering Transaction then set FLAG(ZRFLG("R048","ACFROM"))
		set ZRFLG("R048","ACFROM")=1
		set ZRFLG("R048","SUSTTX")=zttx.tjd_","_zttx.brcd_","_zttx.uid_","_zttx.tseq
	}
	//if '(zttx.cid=$G(ZRFLG("DMJTSO","ZCID"))) do {
		// Incase it is Transfering Transaction and credit(1) transaction then set FLAG(ZRFLG("R048","ACTO"))
		if zttx.itc1 set ZRFLG("R048","ACTO")=1			
	//}
	
	// If in ZUTBLSUXKCUS is not include Rule then quit
	if $D(TMPDRULE("ZUTBLSUXKCUS",ZR048)),(cif.zktbccode'=""),Db.isDefined("ZUTBLSUXKCUS","RULE=:ZR048,ZKTBCCODE=:cif.zktbccode") set ZRFLG("R048")=0 quit			
	// If it have found and checked A/C From and A/C To already then set flag for loging suslog
	if ($G(ZRFLG("R048","ACFROM"))&$G(ZRFLG("R048","ACTO"))) set ZRFLG("R048")=2 do LDBTTX^ZSURUTL(.ZRFLG,"R048")
	quit
	
R042CDBT(String TSO(),
	RecordDTJ dtj,
	RecordTRN trn,
	RecordSCAU scau,
	RecordSCAU0 scau0,
	RecordACN acn,
	RecordCIF cif,
	String ZRFLG)
	
	// R042-Check Witdraw and transfer to other account with high amount
	
	set ZRFLG("R042","RULE")="R042"_$G(ZRFLG("ZCHNL"))

	// - Check only Debit Transaction
	if '(dtj.itc1=0) quit 0
				
	// - Check Rule Switch
	if '$D(ZRULESW($G(ZRFLG("R042","RULE")))) quit 0
	
	// - Check Common Filter
	if '$$DETCOM^ZSURUTL($G(ZRFLG("R042","RULE")),.acn,.cif) quit 0
	
	// - Check transaction amount is more than minimun amount(ZUTBLSUXMIN)
	if '(dtj.tot>$G(TMPDRULE("ZUTBLSUXMIN",$G(ZRFLG("R042","RULE"))))) quit 0
	
	// - Set From-Customer
	set ZRFLG("R042","FROMCIF")=cif.acn
	
	// - Check Monitoring/Non-Monitoring Parameter
	if $$DETDTJ^ZSURUTL($G(ZRFLG("R042","RULE")),acn,cif,scau,dtj,ZTRAMT) quit 1

	quit 0	

R042CCRT(String ZRFLGTTX,
	RecordACN acn,
	RecordCIF cif,
	RecordSCAU scau,
	RecordTTX ttx,
	String ZTRAMT)
	// Check condition of R042 with Transfering Credit Transaction(To Account)

	// If credit(1) transaction then continue
	if 'ttx.itc1 quit 0
	
	// Check Non-Monitoring Parameter
	if '($$DETTTX^ZSURUTL($G(ZRFLG("R042","RULE")),acn,cif,scau,ttx,ZTRAMT)) quit 0

	// If From-Customer is as same as To-Customer then exclued rule
	if $G(ZRFLG("R042","FROMCIF"))=cif.acn quit 0
	
	quit 1
		
ATMTIM(DATE,DATETIME,CID,TSEQ)
	// D ATMTIM^ZTRNCHNL(61881,6188067044,3013290560,151)
	type RecordDTJ dtj=Db.getRecord("DTJ","TJD=:DATE,DATETIME=:DATETIME,CID=:CID,TSEQ=:TSEQ")
	// ATM transaction time
	type Number ZATMTIM
	set ZATMTIM=dtj.time
	if Db.isDefined("HIST","CID=dtj.cid,TSEQ=dtj.tseq") do {
		type RecordHIST hist=Db.getRecord("HIST","CID=dtj.cid,TSEQ=dtj.tseq")
		if hist.ZATMTIM'="" set ZATMTIM=$$CVTIM^ZTRNCHNL(hist.ZATMTIM)
	}
	use 0 write !,"ZATMTIM=",!,ZATMTIM
	quit

CVTIM(String ZATMTIM)
	// W $$CVTIM^ZTRNCHNL("14:14")
	quit ($P(ZATMTIM,":",1)*60*60)+($P(ZATMTIM,":",2)*60)
	

	
	
	
