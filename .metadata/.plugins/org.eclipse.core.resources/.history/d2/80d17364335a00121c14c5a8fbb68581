//DO NOT MODIFY  CAP Customer Inquiry|ZCAPCIF|||||||1


	/*
	Created By Ravipong Chumsai Na Ayuthaya 18/09/11		
	The labels for each of these services is stored in ZUTBLTRAN table.  ZMRPC777
	references that table to get the appropriate label^routine to call to
	process the incoming request.

	This procedure is called only by ZMRPC777.

	Refer to ZMRPC777.proc for specifics about that procedure.	


	*/

	#WARN * OFF
	quit

CUSTIND(String input)
	/*  */
	//w $$CUSTIND^ZCAPCIF("||||||||||P|CI||8|||TH|0|0|0|")
	//w $$CUSTIND^ZCAPCIF("||||||||||P|CI|||CharenPokkapan||EN|0|20|0|")
	/* ***************************************************************************
 	CAP Customer Inquiry (individual)

 	Search for and return custoZmer data for all customer records that
 	match the input criteria.  There is a limit of 20 records maximum
 	to be returned.

 	Refer to the spreadsheet Profile-to-CAP_data_mapping_asof_interface_20110105_PT for
 	details of the input and output records.



	Customer search / inquiry

	Input Arguments:

	   input	"|" delimited string	/REQ/VAL/READ

	   	custType	Customer Type ("P" for personal)			Required
	   	inqType		Inquiry Type ("CI" Citizen ID; "PP" passport)		Required
	   	typeID		Value for Citizen Card or passport			Not Required
	   	custNum		Customer Number						Required if CI Num and passport are null
	   	custName	Customer Name						Not Required
	   	custSurname	Customer Surname					Not Required
	   	searchCond	Search Condition (how is this used?)			Not Required


	Returns:

	   output	"|" delimited string containing customer properties.  Note that there are some columns that
	   		are returned multiple times.  This is intentional.


																	*/

	type public Number ER = 0
	type public String RM = ""
	type String custName, custNum, custSurname, custType, header, inqType, output, searchCond, typeValue
	type String respCode = "0000", respDesc = ""
	type Number ACN = "", CNT = 0, recordCount = 0,recordCifCount=0,recordHhCount=0,ZSKIP=0
	type String WHERE=""
	set ZSYS="CAP"






	set header 		= input.piece("|",1,10)	// Common header
	set custType 		= input.piece("|",11)	// Customer Type: P=personal; C=Corporate
	set inqType 		= input.piece("|",12)	// Inquiry Type: "CI"=citizen ID card; "PP"=passport)
	set typeValue 		= input.piece("|",13)	// Citizen ID number or passport number
	set custNum 		= input.piece("|",14)	// Customer Number
	set custName 		= input.piece("|",15)	// Customer Name
	set custSurname 	= input.piece("|",16)	// Customer surname
	set searchCond 		= input.piece("|",17)	// Search condition
	set sTart		= input.piece("|",18)
	set cOunt		= input.piece("|",19)
	set toTal		= input.piece("|",20)
	set ZSYS		 =input.piece("|",21)
	set output =""


	/* Search for the customer based on customer citizenship card ID, passport number, or
	   customer number.

	   Get the customer number from the database and use that for the main select statement below */
	if 'custNum.isNull() do {

		if 'Db.isDefined("CIF","ACN=:custNum") set ER = 1, RM = "Invalid Customer Number "_custNum quit
		type RecordCIF cif = Db.getRecord("CIF","ACN=:custNum")
		if 'cif.getMode() set ER = 1, RM = "Invalid Customer Number "_custNum quit
		set ACN = cif.acn
		set WHERE = "ACN='"_ACN_"'"
		set ZSKIP=1
	}

	if 'ZSKIP do {

		if custName.isNull(),'custSurname.isNull() set ER = 1, RM = "Invalid Inquiry :Name Required" quit
		// Base search on citizenship ID number
		if 'typeValue.isNull() do {

			if inqType = "CI" do {
				// Search by customer citizen ID card

				if 'typeValue.isNull() do {
					type ResultSet rs = Db.select("ACN","CIF","ZCIZID=:typeValue")
					if 'rs.next() set ER = 1, RM = "Customer Citizenship ID Not Found: "_ typeValue quit
					set ACN = rs.getCol("ACN")
					set WHERE = "ZCIZID='"_typeValue_"'"
					set ^ZNEWTEST(7)=WHERE
				}

				// if no citizenship ID was passed in, use customer number, if it was passed in

				// otherwise return an error indicating there is missing input data.
				// if custNum.isNull() set ER = 1, RM = "Customer Number or Identifier Required" quit
			}


			if inqType = "PP" do {
				// search by customer passport number
				if 'typeValue.isNull() do {
					type ResultSet rs = Db.select("ACN","CIF","PASNUM=:typeValue")
					if 'rs.next() set ER = 1, RM = "Passport Number Not Found: "_ typeValue quit
					set ACN = rs.getCol("ACN")
					set WHERE = "PASNUM='"_typeValue_"'"

				}
				if custNum.isNull(),typeValue.isNull() set ER = 1, RM = "Customer Number or Identifier Required" quit

			}
		}



		// build WHERE clause based on the type of request this is.
		//if custNum.isNull(),custSurname.isNull(),custName.isNull() set ER = 1, RM =  "Customer Number or Identifier Required" quit

	}
	if ER quit RM.get()
	//set WHERE = WHERE_" AND PERS=0"



	/*
	do {
		// We need to determine if we have more than 1 record in the result set.  If we have more than 1, then
		//  build the output using the Personal List section of the record layout.  If we only have 1 record, then
		// build the output using the personal detail section of the layout.

		type String exe()
		type ResultSet recCifCount
		if 'custName.isNull() set recCifCount = Db.select("ACN","CIF","ZXNAME BETWEEN :NAME AND :END AND PERS=0")
		else set recCifCount = Db.select("ACN","CIF",WHERE)
		while recCifCount.next() do {	
			type ResultSet recHhCount = Db.select("COUNT(HEADACN)","CIFHH","ACN=:recCifCount.getCol(1)")
			if recHhCount.next() set recordHhCount=recHhCount.getCol(1), recordCount=recordCount+recordHhCount
			else set recordCount=recordCount+1
		}				
	}
	*/




	do {
		catch error@"LOGERR" {
			set respCode = "1999"	// default failure code
			set respDesc = error.description

		}

		set exit=0
		// We need to determine if we have more than 1 record in the result set.  If we have more than 1, then
		//   build the output using the Personal List section of the record layout.  If we only have 1 record, then
		// build the output using the personal detail section of the layout.


		// type DbSet ds = Db.selectDbSet("CIF",WHERE)
		/*
		type DbSet ds1=Db.selectDbSet("CIF",WHERE)
		while ds1.next() do {
		type RecordCIF zcif = ds1.getRecord()
		set ZACN=zcif.acn
		}
		*/


		type String exe()
		type DbSet ds,dstemp1


		if custName.isNull() do {

			set dstemp1=Db.selectDbSet("CIF",WHERE)
			set ds=dstemp1
		}


		if 'custName.isNull() do {
			type DbSet dstemp2
			if searchCond="TH" do {

				set NAME=custName
				set END=custName_$C(255)

				if 'custSurname.isNull() do {
					set END = custName_","_custSurname_$C(255)
					set NAME= custName_","_custSurname
				}
				set dstemp2 = Db.selectDbSet("CIF","ZXNAME BETWEEN :NAME AND :END")


			}

			if searchCond="EN" do {
				if 'custSurname.isNull() do {
					set NAME=custSurname
					set END=custSurname_$C(255)
					set dstemp2= Db.selectDbSet("CIF","ZEFNAME=:custName AND ZELNM BETWEEN :NAME AND :END")

				}
				else do {
					set NAME=custName
					set END=custName_$C(255)
					set dstemp2 = Db.selectDbSet("CIF","ZEFNAME BETWEEN :NAME AND :END")

				}



			}
			/*
			while dstemp2.next() do {
			type RecordCIF test = dstemp2.getRecord()
			write !,"ACN :"_test.acn_" NAME :"_(test.ZEFNAME)_" SurName :"_test.ZELNM
			write !
			write !

			}
			*/

			set ds=dstemp2
		}


		//else set ds = Db.selectDbSet("CIF",WHERE)

		set ztmp=""
		set CNT=0      //For Tracking all Record
		set zCNT=cOunt
		set zwait=0
		set sendFLG=0  // Count Actual sent item
		if (cOunt'=0),(toTal>0) set zwait=1,recordCount=toTal

		while ds.next() do { quit:exit
			type String ZTITLE = ""
			set i=0
			type RecordCIF cif = ds.getRecord("CIF")
			if cif.pers=1 quit
			set ZACN=cif.acn
			//if cif.pers=1 quit
			type ResultSet cifhh = Db.select("HEADACN,HHTYP,RELATE,ZATHR,ZBRD,ZPOS,ZSHHD,ZSHM","CIFHH","ACN=:ZACN")

			if (toTal=0),(cOunt'=0),(sTart=0) do {


				//else set output.piece("|",2) = cif.nam
				if (searchCond="EN") do {
					type ResultSet title = Db.select("TITLECD","ZUTBLTITLE","DESC=:cif.zetitle AND ENGFLG='1'")
					if title.next() set ZTITLE=title.getCol(1)
					if ZSYS="LS" set output.piece("|",1) = cif.zetitle
					else set output.piece("|",1) = ZTITLE
					set output.piece("|",2)= cif.zenam
				}
				else do {
					type ResultSet title = Db.select("TITLECD","ZUTBLTITLE","DESC=:cif.ztitle AND ENGFLG=0")
					if title.next() set ZTITLE=title.getCol(1)
					if ZSYS="LS" set output.piece("|",1) =cif.ztitle
					else set output.piece("|",1) = ZTITLE
					//set output.piece("|",1) = cif.ztitle
					set output.piece("|",2) = cif.nam
				}
				set output.piece("|",3) = cif.acn
				set output.piece("|",4) = cif.zcizid
				set output.piece("|",5) = cif.dob.toString("DD/MM/YEAR")
				set output.piece("|",6) = cif.taxid
				set output.piece("|",7) = cif.boo
				//
				if cifhh.isEmpty() do {
					set recordCount=recordCount+1
					//Send CIHH data=""
					set output.piece("|",25) =""
					if (zCNT>0) do {
						set ztmp=ztmp_output_124.char()
						set sendFLG=sendFLG+1
						set zCNT=zCNT-1
					}
				}
				//Affiliation INFO
				while cifhh.next() do { quit:exit
					set recordCount=recordCount+1
					set zhh=output
					set zhh.piece("|",8) = cifhh.getCol(1)
					set zhh.piece("|",9) = cifhh.getCol(2)
					set zhh.piece("|",10) = $S(cifhh.getCol(1)=cif.acn:1,1:0)
					set zhh.piece("|",11) = $$GET^ZCBSCMS("NAM,CIF,ACN,"_cifhh.getCol(1))
					set zhh.piece("|",12) = cifhh.getCol(3)
					set zhh.piece("|",13) = cifhh.getCol(4)
					set zhh.piece("|",14) = cifhh.getCol(5)
					set zhh.piece("|",15) = cifhh.getCol(6)
					set zhh.piece("|",16) = cifhh.getCol(7)
					set zhh.piece("|",17) = cifhh.getCol(8)
					set zhh.piece("|",23) = ""
					if cifhh.getCol(3)="110100" do {
						if (zhh.piece("|",10)=0) do {
							type RecordCIF zspouse = Db.getRecord("CIF","ACN=:cifhh.getCol(1)")
							set zhh.piece("|",18) = zspouse.acn
							set zhh.piece("|",19) = $$GET^ZCBSCMS("TITLECD,ZUTBLTITLE,DESC,"_zspouse.ztitle)
							set zhh.piece("|",20) = zspouse.fname
							set zhh.piece("|",21) = zspouse.mname
							set zhh.piece("|",22) = zspouse.lnm
							set zhh.piece("|",23) = zspouse.zcizid
							set zhh.piece("|",24) = zspouse.nation
							set zhh.piece("|",25) = zspouse.zrescd
						}
						else  do {
							type ResultSet zrs = Db.select("MACN","CIFHH0","ACN=:cifhh.getCol(1)")
							if zrs.next() set ZMACN = zrs.getCol(1)
							type RecordCIF zspouse = Db.getRecord("CIF","ACN=:cifhh.getCol(1)")
							set zhh.piece("|",18) = zspouse.acn
							set zhh.piece("|",19) = $$GET^ZCBSCMS("TITLECD,ZUTBLTITLE,DESC,"_zspouse.ztitle)
							set zhh.piece("|",20) = zspouse.fname
							set zhh.piece("|",21) = zspouse.mname
							set zhh.piece("|",22) = zspouse.lnm
							set zhh.piece("|",23) = zspouse.zcizid
							set zhh.piece("|",24) = zspouse.nation
							set zhh.piece("|",25) = zspouse.zrescd
						}
					}
					else  do {
						set zhh.piece("|",18) = ""
						set zhh.piece("|",19) = ""
						set zhh.piece("|",20) = ""
						set zhh.piece("|",21) = ""
						set zhh.piece("|",22) = ""
						set zhh.piece("|",23) = ""
						set zhh.piece("|",24) = ""
						set zhh.piece("|",25) = ""
					}
					set zhh =zhh_124.char()
					if (zCNT>0) do {
						set ztmp=ztmp_zhh
						set sendFLG=sendFLG+1
						set zCNT=zCNT-1
					}

				}




			}

			if (zwait) do {

				if (searchCond="EN") do {
					type ResultSet title = Db.select("TITLECD","ZUTBLTITLE","DESC=:cif.zetitle AND ENGFLG='1'")
					if title.next() set ZTITLE=title.getCol(1)
					if ZSYS="LS" set output.piece("|",1) = cif.zetitle
					else set output.piece("|",1) = ZTITLE
					set output.piece("|",2)= cif.zenam
				}
				else do {
					type ResultSet title = Db.select("TITLECD","ZUTBLTITLE","DESC=:cif.ztitle AND ENGFLG=0")
					if title.next() set ZTITLE=title.getCol(1)
					if ZSYS="LS" set output.piece("|",1) =cif.ztitle
					else set output.piece("|",1) = ZTITLE
					//set output.piece("|",1) = cif.ztitle
					set output.piece("|",2) = cif.nam
				}

				set output.piece("|",3) = cif.acn
				set output.piece("|",4) = cif.zcizid
				set output.piece("|",5) = cif.dob.toString("DD/MM/YEAR")
				set output.piece("|",6) = cif.taxid
				set output.piece("|",7) = cif.boo
				//set output.piece("|",8) =
				if cifhh.isEmpty() do {
					//set recordCount=recordCount+1
					//Send CIHH data=""
					set output.piece("|",25) =""
					if (zCNT>0) do {
						set CNT=CNT+1
						if (CNT<(sTart+1)) quit
						set ztmp=ztmp_output_124.char()
						set sendFLG=sendFLG+1
						set zCNT=zCNT-1
					}
				}
				//Affiliation INFO
				while cifhh.next() do { quit:exit
					set CNT=CNT+1
					set zhh=output
					set zhh.piece("|",8) = cifhh.getCol(1)
					set zhh.piece("|",9) = cifhh.getCol(2)
					set zhh.piece("|",10) = $S(cifhh.getCol(1)=cif.acn:1,1:0)
					set zhh.piece("|",11) = $$GET^ZCBSCMS("NAM,CIF,ACN,"_cifhh.getCol(1))
					set zhh.piece("|",12) = cifhh.getCol(3)
					set zhh.piece("|",13) = cifhh.getCol(4)
					set zhh.piece("|",14) = cifhh.getCol(5)
					set zhh.piece("|",15) = cifhh.getCol(6)
					set zhh.piece("|",16) = cifhh.getCol(7)
					set zhh.piece("|",17) = cifhh.getCol(8)
					set zhh.piece("|",23) = ""
					if cifhh.getCol(3)="110100" do {
						if (zhh.piece("|",10)=0) do {
							type RecordCIF zspouse = Db.getRecord("CIF","ACN=:cifhh.getCol(1)")
							set zhh.piece("|",18) = zspouse.acn
							set zhh.piece("|",19) = $$GET^ZCBSCMS("TITLECD,ZUTBLTITLE,DESC,"_zspouse.ztitle)
							set zhh.piece("|",20) = zspouse.fname
							set zhh.piece("|",21) = zspouse.mname
							set zhh.piece("|",22) = zspouse.lnm
							set zhh.piece("|",23) = zspouse.zcizid
							set zhh.piece("|",24) = zspouse.nation
							set zhh.piece("|",25) = zspouse.zrescd
						}
						else do {
							type ResultSet zrs = Db.select("MACN","CIFHH0","ACN=:cifhh.getCol(1)")
							if zrs.next() set ZMACN = zrs.getCol(1)
							type RecordCIF zspouse = Db.getRecord("CIF","ACN=:cifhh.getCol(1)")
							set zhh.piece("|",18) = zspouse.acn
							set zhh.piece("|",19) = $$GET^ZCBSCMS("TITLECD,ZUTBLTITLE,DESC,"_zspouse.ztitle)
							set zhh.piece("|",20) = zspouse.fname
							set zhh.piece("|",21) = zspouse.mname
							set zhh.piece("|",22) = zspouse.lnm
							set zhh.piece("|",23) = zspouse.zcizid
							set zhh.piece("|",24) = zspouse.nation
							set zhh.piece("|",25) = zspouse.zrescd
						}
					}
					else  do {
						set zhh.piece("|",18) = ""
						set zhh.piece("|",19) = ""
						set zhh.piece("|",20) = ""
						set zhh.piece("|",21) = ""
						set zhh.piece("|",22) = ""
						set zhh.piece("|",23) = ""
						set zhh.piece("|",24) = ""
						set zhh.piece("|",25) = ""
					}
					if ((sTart+1)<CNT),(zCNT>0) do {

						set ztmp=ztmp_zhh_124.char()
						set sendFLG=sendFLG+1
						set zCNT=zCNT-1
						if zCNT=0 set exit=1 set zwait=0
					}
				}



			}

			//Return indicated CIF
			if (sTart=0),(cOunt=0),(toTal=0) do {
				type String mar=cif.mar, sex=cif.sex, educ=cif.educ, zrescd=cif.zrescd, own=cif.own, zocc=cif.zocc, zsocc=cif.zsocc, zposcd=cif.zposcd, emplno=cif.emplno, zoffcd=cif.zoffcd, mf=cif.mf, zresunit=cif.zresunit
				type String zisicsd=cif.zisicsd, zisicgc=cif.zisicgc,  zisicts=cif.zisicts, inc=cif.inc, nation=cif.nation, zrrt=cif.zrrt, zkycstat=cif.zkycstat, dlstate=cif.dlstate, ccode=cif.ccode
				type String pcntry=cif.pcntry, pstate=cif.pstate, pdist=cif.pcity, psubdist=cif.zpsdiscd, priv=cif.priv, cd1=cif.ZMINISTRYCD1, cd2=cif.ZMINISTRYCD2, cd3=cif.ZMINISTRYCD3
				type String mcntry=cif.mcntry, mstate=cif.mstate, mdist=cif.mcity, msubdist=cif.zmsdiscd, cc=cif.cc, relicd=cif.ZRELIGIONCD
				type String zocntry=cif.zocntry, zostate=cif.zostate, zodist=cif.zocity, zosubdist=cif.zosdiscd, dobcd=cif.zdobcd
				type String ZIPC,ZIPCDES,ZCCODE,ZCCODED
				if 'ztmp.isNull() quit
				set output.piece("|",1) = cif.acn
				set output.piece("|",2) = cif.ZPPBNKMEMFLG
				set output.piece("|",3) = cif.ZHLPTEACHER
				set output.piece("|",4) = cif.ZHLPMEMBER
				set output.piece("|",5) = cif.ZEMPID
				set output.piece("|",6) = cif.ZSTFID
				if ZSYS="LS" do {
					set output.piece("|",7) = cif.ztitle
					set output.piece("|",11) = cif.zetitle
				}
				else do {
					set output.piece("|",7) = $$GET^ZCBSCMS("TITLECD,ZUTBLTITLE,DESC,"_cif.ztitle)
					set output.piece("|",11) = $$GET^ZCBSCMS("TITLECD,ZUTBLTITLE,DESC,"_cif.zetitle)
				}


				set output.piece("|",8) = cif.FNAME
				set output.piece("|",9) = cif.LNM
				set output.piece("|",10) = cif.MNAME


				set output.piece("|",12) = cif.ZEFNAME
				set output.piece("|",13) = cif.ZELNM
				set output.piece("|",14) = cif.ZEMNAME

				set output.piece("|",15) = cif.ZCIZID
				set output.piece("|",16) = cif.ZCIZCEN
				set output.piece("|",17) = cif.ZCIZSDT.toString("DD/MM/YEAR")
				set output.piece("|",18) = cif.zcizmdt.toString("DD/MM/YEAR")

				set output.piece("|",19) = cif.pasnum
				set output.piece("|",20) = cif.pci
				set output.piece("|",21) = cif.pisdt.toString("DD/MM/YEAR")
				set output.piece("|",22) = cif.ped.toString("DD/MM/YEAR")

				set output.piece("|",23) = cif.DLNUM
				set output.piece("|",24) = cif.DLSTATE
				set output.piece("|",25) = cif.DLISDT.toString("DD/MM/YEAR")
				set output.piece("|",26) = cif.DLEXPDT.toString("DD/MM/YEAR")

				if ZSYS="LS" do {
					type ResultSet oit = Db.select("DES","UTBLID","IDTYP=:cif.oit")
					if oit.next() set output.piece("|",27) = oit.getCol(1)
				}
				else set output.piece("|",27) = cif.OIT

				set output.piece("|",28) = cif.ISSR
				set output.piece("|",29) = cif.OIN
				set output.piece("|",30) = cif.OISDT.toString("DD/MM/YEAR")

				if ZSYS="LS" do {
					type ResultSet sex = Db.select("DESC","UTBLSEX","SEX=:cif.sex")
					if sex.next() set output.piece("|",31) = sex.getCol(1)
					type ResultSet zmar = Db.select("DESC","UTBLMS","MAR=:cif.mar")
					if zmar.next() set output.piece("|",32) = zmar.getCol(1)
				}
				else do {
					set output.piece("|",31) = cif.sex
					set output.piece("|",32) = cif.mar
				}
				set output.piece("|",33) = cif.dob.toString("DD/MM/YEAR")

				if ZSYS="LS" do {
					type ResultSet zdob = Db.select("DESC","ZUTBLDOB","ZDOBCD=:cif.ZDOBCD")
					if zdob.next() set output.piece("|",34) = zdob.getCol(1)
				}
				else set output.piece("|",34) = cif.ZDOBCD
				set output.piece("|",35) = cif.ZRESCD

				if ZSYS="LS" do {
					type ResultSet znat = Db.select("DESC","STBLCNTRY","CNTRY=:cif.NATION")
					if znat.next() set output.piece("|",36) = znat.getCol(1)
				}
				else set output.piece("|",36) = cif.NATION

				if ZSYS="LS" do {
					type ResultSet ZREL = Db.select("DESC","ZUTBLRELIGION","ZRELIGIONCD=:cif.ZRELIGIONCD")
					if ZREL.next() set output.piece("|",37) = ZREL.getCol(1)
				}
				else set output.piece("|",37) = cif.ZRELIGIONCD

				if ZSYS="LS" do {
					type ResultSet ZEDUC = Db.select("DESC","UTBLEDUC","EDUC=:cif.EDUC")
					if ZEDUC.next() set output.piece("|",38) = ZEDUC.getCol(1)
				}
				else set output.piece("|",38) = cif.EDUC
				set output.piece("|",39) = cif.DEP
				set output.piece("|",40) = cif.ZPPBNKMEMFLG
				set output.piece("|",41) = cif.ZRRT

				if ZSYS="LS" do {

					type ResultSet ZPRIV = Db.select("DES","STBLCIFPRIV","PRIV=:cif.PRIV")
					if ZPRIV.next() set output.piece("|",42) = ZPRIV.getCol(1)
					else set output.piece("|",42) = cif.PRIV


					type ResultSet ZOCC = Db.select("TDES","ZUTBLOC","OCC=:cif.ZOCC")
					if ZOCC.next() set output.piece("|",43) = ZOCC.getCol(1)
					else set output.piece("|",43) = cif.ZOCC

					type ResultSet ZSOCC = Db.select("TDES","ZUTBLSOC","OCC=:cif.ZOCC AND SOCC=:cif.ZSOCC")
					if ZSOCC.next() set output.piece("|",44) = ZSOCC.getCol(1)
					else set output.piece("|",44) = cif.ZSOCC

					type ResultSet ZMIN1 = Db.select("DESC","ZUTBLMINISTRY1","ZMINISTRYCD1=:cif.ZMINISTRYCD1")
					if ZMIN1.next() set output.piece("|",45) = ZMIN1.getCol(1)
					else set output.piece("|",45) = cif.ZMINISTRYCD1

					type ResultSet ZMIN2 = Db.select("DESC","ZUTBLMINISTRY2","ZMINISTRYCD1=:cif.ZMINISTRYCD1 AND ZMINISTRYCD2=:cif.ZMINISTRYCD2")
					if ZMIN2.next() set output.piece("|",46) = ZMIN2.getCol(1)
					else set output.piece("|",46) = cif.ZMINISTRYCD2

					type ResultSet ZMIN3 = Db.select("DESC","ZUTBLMINISTRY3","ZMINISTRYCD1=:cif.ZMINISTRYCD1 AND ZMINISTRYCD2=:cif.ZMINISTRYCD2 AND ZMINISTRYCD3=:cif.ZMINISTRYCD3")
					if ZMIN3.next() set output.piece("|",47) = ZMIN3.getCol(1)
					else set output.piece("|",47) = cif.ZMINISTRYCD3

					type ResultSet ZINC = Db.select("DESC","UTBLIC","INC=:cif.INC")
					if ZINC.next() set output.piece("|",48) = ZINC.getCol(1)
					else set output.piece("|",48) = cif.INC

				}
				else do {
					set output.piece("|",42) = cif.PRIV
					set output.piece("|",43) = cif.ZOCC
					set output.piece("|",44) = cif.ZSOCC
					set output.piece("|",45) = cif.ZMINISTRYCD1
					set output.piece("|",46) = cif.ZMINISTRYCD2
					set output.piece("|",47) = cif.ZMINISTRYCD3
					set output.piece("|",48) = cif.INC

				}



				set output.piece("|",49) = cif.PAD1
				set output.piece("|",50) = cif.PAD2
				set output.piece("|",51) = cif.PAD3
				set output.piece("|",52) = cif.PAD4
				set output.piece("|",53) = cif.PCNTRY
				set output.piece("|",54) = cif.PSTATE
				set output.piece("|",55) = cif.PCITY
				set output.piece("|",56) = cif.ZPSDISCD
				set output.piece("|",57) = cif.PZIP

				set output.piece("|",58) = cif.ZHHOLDNUMBER
				set output.piece("|",59) = cif.MAD1
				set output.piece("|",60) = cif.MAD2
				set output.piece("|",61) = cif.MAD3
				set output.piece("|",62) = cif.MAD4
				set output.piece("|",63) = cif.MCNTRY
				set output.piece("|",64) = cif.MSTATE
				set output.piece("|",65) = cif.MCITY
				set output.piece("|",66) = cif.ZMSDISCD
				set output.piece("|",67) = cif.MZIP

				set output.piece("|",68) = cif.ZOAD1
				set output.piece("|",69) = cif.ZOAD2
				set output.piece("|",70) = cif.ZOAD3
				set output.piece("|",71) = cif.ZOAD4
				set output.piece("|",72) = cif.ZOCNTRY
				set output.piece("|",73) = cif.ZOSTATE
				set output.piece("|",74) = cif.ZOCITY
				set output.piece("|",75) = cif.ZOSDISCD
				set output.piece("|",76) = cif.ZOZIP

				set output.piece("|",77) = cif.BPH
				set output.piece("|",78) = cif.BPHEXT
				set output.piece("|",79) = cif.FAXNUM
				set output.piece("|",80) = cif.HPH
				set output.piece("|",81) = cif.ZHPHEXT
				set output.piece("|",82) = cif.ZHFAXNUM
				set output.piece("|",83) = cif.APH
				set output.piece("|",84) = cif.EMAIL


				set output.piece("|",88) = cif.zjin

				set output.piece("|",89) = cif.CCODE
				set output.piece("|",90) = cif.ZOFFCD

				if ZSYS="LS" do {


					type ResultSet ZCO = Db.select("DES","UTBLCO","CO=:cif.CO")
					if ZCO.next() set output.piece("|",85) = ZCO.getCol(1)
					set output.piece("|",86) = $$GET^ZCBSCMS("DESC,ZUTBLKTBCUST,KTBCCODE,"_cif.ZKTBCCODE)

					type ResultSet zipc = Db.select("DESC","ZUTBLINVP","IPCODE=:cif.zipc")
					if zipc.next() set output.piece("|",87) = zipc.getCol(1)

					type ResultSet ZBRCD = Db.select("DESC","UTBLBRCD","BRCD=:cif.BOO")
					if ZBRCD.next() set output.piece("|",91) = cif.BOO_" - "_ZBRCD.getCol(1)

					type ResultSet ZRESU = Db.select("DESC","UTBLCCNTR","CC=:cif.ZRESUNIT")
					if ZRESU.next() set output.piece("|",92) = cif.ZRESUNIT_" - "_ZRESU.getCol(1)

					type ResultSet ZCC = Db.select("DESC","UTBLCCNTR","CC=:cif.CC")
					if ZCC.next() set output.piece("|",93) = cif.CC_" - "_ZCC.getCol(1)

				}

				else do {

					set output.piece("|",85) = cif.CO
					set ZCCODED = $$GET^ZCBSCMS("DESC,ZUTBLKTBCUST,KTBCCODE,"_cif.ZKTBCCODE)
					set output.piece("|",86) = cif.ZKTBCCODE_"-"_ZCCODED
					set output.piece("|",87) = cif.zipc
					set output.piece("|",91) = cif.BOO
					set output.piece("|",92) = cif.ZRESUNIT
					set output.piece("|",93) = cif.CC
				}
				set output.piece("|",94) = cif.SOL
				set output.piece("|",95) = cif.MF

				set output.piece("|",96) = cif.DAO.toString("DD/MM/YEAR")
				// set output.piece("|",97) = cif.LFU.toString("DD/MM/YEAR")
				set output.piece("|",97) = cif.cifclcd.toString("DD/MM/YEAR")
				set output.piece("|",98) = cif.FMLD.toString("DD/MM/YEAR")
				//Avoid Error when passnum,zcizicd = ""
				set ZPASNUM=cif.pasnum
				set ZCICID=cif.zcizid
				if cif.pasnum="" set ZPASNUM="N/A"
				if cif.zcizid="" set ZCICID="N/A"
				set output.piece("|",99) = $S(Db.isDefined("ZKYCPEP","ID=:ZPASNUM"):1,Db.isDefined("ZKYCPEP","ID=:ZCICID"):1,1:0)
				set output.piece("|",100) = $S(Db.isDefined("ZKYCTRR","ID=:ZPASNUM"):1,Db.isDefined("ZKYCTRR","ID=:ZCICID"):1,1:0)
				set output.piece("|",101) = cif.CCODE_","_cif.CO_","_cif.EMPCD_","_cif.OCC_","_cif.RESCD_","_cif.TYPE_","_cif.ZKTBCCODE_","_cif.ZPOSCD
				set output.piece("|",102) = cif.taxid

				set ZRFLG=""

				type ResultSet zrflg = Db.select("RFLG","RFLGC","ACN=:cif.acn")
				while zrflg.next() do {
					if 'ZRFLG.isNull() set ZRFLG=ZRFLG_","_zrflg.getCol(1)
					else set ZRFLG=zrflg.getCol(1)

				}
				set output.piece("|",110) = ZRFLG
				while cifhh.next() do {
					set recordHhCount=recordHhCount+1
					set output.piece("|",144+i) = cifhh.getCol(2)
					set output.piece("|",145+i) = $S(cifhh.getCol(1)=cif.acn:1,1:0)
					set output.piece("|",146+i) = cifhh.getCol(1)_"-"_$$GET^ZCBSCMS("NAM,CIF,ACN,"_cifhh.getCol(1))
					set output.piece("|",147+i) = cifhh.getCol(3)
					set output.piece("|",148+i) = cifhh.getCol(4)
					set output.piece("|",149+i) = cifhh.getCol(5)
					set output.piece("|",150+i) = cifhh.getCol(6)
					set output.piece("|",151+i) = cifhh.getCol(7)
					set output.piece("|",152+i) = cifhh.getCol(8)
					set output.piece("|",160+i) = ""
					if cifhh.getCol(3)="110100" do {
						if (output.piece("|",145+i)=0) do {
							type RecordCIF zspouse = Db.getRecord("CIF","ACN=:cifhh.getCol(1)")
							set output.piece("|",153+i) = zspouse.acn
							set output.piece("|",154+i) = $$GET^ZCBSCMS("TITLECD,ZUTBLTITLE,DESC,"_zspouse.ztitle)
							set output.piece("|",155+i) = zspouse.fname
							set output.piece("|",156+i) = zspouse.mname
							set output.piece("|",157+i) = zspouse.lnm
							set output.piece("|",158+i) = zspouse.zcizid
							set output.piece("|",159+i) = zspouse.nation
							set output.piece("|",160+i) = zspouse.zrescd
						}
						else do {
							type ResultSet zrs = Db.select("MACN","CIFHH0","ACN=:cifhh.getCol(1)")
							if zrs.next() set ZMACN = zrs.getCol(1)
							type RecordCIF zspouse = Db.getRecord("CIF","ACN=:cifhh.getCol(1)")
							set output.piece("|",153+i) = zspouse.acn
							set output.piece("|",154+i) = $$GET^ZCBSCMS("TITLECD,ZUTBLTITLE,DESC,"_zspouse.ztitle)
							set output.piece("|",155+i) = zspouse.fname
							set output.piece("|",156+i) = zspouse.mname
							set output.piece("|",157+i) = zspouse.lnm
							set output.piece("|",158+i) = zspouse.zcizid
							set output.piece("|",159+i) = zspouse.nation
							set output.piece("|",160+i) = zspouse.zrescd
						}
					}
					else  do {
						set output.piece("|",153+i) = ""
						set output.piece("|",154+i) = ""
						set output.piece("|",155+i) = ""
						set output.piece("|",156+i) = ""
						set output.piece("|",157+i) = ""
						set output.piece("|",158+i) = ""
						set output.piece("|",159+i) = ""
						set output.piece("|",160+i) = ""
					}
					set i=i+17
				}
				set recordCount=1
				if output.piece("|",160).isNull() set output.piece("|",160)= ""
				set sendFLG =recordHhCount   //No Affiliation Info
				set ztmp=output

			}

		}
		set output=""
		set output=sendFLG_"|"_ztmp
		set header.piece("|",7) = recordCount
		set output=header_"|"_output
	}



	// test


	quit output




CUSTCORP(String input)
	/*  */
	//w $$CUSTCORP^ZCAPCIF("||||||||||C|CI||2627||TH|0|0|0|")
	//w $$CUSTCORP^ZCAPCIF("||||||||||C|||CharenPokkapan||EN|0|20|0")
	/* ***************************************************************************
 	CAP Customer Inquiry (corporate)

 	Search for and return customer data for all customer records that
 	match the input criteria.  There is a limit of 20 records maximum
 	to be returned.

 	Refer to the spreadsheet Profile-to-CAP_data_mapping_asof_interface_20110105_PT for
 	details of the input and output records.

	*/




	type public Number ER = 0
	type public String RM = ""

	type String custName, custNum, custSurname, custType, header, inqType, output, searchCond, typeValue
	type String respCode = "0000", respDesc = ""
	type Number ACN = "", CNT = 0, recordCount = 0,recordCifCount=0,recordHhCount=0
	type String WHERE=""
	set ZSYS="CAP"

	set header 		= input.piece("|",1,10)	// Common Header
	set custType 		= input.piece("|",11)	// Customer Type: P=personal; C=Corporate
	set inqType 		= input.piece("|",12)	// Inquiry Type: "TN":Tax ID; "SC":Juristic ID)
	set typeValue 		= input.piece("|",13)	// Tax ID or Juristic ID
	set custNum 		= input.piece("|",14)	// Customer Number
	set custName 		= input.piece("|",15)	// Customer Name
	set searchCond 		= input.piece("|",16)	// Search condition
	set sTart		= input.piece("|",17)
	set cOunt		= input.piece("|",18)
	set toTal		= input.piece("|",19)
	set ZSYS		= input.piece("|",20)
	set output = ""

	/* Search for the customer based on customer citizenship card ID, passport number, or
	   customer number.

	   Get the customer number from the database and use that for the main select statement below */
	if 'custNum.isNull() do {
		type RecordCIF cif = Db.getRecord("CIF","ACN=:custNum",1)
		if cif.pers=0 set ER = 1, RM = "Invalid Customer Number (PERSONAL)"_custNum quit
		if 'cif.getMode() set ER = 1, RM = "Invalid Customer Number "_custNum quit
		set ACN = cif.acn
		set WHERE = "ACN='"_ACN_"'"
	}

	if inqType = "TN" do {
		// Search by customer citizen ID card
		if 'typeValue.isNull() do {
			type ResultSet rs = Db.select("ACN","CIF","TAXID=:typeValue")
			if 'rs.next() set ER = 1, RM = "Tax ID Not Found: "_ typeValue quit
			set ACN = rs.getCol("ACN")
			set WHERE = "TAXID='"_typeValue_"'"
		}

	}

	else  if inqType = "SC" do {
		// search by customer passport number
		if 'typeValue.isNull() do {
			type ResultSet rs = Db.select("ACN","CIF","ZJIN=:typeValue")
			if 'rs.next() set ER = 1, RM = "Juristic Number Not Found: "_ typeValue quit
			set ACN = rs.getCol("ACN")
			set WHERE = "ZJIN='"_typeValue_"'"
		}


	}



	if ER set output.piece("|",102) = "" quit (header_"|"_$$GETTIME()_"|4|"_RM_"|1404"_RM_"|")	// 1404 is the 'record not found' failure code


	//if typeValue.isNull(),custNum.isNull(),custName.isNull() set ER = 1, RM =  "Customer Number or Identifier Required" quit
	//Build WHERE CLAUSE
	/*
	if 'custName.isNull() do {

		if searchCond.isNull() set ER = 1, RM ="Language Identifier Required" quit

		if searchCond="EN" do {
			if 'WHERE.isNull() set WHERE = WHERE_" AND ZENAM LIKE '%"_custName_"%'"
			else set WHERE = "ZENAM LIKE '%"_custName_"%'"
		}

		if searchCond="TH" do {
			if 'WHERE.isNull() set WHERE = WHERE_" AND XNAME LIKE '%"_custName_"%'"
			else set WHERE = "XNAME LIKE '%"_custName_"%'"
		}
	}
	*/


	if custType = "P" set WHERE = WHERE_" AND PERS=0"
	if custType = "C" set WHERE = WHERE_" AND PERS=1"
	if WHERE.isNull() set ER = 1, RM =inqType_" : is not a valid Inquiry Type :" quit

	/*
	do {
		// We need to determine if we have more than 1 record in the result set.  If we have more than 1, then
		//  build the output using the Personal List section of the record layout.  If we only have 1 record, then
		// build the output using the personal detail section of the layout.

		type String exe()
		type ResultSet recCifCount = Db.select("ACN","CIF",WHERE)
		while recCifCount.next() do {
			type ResultSet recHhCount = Db.select("COUNT(HEADACN)","CIFHH","ACN=:recCifCount.getCol(1)")
			if recHhCount.next() set recordHhCount=recHhCount.getCol(1)
		}
	}
	*/
	type String exe()
	type DbSet ds,dstemp1


	if custName.isNull() do {

		set dstemp1=Db.selectDbSet("CIF",WHERE)
		set ds=dstemp1
	}


	if 'custName.isNull() do {
		type DbSet dstemp2
		if searchCond="TH" do {

			set NAME=custName
			set END=custName_$C(255)

			set dstemp2 = Db.selectDbSet("CIF","ZXNAME BETWEEN :NAME AND :END")

		}

		if searchCond="EN" do {


			set NAME=custName
			set END=custName_$C(255)

			set dstemp2 = Db.selectDbSet("CIF","ZEFNAME BETWEEN :NAME AND :END")

		}




		/*
		while dstemp2.next() do {
		type RecordCIF test = dstemp2.getRecord()
		write !,"ACN :"_test.acn_" NAME :"_(test.ZEFNAME)_" SurName :"_test.ZELNM
		write !
		write !

		}
		*/
		if '$D(dstemp2) set ER=1,RM="Invalid Customer Name" quit
		set ds=dstemp2
	}

	if ER quit RM

	set ztmp=""
	set CNT=0
	set zwait=0
	set sendFLG=0
	set exit=0
	if (cOunt'=0),(toTal>0) set zwait=1


	while ds.next() do { quit:exit
		type String ZTITLE = ""
		set i=0
		type RecordCIF cif = ds.getRecord("CIF")
		if cif.pers=0 quit
		type ResultSet cifhh = Db.select("HEADACN,HHTYP,RELATE","CIFHH","ACN=:cif.acn")

		if (toTal=0),(cOunt'=0) do {

			if (searchCond="EN") do {
				type ResultSet title = Db.select("TITLECD","ZUTBLTITLE","DESC=:cif.zetitle AND ENGFLG='1'")
				if title.next() set ZTITLE=title.getCol(1)
				if ZSYS="LS" set record.piece("|",1) = cif.zetitle
				else set record.piece("|",1) = ZTITLE
				set record.piece("|",2)= cif.zenam
			}
			else do {
				type ResultSet title = Db.select("TITLECD","ZUTBLTITLE","DESC=:cif.ztitle AND ENGFLG=0")
				if title.next() set ZTITLE=title.getCol(1)
				if ZSYS="LS" set output.piece("|",1) =cif.ztitle
				else set record.piece("|",1) = ZTITLE
				//set output.piece("|",1) = cif.ztitle
				set record.piece("|",2) = cif.nam
			}

			set record.piece("|",3) = cif.acn
			set record.piece("|",4) = cif.zjin
			set record.piece("|",5) = cif.taxid
			set record.piece("|",6) = cif.boo

			set recordCount=recordCount+1
			if (cOunt'=0) do {
				set ztmp=ztmp_record_124.char()
				set sendFLG=sendFLG+1
				set cOunt=cOunt-1
			}

		}




		if (zwait) do {


			if (searchCond="EN") do {
				type ResultSet title = Db.select("TITLECD","ZUTBLTITLE","DESC=:cif.zetitle AND ENGFLG='1'")
				if title.next() set ZTITLE=title.getCol(1)
				if ZSYS="LS" set record.piece("|",1) = cif.zetitle
				else set record.piece("|",1) = ZTITLE
				set record.piece("|",2)= cif.zenam
			}
			else do {
				type ResultSet title = Db.select("TITLECD","ZUTBLTITLE","DESC=:cif.ztitle AND ENGFLG=0")
				if title.next() set ZTITLE=title.getCol(1)
				if ZSYS="LS" set output.piece("|",1) =cif.ztitle
				else set record.piece("|",1) = ZTITLE
				//set output.piece("|",1) = cif.ztitle
				set record.piece("|",2) = cif.nam
			}
			set record.piece("|",3) = cif.acn
			set record.piece("|",4) = cif.zjin
			set record.piece("|",5) = cif.taxid
			set record.piece("|",6) = cif.boo
			set recordCount=recordCount+1
			if (sTart'>CNT) do {
				set ztmp=ztmp_record_124.char()
				set sendFLG=sendFLG+1
				set cOunt=cOunt-1
				if cOunt=0 set exit=1 set zwait=0
			}

		}
		//CIF must be indicated,otherwise error will occure
		if (toTal=0),(cOunt=0),(sTart=0) do {

			if 'ztmp.isNull() quit

			set record.piece("|",1) = cif.acn
			if ZSYS="LS" do {
				set record.piece("|",2) = cif.ztitle
				set record.piece("|",4) = cif.zetitle
			}
			else do {
				set record.piece("|",2) = $$GET^ZCBSCMS("TITLECD,ZUTBLTITLE,DESC,"_cif.ztitle)
				set record.piece("|",4) = $$GET^ZCBSCMS("TITLECD,ZUTBLTITLE,DESC,"_cif.zetitle)
			}

			set record.piece("|",3) = cif.xname

			set record.piece("|",5) = cif.zenam

			set record.piece("|",6) = cif.mad1
			set record.piece("|",7) = cif.mad2
			set record.piece("|",8) = cif.mad3
			set record.piece("|",9) = cif.mad4
			set record.piece("|",10) = cif.mcntry
			set record.piece("|",12) = cif.mcity
			set record.piece("|",11) = cif.mstate
			set record.piece("|",13) = cif.zmsdiscd
			set record.piece("|",14) = cif.mzip

			set record.piece("|",15) = cif.ZHHOLDNUMBER
			set record.piece("|",16) = cif.pad1
			set record.piece("|",17) = cif.pad2
			set record.piece("|",18) = cif.pad3
			set record.piece("|",19) = cif.pad4
			set record.piece("|",20) = cif.pcntry
			set record.piece("|",22) = cif.pcity
			set record.piece("|",21) = cif.pstate
			set record.piece("|",23) = cif.ZPSDISCD
			set record.piece("|",24) = cif.pzip

			set record.piece("|",25) = cif.zoad1
			set record.piece("|",26) = cif.zoad2
			set record.piece("|",27) = cif.zoad3
			set record.piece("|",28) = cif.zoad4
			set record.piece("|",29) = cif.zocntry
			set record.piece("|",31) = cif.zocity
			set record.piece("|",30) = cif.zostate
			set record.piece("|",32) = cif.ZOSDISCD
			set record.piece("|",33) = cif.zozip

			set record.piece("|",34) = cif.bph
			set record.piece("|",35) = cif.bphext
			set record.piece("|",36) = cif.faxnum
			set record.piece("|",37) = cif.aph
			set record.piece("|",38) = cif.email
			//set record.piece("|",39) = cif.co
			set ZCCODE = cif.ZKTBCCODE
			set ZCCODED = $$GET^ZCBSCMS("DESC,ZUTBLKTBCUST,KTBCCODE,"_ZCCODE)
			//set record.piece("|",40) = cif.ZKTBCCODE_"-"_ZCCODED
			//type ResultSet zipc = Db.select("DESC","ZUTBLINVP","IPCODE=:cif.zipc")
			//if zipc.next() set output.piece("|",87) = zipc.getCol(1)
			//set record.piece("|",41) = cif.zipc
			set CCODES = $$GET^ZCBSCMS("DESC,UTBLCC,CCODE,"_cif.ccode)
			//set output.piece("|",41) = "TEST"
			set record.piece("|",42) = cif.taxid
			set record.piece("|",43) = cif.ccode_"-"_CCODES

			if ZSYS="LS" do {
				//String OUT46,OUT47
				//set OUT46,OUT47=""
				type ResultSet ZCO = Db.select("DES","UTBLCO","CO=:cif.CO")
				if ZCO.next() set record.piece("|",39) = ZCO.getCol(1)

				set record.piece("|",40) = $$GET^ZCBSCMS("DESC,ZUTBLKTBCUST,KTBCCODE,"_cif.ZKTBCCODE)

				type ResultSet zipc = Db.select("DESC","ZUTBLINVP","IPCODE=:cif.zipc")
				if zipc.next() set record.piece("|",41) = zipc.getCol(1)
				//set output.piece("|",41) = "TEST"

				type ResultSet ZBRCD = Db.select("DESC","UTBLBRCD","BRCD=:cif.BOO")
				if ZBRCD.next() set record.piece("|",45) = cif.BOO_" - "_ZBRCD.getCol(1)

				type ResultSet ZRESU = Db.select("DESC","UTBLCCNTR","CC=:cif.ZRESUNIT")
				if ZRESU.next() set record.piece("|",46) = cif.ZRESUNIT_" - "_ZRESU.getCol(1)
				//if ZRESU.next() set OUT46 =ZRESU.getCol(1)

				type ResultSet ZCC = Db.select("DESC","UTBLCCNTR","CC=:cif.CC")
				if ZCC.next() set record.piece("|",47) = cif.CC_" - "_ZCC.getCol(1)
				//if ZCC.next() set OUT47 = ZCC.getCol(1)
				//set record.piece("|",46) =cif.ZRESUNIT_" - "_OUT46
				//set record.piece("|",46) =cif.CC_" - "_OUT47

			}
			else do {
				set output.piece("|",39) = cif.CO
				//set ZCCODED = $$GET^ZCBSCMS("DESC,ZUTBLKTBCUST,KTBCCODE,"_cif.ZKTBCCODE)
				set record.piece("|",40) = cif.ZKTBCCODE_"-"_ZCCODED
				set record.piece("|",41) = cif.zipc
				//set output.piece("|",41) = "TEST"
				set record.piece("|",45) = cif.BOO
				set record.piece("|",46) = cif.ZRESUNIT
				set record.piece("|",47) = cif.CC
			}
			set record.piece("|",44) = cif.zoffcd
			//set record.piece("|",45) = cif.boo
			//set record.piece("|",46) = cif.zresunit
			//set record.piece("|",47) = cif.cc
			set record.piece("|",48) = cif.agent

			if ZSYS="LS" set record.piece("|",49) = $$GET^ZCBSCMS("DESC,UTBLMF,MF,"_cif.mf)
			else set record.piece("|",49) = cif.mf

			set record.piece("|",50) = cif.dao.toString("DD/MM/YEAR")
			set record.piece("|",51) = cif.cifclcd.toString("DD/MM/YEAR")
			set record.piece("|",52) = cif.fmld.toString("DD/MM/YEAR")
			set record.piece("|",53) = cif.ZESTOBJ
			set record.piece("|",54) = cif.NATION
			set record.piece("|",55) = cif.ZRESCD
			set record.piece("|",56) = cif.TA
			set record.piece("|",57) = cif.ZLIAB
			set record.piece("|",58) = cif.ZEXP
			set record.piece("|",59) = cif.ZNETPROFIT
			set record.piece("|",60) = cif.ZCHFLW
			set record.piece("|",61) = cif.ZCAP
			set record.piece("|",62) = cif.ZREGCAP
			set record.piece("|",63) = cif.ZPAIDCAP
			set record.piece("|",64) = cif.AS
			set record.piece("|",65) = cif.NW
			set record.piece("|",66) = cif.LFU.toString("DD/MM/YEAR")
			set record.piece("|",67) = cif.ZRRT
			set record.piece("|",68) = cif.CRE
			set record.piece("|",69) = cif.NE


			set record.piece("|",71) = cif.ZJIN
			set record.piece("|",72) = cif.ZJRDATE.toString("DD/MM/YEAR")
			//if ZSYS="LS"
			//else set record.piece("|",73) = cif.OIT
			set record.piece("|",74) = cif.ISSR
			set record.piece("|",75) = cif.OIN
			set record.piece("|",76) = cif.OISDT.toString("DD/MM/YEAR")
			if ZSYS="LS" do {

				set record.piece("|",70) = $$GET^ZCBSCMS("TDES,ZUTBLISICSD,ISICSD,"_cif.ZISICSD)
				set record.piece("|",73) = $$GET^ZCBSCMS("DES,UTBLID,IDTYP,"_cif.oit)
				set record.piece("|",77) = $$GET^ZCBSCMS("TDES,ZUTBLISICGC,ISICSD,"_cif.ZISICSD_",ISICGC,"_cif.ZISICGC)
				set record.piece("|",78) = $$GET^ZCBSCMS("TDES,ZUTBLISICTS,ISICSD,"_cif.ZISICSD_",ISICGC,"_cif.ZISICGC_",ISICTS,"_cif.ZISICTS)
			}
			else do {
				set record.piece("|",70) = cif.ZISICSD
				set record.piece("|",73) = cif.OIT
				set record.piece("|",77) = cif.ZISICGC
				set record.piece("|",78) = cif.ZISICTS
			}
			if 'cif.pasnum.isNull() do {

				set record.piece("|",79) = $S(Db.isDefined("ZKYCPEP","ID=:ZPASNUM"):1,Db.isDefined("ZKYCPEP","ID=:ZCICID"):1,1:0)
				set record.piece("|",80) = $S(Db.isDefined("ZKYCTRR","ID=:ZPASNUM"):1,Db.isDefined("ZKYCTRR","ID=:ZCICID"):1,1:0)

			}
			else do {
				set record.piece("|",79) = ""
				set record.piece("|",80) = ""
			}


			set sendFLG=1
			set recordCount=0
			set ztmp=record


		}

	}

	if ER quit RM

	set output=""
	set output=sendFLG_"|"_ztmp
	set header.piece("|",7) = recordCount
	set output=header_"|"_output

	quit output

public LOGERR(Error error)

	type String ERRMSG = ""

	set ERRMSG = error.description
	do LOG^UTLEXC($T(+0), "*", , "*", "", ERRMSG)
	quit

public CUSTEXP(String input)
	/*  Customer exposure by CIF #  */
	/* Created By Ravipong Chumsai Na Ayuthaya 21/09/11 */
	//w $$CUSTEXP^ZCAPCIF("||||||||||7495|D|")
	do SYSVAR^SCADRV0()
	new ZDLACD
	type public Number ER = 0
	type public String output,RM
	set (RM,output) = ""
	type Number ACN = "", CNT = 0,countLn=0,countDep=0,Dbal="",DStat=""
	set (LnColl,LnGtDue,LnBal,LnCrlmt,LnPrin,LnAcr,LnDelPeriod,LnStat,LnWflag,LnTdrFlags,LnLegStat,CollList,Dbal,zmktcdList,Dtype,Dacr,LnSub,DBalAV,LGrp,DGrp,LnBALAVAIL,LnDLA) = ""
	set ZDLACD = ""
	set DepList =""
	set LnList = ""
	set CollList=""
	set header = input.piece("|",1,10)				// Common header - first 10 pieces.
	set ACN = input.piece("|",11)
	set InqType = input.piece("|",12)
	if (InqType'="D"),(InqType'="L") set ER=1,RM = "Invalid Inquiry Type('D' or 'L')" quit RM
	if 'Db.isDefined("CIF","ACN=:ACN") set ER=1,RM = "Invalid Customer Number" quit RM
	set DepCount=0
	set LnCount=0

	type ResultSet rel = Db.select("CID","RELCIF","ACN=:ACN")
	while rel.next() do {
		set CID = rel.getCol("CID")
		type ResultSet rs = Db.select("CLS","ACN","CID=:CID")
		while rs.next() do {
			set CLS = rs.getCol("CLS")
			if (CLS="L") do {
				type RecordLN l = Db.getRecord("LN",CID)
				//if l.ccl'="" quit
				//if l.type=8011 quit
				set LnCount=LnCount+1

				//set outputLN.piece(1,"|")= outputLN.piece(1,"|")
				set outputLN.piece(2,"|")= outputLN.piece(2,"|")_","_l.subt
				set outputLN.piece(3,"|")= outputLN.piece(3,"|")_","_l.zmktcd
				set outputLN.piece(4,"|")= outputLN.piece(4,"|")_","_CID

				if l.cpf=1 set outputLN.piece(5,"|")= outputLN.piece(5,"|")_",0"
				else set outputLN.piece(5,"|")= outputLN.piece(5,"|")_","_l.bal

				set outputLN.piece(6,"|")= outputLN.piece(6,"|")_","_l.Crlmt
				set outputLN.piece(7,"|")= outputLN.piece(7,"|")_","_($S(l.pcm=15:l.pmtpi,l.pcm=2:l.fpa,l.pcm=1:l.fpa+l.fia,l.pcm=14:l.PMTPI,1:"N/A"))
				set outputLN.piece(8,"|")= outputLN.piece(8,"|")_","_l.gtdue
				set outputLN.piece(9,"|")= outputLN.piece(9,"|")_","_l.acr
				set outputLN.piece(10,"|")= outputLN.piece(10,"|")_","_(l.pmtdel+1)
				set outputLN.piece(11,"|")= outputLN.piece(11,"|")_","_l.stat
				set outputLN.piece(12,"|")= outputLN.piece(12,"|")_","_($S(l.zfwostat=1:"Y",l.zfwostat=0:"N",1:"N/A"))
				set outputLN.piece(13,"|")= outputLN.piece(13,"|")_","_($S(l.zresflg=1:"Y",l.zresflg=0:"N",1:"N/A"))
				set outputLN.piece(14,"|")= outputLN.piece(14,"|")_","_l.zlegf
				set outputLN.piece(15,"|")= outputLN.piece(15,"|")_","_l.balavail

				set ZDLACD = $$GET^ZCBSCMS("ZDLACD,ZUTBLMKTCD,GRP,"_l.grp_",SUBT,"_l.subt_",CODE,"_l.zmktcd)

				set outputLN.piece(16,"|")= outputLN.piece(16,"|")_","_ZDLACD

				//Phase II

				set outputLN.piece(17,"|")= outputLN.piece(17,"|")_","_l.grp
				set outputLN.piece(18,"|")= outputLN.piece(18,"|")_","_l.type

				type String loanTypCode,comCode
				set (loanTypCode,comCode)=""

				type ResultSet lntyp = Db.select("CODE,COMMIT","ZUTBLLNTYP","TYP=:l.type AND SUBT=:l.subt")
				if lntyp.next() do {
					set loanTypCode=lntyp.getCol(1)
					if lntyp.getCol(2)=1 set comCode="COM"

				}

				set outputLN.piece(19,"|")= outputLN.piece(19,"|")_","_loanTypCode
				set outputLN.piece(20,"|")= outputLN.piece(20,"|")_","_comCode
				set outputLN.piece(21,"|")= outputLN.piece(21,"|")_","_l.index
				set outputLN.piece(22,"|")= outputLN.piece(22,"|")_","_l.irn

				type Number RATE, RRATE, SPREAD, SRATE, URATE ,ZSPREAD
				type String PAR()
				set PAR("INDEX") = l.index
				do CTLCID^UINDX(, %SystemDate, l.balint, .PAR()) quit:ER

				set ZSPREAD=l.irn-RATE
				if ZRATE>0 set ZSIGN="+"
				else set ZSIGN="-"



				set outputLN.piece(23,"|")= outputLN.piece(23,"|")_","_ZSPREAD
				set outputLN.piece(24,"|")= outputLN.piece(24,"|")_","_ZSIGN
				set outputLN.piece(25,"|")= outputLN.piece(25,"|")_","_l.MDT
				set outputLN.piece(26,"|")= outputLN.piece(26,"|")_","_l.ZARRPUR






			}

			if (CLS="D") do {

				if (CID'<90000000000),(CID'>99999999999) quit
				type RecordDEP d = Db.getRecord("DEP",CID)
				set DepCount=DepCount+1
				if d.zcheckod'=1 do {


					set DepList = DepList_","_CID
					if d.zbal.isNull() set Dbal = Dbal_",0"
					else set Dbal = Dbal_","_d.zbal
					if d.zbalavl.isNull() set DBalAV = DBalAV_",0"
					else set DBalAV = DBalAV_","_d.zbalavl
					if d.type.isNull() set Dtype = Dtype_","
					if 'd.type.isNull() set Dtype = Dtype_","_d.type
					set DStat = DStat_","_d.zstatcd
					set Dacr = Dacr_","_(d.negacr+d.negacrun)
				}

				else do {

					set LnCount=LnCount+1
					if d.bal'<0 do {


						set outputLN.piece(2,"|")= outputLN.piece(2,"|")_","
						set outputLN.piece(3,"|")= outputLN.piece(3,"|")_","
						set outputLN.piece(4,"|")= outputLN.piece(4,"|")_","_d.cid
						set outputLN.piece(5,"|")= outputLN.piece(5,"|")_",0"
						set outputLN.piece(6,"|")= outputLN.piece(6,"|")_","_d.odlim
						set outputLN.piece(7,"|")= outputLN.piece(7,"|")_","
						set outputLN.piece(8,"|")= outputLN.piece(8,"|")_","
						set outputLN.piece(9,"|")= outputLN.piece(9,"|")_","_(d.negacr+d.negacrun)
						set outputLN.piece(10,"|")= outputLN.piece(10,"|")_","
						set xstat = d.zstatcd

						set outputLN.piece(11,"|")= outputLN.piece(11,"|")_","_d.zstatcd
						set outputLN.piece(12,"|")= outputLN.piece(12,"|")_","
						set outputLN.piece(13,"|")= outputLN.piece(13,"|")_","
						set outputLN.piece(14,"|")= outputLN.piece(14,"|")_","
						set LGrp=LGrp_","
						set outputLN.piece(15,"|")= outputLN.piece(15,"|")_","_d.zbalavl
						set outputLN.piece(16,"|")= outputLN.piece(16,"|")_",OD"
						set outputLN.piece(26,"|")=""


						set DepList = DepList_","_d.cid
						if d.bal.isNull() set Dbal = Dbal_",0"
						if 'd.bal.isNull() set Dbal = Dbal_","_d.bal
						if d.type.isNull() set Dtype = Dtype_","
						if 'd.type.isNull() set Dtype = Dtype_","_d.type

						set DStat = DStat_","_d.zstatcd
						set Dacr = Dacr_","_(d.negacr+d.negacrun)
						if d.zbalavl.isNull() set DBalAV = DBalAV_",0"
						if 'd.zbalavl.isNull() set DBalAV = DBalAV_","_d.zbalavl

					}

					if d.bal<0 do {
						set LnList = LnList_","_d.cid
						set LnBal = LnBal_","_(-d.bal)
						set LnSub =LnSub_","
						set zmktcdList = zmktcdList_","
						set LnCrlmt=LnCrlmt_","_d.odlim
						set LnPrin = LnPrin_","
						set LnGtDue = LnGtDue_","
						set LnAcr = LnAcr_","_(d.negacr+d.negacrun)
						set LnDelPeriod = LnDelPeriod_","_d.zdelprd
						set LnStat = LnStat_","_d.zstatcd
						set LnWflag = LnWflag_","
						set LnTdrFlags = LnTdrFlags_","
						set LnLegStat = LnLegStat_","
						set LGrp=LGrp_","
						set LnBALAVAIL=LnBALAVAIL_","_d.zbalavl
						set LnDLA=LnDLA_",OD"

						set outputLN.piece(2,"|")= outputLN.piece(2,"|")_","
						set outputLN.piece(3,"|")= outputLN.piece(3,"|")_","
						set outputLN.piece(4,"|")= outputLN.piece(4,"|")_","_d.cid
						set outputLN.piece(5,"|")= outputLN.piece(5,"|")_","_(-d.bal)
						set outputLN.piece(6,"|")= outputLN.piece(6,"|")_","_d.odlim
						set outputLN.piece(7,"|")= outputLN.piece(7,"|")_","
						set outputLN.piece(8,"|")= outputLN.piece(8,"|")_","
						set outputLN.piece(9,"|")= outputLN.piece(9,"|")_","_(d.negacr+d.negacrun)
						set outputLN.piece(10,"|")= outputLN.piece(10,"|")_","_d.zdelprd
						set outputLN.piece(11,"|")= outputLN.piece(11,"|")_","_d.zstatcd
						set outputLN.piece(12,"|")= outputLN.piece(12,"|")_","
						set outputLN.piece(13,"|")= outputLN.piece(13,"|")_","
						set outputLN.piece(14,"|")= outputLN.piece(14,"|")_","
						set LGrp=LGrp_","
						set outputLN.piece(15,"|")= outputLN.piece(15,"|")_","_d.zbalavl
						set outputLN.piece(16,"|")= outputLN.piece(16,"|")_",OD"
						set outputLN.piece(26,"|")=""

						set DepList = DepList_","_d.cid
						set Dbal = Dbal_",0"
						if d.type.isNull() set Dtype = Dtype_","
						if 'd.type.isNull() set Dtype = Dtype_","_d.type
						set DStat = DStat_","_d.zstatcd
						set Dacr = Dacr_","_(d.negacr+d.negacrun)
						if d.zbalavl.isNull() set DBalAV = DBalAV_",0"
						if 'd.zbalavl.isNull() set DBalAV = DBalAV_","_d.zbalavl
					}
				}
			}

		}
	}

	/*
	set LOAN.piece("|",1) = ACN
	set LOAN.piece("|",2) = LnSub
	set LOAN.piece("|",3) = zmktcdList
	set LOAN.piece("|",4) = LnList
	set LOAN.piece("|",5) = LnBal
	set LOAN.piece("|",6) = LnCrlmt
	set LOAN.piece("|",7) = LnPrin
	set LOAN.piece("|",8) = LnGtDue
	set LOAN.piece("|",9) = LnAcr
	set LOAN.piece("|",10) = LnDelPeriod
	set LOAN.piece("|",11) = LnStat
	set LOAN.piece("|",12) = LnWflag
	set LOAN.piece("|",13) = LnTdrFlags
	set LOAN.piece("|",14) = LnLegStat
	set LOAN.piece("|",15) = LnBALAVAIL
	set LOAN.piece("|",16) = LnDLA
	set LOAN.piece("|",26) = ""
	*/
	set DEP.piece("|",1) = ACN
	set DEP.piece("|",2) = Dtype //Number of Dep ACCT
	set DEP.piece("|",3) = DepList
	set DEP.piece("|",4) = Dbal
	set DEP.piece("|",5) = DBalAV
	set DEP.piece("|",6) = DStat

	if InqType="L" set output = LOAN set header.piece("|",7) = outputLN
	if InqType="D" set output = DEP set header.piece("|",7) = DepCount


	quit header_"|"_output


private INSTALL(RecordLN ln)

	// return installment data from EFD based on ln.pcm value

	type String maxfpa = "", maxfpafia = "", maxpmtpi = ""

	type ResultSet rs = Db.select("SQL","EFD","EFDATE>:%SystemDate and CID=:ln.cid")
	while rs.next() do {
		type String fia, fpa, pmtpi, sql

		set sql = rs.getCol("SQL").translate(" ")

		if ln.pcm = 14 ! (ln.pcm = 15) do {
			quit:'sql.contains("PMTPI=")
			set pmtpi = sql.piece("PMTPI=",2).piece(",",1).stripQuotes("'")
			if pmtpi > maxpmtpi set maxpmtpi = pmtpi
		}

		if ln.pcm = 2 ! (ln.pcm = 3) do {
			quit:'sql.contains("FPA=")
			set fpa = sql.piece("FPA=",2).piece(",",1).stripQuotes("'")
			if fpa > maxfpa set maxfpa = fpa
		}

		if ln.pcm = 1 do {
			set fia = "" set fpa = ""
			if sql.contains("FPA=") set fpa = sql.piece("FPA=",2).piece(",",1).stripQuotes("'")
			if sql.contains("FIA=") set fia = sql.piece("FIA=",2).piece(",",1).stripQuotes("'")
			if (fia + fpa) > maxfpa set maxfpa = (fia + fpa)
		}
	}

	if maxpmtpi.isNull() set maxpmtpi = ln.pmtpi
	if maxfpa.isNull() set maxfpa = ln.fpa
	if maxfpafia.isNull() set maxfpafia = (ln.fpa + ln.fia)

	if ln.pcm = 14 ! (ln.pcm = 15) quit +maxpmtpi.roundDec(2)
	if ln.pcm = 2 ! (ln.pcm = 3) quit +maxfpa.roundDec(2)
	if ln.pcm = 1 quit +maxfpafia.roundDec(2)

	quit ""




public GETTIME()
	type String datetime

	set datetime = $H.piece(",",1).toDate().toString("YEAR-MM-DD")
	set datetime = datetime_"T"
	set datetime = datetime_$H.piece(",",2).toTime().toString("24:60:SS")
	quit datetime

public INSTALLMENT(INPUT)

	type DATE zmdt
	set INPUT = INPUT.piece("|",11)
	// Get rid of " "
	set INPUT = INPUT.translate("""","")
	// Convert Calendar to jurion date
	set $P(INPUT,",",9) = $$FDAT^%ZM($P(INPUT,",",9),"DD/MM/YEAR")
	set $P(INPUT,",",18) = $$FDAT^%ZM($P(INPUT,",",18),"DD/MM/YEAR")
	set return=""
	set output=""
	set output=$$^ZRPC8001(.return,1,INPUT)
	set zmdt = return.piece("|",2)
	set return.piece("|",2) = zmdt.toString("DD/MM/YEAR")
	quit return

public PREAPP(INPUT)


	new ER
	type String output
	set INPUT = INPUT.piece("|",11)
	set %TOKEN="5Cn"
	do SYSVAR^SCADRV0()
	do INIT^SCADRV
	set %UID=1
	set output=""
	set return = ""

	do {

		catch error {
			set ER = 1
			//set RM = error.get()
			set RM = error.description
		}
		set output=$$^MRPC014(.return,2,"",-1,"","","",INPUT)

	}

	//if 'RM.isNull() set output=RM.get()
	if ER.get() set output=RM.get()
	else set output="Account Approved"

	quit output

ADDRFLG(input)

	new ER
	set ER=0
	set zheader		= input.piece("|",1,10)
	set AcctId 		= input.piece("|",11)
	set Comment  		= input.piece("|",12)
	set TransLocation	= input.piece("|",13)
	set UserId 		= input.piece("|",14)

	if 'Db.isDefined("ACN","CID=:AcctId") set ER=1 quit zheader_"|0|"
	if Db.isDefined("RFLG","CID=:AcctId,RFLG='ZDBM'") quit zheader_"|1|"

	type RecordRFLG res=Class.new("RecordRFLG")

	set res.cid	= AcctId
	set res.exdt	= ""
	set res.jdt	= $P($H,",",1)
	set res.rflg	= "ZDBM"
	set res.stdt	= %SystemDate
	set res.TCMT	= Comment
	set res.tim	= $P($H,",",2)
	set res.tlo	= TransLocation
	set res.uid	= UserId

	do res.save()



	if ER quit zheader_"|0|"
	quit zheader_"|1"

REMRFLG(input)


	//set TLO = $$TLO^UTLO

	set ZDBM = "ZDBM"
	set zheader	= input.piece("|",1,10)
	set ZCID	= input.piece("|",11)

	if 'Db.isDefined("RFLG","CID=:ZCID,RFLG=:ZDBM") set ER=1 quit zheader_"|0|"
	type ResultSet rs = Db.select("CID","RFLG","CID=:ZCID AND RFLG=:ZDBM")
	while rs.next() do {
		set ZCID = rs.getCol(1)
	}

	do Db.delete("RFLG","CID=:ZCID AND RFLG=:ZDBM")




	if ER quit zheader_"|0|"
	quit zheader_"|1|"

ZLOANCRE(input)
	//w $$ZLOANCRE^ZCAPCIF(INPUT)
	set RET = ""
	set zheader	= input.piece("|",1,10)
	set INPUT  	= input.piece("|",11)



	new EXT
	set EXT=$P(INPUT,"LN.ACN=",2)
	set ACN=$P(EXT,",",1)
	if $E(ACN)="'" set ACN=$E(ACN,2,$L(ACN)-1)

	new EXT
	set EXT=$P(INPUT,"LN.BOO=",2)
	set BOO=$P(EXT,",",1)
	if $E(BOO)="'" set BOO=$E(BOO,2,$L(BOO)-1)

	else  set BOO=Db.getOneRow("BRCD","SCAU","%UserID")

	new EXT
	set EXT=$P(INPUT,"LN.TYPE=",2)
	set TYPE=$P(EXT,",",1)
	if $E(TYPE)="'" set TYPE=$E(TYPE,2,$L(TYPE)-1)

	new EXT
	set EXT=INPUT.piece("LN.CRCD=",2)
	set CRCD=EXT.piece(",",1)
	if $E(CRCD)="'" set BOO=$E(CRCD,2,$L(CRCD)-1)

	set result=$$^ZMRPC044(.RET,1,TYPE,CRCD,INPUT,ACN,BOO)


	if result.isNull() set output=RET
	else do {
		set RETURN=$$LV2V^MSG(result,.result)
		set output = result(5)
	}

	/*
	if $G(ER) quit zheader_"|"_$G(RM)
	set output=RET 
	*/
	quit zheader_"|"_output_"|"

public LOANCRE(String input)

	/* Create Loan Account */

	//do SYSVAR^SCADRV0()
	//do INIT^SCADRV

	//set TLO=$$TLO^UTLO
	set %UID=1
	if $O(^ZMKLOG("LNCRE","PROC",""))="" set ZMKKEY=1
	else set ZMKKEY=$O(^ZMKLOG("LNCRE","PROC",""),-1)+1
	set ^ZMKLOG("LNCRE","PROC",ZMKKEY)=input
	type public Number ER,EFDER,RFLGER
	set (ER,EFDER,RFLGER) = 0
	type public String RM,EFDRM,RFLGRM
	set (RM,EFDRM,RFLGRM) = ""
	type String custName, custNum, custType, header, inp, inqType, output, reqID, searchCond, typeValue ,zpmtpi,zfia,zfpa,output
	type String ARR(), CRCD, ODT, respCode = "0000", respDesc = "", RETURN
	type Number ACN = "", BOO, CNT = 0, count, i, pos, TYPE, ZTYPE
	type Number ZRPMTHD = 0

	set output = ""


	set header = input.piece("|",1,10)	// Common Header
	//set output = ""

	// Build Column=Value input string for MRPC044
	set pos = 11
	set inp = "LN.ACN="_input.piece("|",11), ACN = input.piece("|",11)				// Account
	set ZTYPE = input.piece("|",65)
	// Fac. Code contains keys to ZUTBLPRODCAP.  Go to that table and get account type,
	// subtype, market code, and dealer code and set those into the ln object.
	type String acctype, campaign, prod, prog

	// Wiphak 06/06/2011
	set inp = inp_",LN.TYPE="_input.piece("|",12), TYPE = input.piece("|",12)
	set inp = inp_",LN.SUBT="_input.piece("|",17)
	//set prod = input.piece("|",12)



	//set prog = input.piece("|",17)
	set campaign = input.piece("|",20)
	/*
	set acctype = input.piece("|",12)								// Facility code
	set prod = acctype.piece(",",1)
	set prog = acctype.piece(",",2)
	set campaign = acctype.piece(",",3)
	*/

	type String ZODTYPE
	set ZODTYPE = ""
	/*
	do {
		//if prod.isNull() ! prog.isNull() ! campaign.isNull() set ER = 1, RM = "Facility Code Data is Null" quit
		//type RecordZUTBLPRODCAP prodcap = Db.getRecord("ZUTBLPRODCAP","MPROD=:prod, PPROG=:prog, PCAMPAIGN=:campaign",1)

		// Wiphak 30/09/2011
		// if 'prodcap.getMode() set ER = 1, RM = "Facility Code not defined in ZUTBLPRODCAP table" quit
		//if 'prodcap.getMode() set ER = 1, RM = "MPRCD:"_prod_",PROG:"_prog_",CAMPAIGN:"_campaign_" not defined in ZUTBLPRODCAP table" quit

		set inp = inp_",LN.TYPE="_prodcap.type, TYPE = prodcap.type
		set inp = inp_",LN.SUBT="_prodcap.subt
		//set inp = inp_",LN.ZMKTCD="_prodcap.zmktcd
		//set inp = inp_",LN.ZDLRCD="_prodcap.zdlrcd
		//set ZTYPE = prodcap.ztype	// ZTYPE: 1-Financing, 2-Committment, 3-Committment (discount), 4-OD
		//set ZODTYPE = prodcap.odtyp
	}
	*/
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_output)

	type Number ODCID
	// Overdraft account
	if ZTYPE = 4 do {
		type Number cbCount, cbPos, mtCount, pos, SEQ
		set mtCount 	= input.piece("|",49)		// multi tier row count
		set cbPos 	= 50 + (mtCount * 8)		// co-borrower position
		set cbCount 	= input.piece("|",cbPos)	// co-borower count
		set pos 	= cbPos + (cbCount * 10)	// first position after co-borrower information
		// set ODCID 	= +input.piece("|", pos + 3)	// ovefdraft account

		set ODCID 	= +input.piece("|",43)	// ovefdraft account
		if ODCID=0 set ER = 1,RM="OD Account is not specified" quit
		if 'Db.isDefined("DEP","CID=:ODCID") set ER=1,RM="Invalid OD Account: "_ODCID quit

		set SEQ 	= ^ZODTIER(ODCID,"").order(-1) + 1	// get next sequence
		type RecordZODTIER zodtier 	= Db.getRecord("ZODTIER","CID=:ODCID, SEQ=:SEQ",1)
		//set zodtier.active = 1
		type RecordDEP zoddep	= Db.getRecord("DEP","CID=:ODCID", 1)
		do zoddep.setAuditFlag(1)
		if zoddep.zstatcd=4 set ER=1,RM="OD Account closed" quit
		do ZTYPE4(.zodtier, zoddep)	// Create ZODTIER entry and update the DEP overdraft account
		if 'ZODTYPE.isNull() set zodtier.odtyp = ZODTYPE

		do zoddep.save()
		if ER do { quit
			set RM=RM.get()
			if RM.isNull() set RM="Save DEP error"
		}

		do zodtier.save()
		if ER do { quit
			set RM=RM.get()
			if RM.isNull() set RM="Save OD Tier error"
		}

	}

	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_output)

	if ZTYPE = 4 quit (header_"|"_$$GETTIME()_"|0||0||"_ODCID)

	//set inp = inp_",LN.ZMKTCD="_input.piece("|",12)						// Facility Code


	set inp = inp_",LN.BOO="_input.piece("|",13), BOO = input.piece("|",13)
	set inp = inp_",LN.ZRESUNIT="_input.piece("|",14)		// Branch of Ownership
	//set inp = inp_",LN.TYPE="_input.piece("|",17), TYPE = input.piece("|",17)			// Product type
	//set inp = inp_",LN.ODT="_input.piece("|",15).toDate("DD/MM/YEAR"), ODT = input.piece("|",15).toDate("DD/MM/YEAR")	// Open date

	set ODT = input.piece("|",15)
	if ODT.isNull() set ER=1,RM="Missing Variable : ODT"
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|"_output)
	set ODT = $$FDAT^%ZM(ODT,"DD/MM/YEAR")
	set inp = inp_",LN.ODT="_ODT
	//set inp = inp_",LN.ZREQAMT="_input.piece("|",16)						// amount requested
	set inp = inp_",LN.CRCD="_input.piece("|",18), CRCD = input.piece("|",18)			// Currency code						// Purpose code

	//if ZTYPE = 1 set inp = inp_",LN.ZPERCONS="_input.piece("|",19)					// Purpose code
	set inp = inp_",LN.ZARRPUR="_input.piece("|",19)
	//set inp = inp_",LN.ZDLRCD="_input.piece("|",20)						// Dealer Code
	set inp = inp_",LN.ZACCOID="_input.piece("|",21)						// User
	set inp = inp_",LN.TRM="_input.piece("|",22,23).translate("|")
	//set inp = inp_",LN.ONP="_input.piece("|",22)
	//set inp = inp_",LN.PMTPI="_input.piece("|",24)						// P&I
	//set inp = inp_",LN.LPDTAMT="_input.piece("|",25)						// Last payment amount
	// hello

	type Number ZPMTAMT
	type String ZCOLLREQ
	// set ZPMTAMT = input.piece("|",24)
	set ZCOLLREQ = input.piece("|",27)
	// Grace period fields
	type String gp = input.piece("|",26)								// Grace per. method
	type String gpTerm = input.piece("|",28)							// Grace per. method
	if gp = "I" set gpTerm = ""
	if gp = "E" set gpTerm = +gpTerm

	// Wiphak
	// update these fields after loan created, since we need PCM from MRPC
	// if gp = "E" set inp = inp_",LN.PCM=3,LN.FPA=0,LN.PMTPI=,LN.FIA="  //,LN.EFD="_(ODT + input.piece(pos+2) + 1)

	type String profit = input.piece("|",30)	// to be used later in this process		// interest rate
	//if profit = input.piece("|",51) set inp = inp_",LN="

	//set inp = inp_",LN.ZPERCONS="_input.piece("|",32)
	//set inp = inp_",LN.ZPERCONS="_input.piece("|",32)


	set autoDebit = input.piece("|",40)				// auto debit account
	set autoDebit = autoDebit.trim()
	if ZTYPE = 1 do {
		type String ZCOLRST
		set ZCOLLREQ=ZCOLLREQ.trim()
		set ZCOLRST=""
		if ZCOLLREQ=1 set ZCOLRST="000000"
		if ZCOLLREQ=0 set ZCOLRST="286082"

		//set inp = inp_",LN.ZSP="_input.piece("|",31)							// Selling price
		//set inp = inp_",LN.ZSELRATE="_(100*input.piece("|",32))
		set inp = inp_",LN.ZCOLLREQ="_ZCOLRST

		if 'autoDebit.isNull() do {
			set autoDebit=+autoDebit
			if 'Db.isDefined("DEP","CID=:autoDebit") set ER=1,RM="Invalid auto debit a/c: "_autoDebit quit
		}
	}
	if ER.get() quit (header_"|"_$$GETTIME()_"|0||1404|"_RM.get()_"|"_output)
	if ZTYPE = 2 ! (ZTYPE = 3) set inp = inp_",ZRECBY="_input.piece("|",33)


	set inp = inp_",LN.ZAPPRVCD="_input.piece("|",34)

	set inp = inp_",LN.MDT="_input.piece("|",37).toDate("DD/MM/YEAR")				// Maturity date

	if ZTYPE = 1 set inp = inp_",LN.DFP="_input.piece("|",38).toDate("DD/MM/YEAR")

	type String ZCALDOM
	type Number dom = input.piece("|",39)								// Payment frequency




	set agentCode = input.piece("|",41)				// agent code
	set empCode = input.piece("|",42)				// employee code
	set depAcct = input.piece("|",43)				// deposit overdraft account
	do WRLOG^ZNUTIL("LV2.02 ER:"_ER_" RM:"_RM,"DEBUG")
	set agentCode = agentCode.trim()
	type String ZCBSAGEN
	//set ZCBSAGEN = ""
	set ZCBSAGEN = input.piece("|",41)
	//if agentCode '= "" do {
		//do WRLOG^ZNUTIL("LV2.03 ZCBSAGEN:"_ZCBSAGEN_" agentCode:"_agentCode_" ACN:"_ACN,"DEBUG")
		//type ResultSet zrsagent = Db.select("AGENT","AGENT","ZCPNAME=:agentCode")
		//if zrsagent.next() set ZCBSAGEN = zrsagent.getCol("AGENT")
		//do WRLOG^ZNUTIL("LV2.04 ZCBSAGEN:"_ZCBSAGEN,"DEBUG")
	//}
	//do WRLOG^ZNUTIL("LV2.05 autoDebit:"_autoDebit,"DEBUG")
	set autoDebit=autoDebit.trim()
	//do WRLOG^ZNUTIL("LV2.1 ER:"_ER_" RM:"_RM,"DEBUG")
	if autoDebit'="" do {
		set inp = inp_",LN.AUPTCID="_autoDebit
		set inp = inp_",LN.ALPDUE=1"
	}
	set inp = inp_",LN.ZAGENT="_ZCBSAGEN
	set inp = inp_",LN.ZPROJCODE="_empCode


	if 'ZCBSAGEN.isNull() set ZRPMTHD = 1
	if (ZTYPE=1),(autoDebit'=0) set ZRPMTHD = 2



	//do WRLOG^ZNUTIL("LV2.2 ER:"_ER_" RM:"_RM,"DEBUG")

	set DFP = input.piece("|",38).toDate("DD/MM/YEAR")
	set inp = inp_",LN.ZAGNAME="_input.piece("|",51)
	set inp = inp_",LN.AMTREQ="_input.piece("|",52)				// Amount requested
	set inp = inp_",LN.ZISICSD="_input.piece("|",53)
	set inp = inp_",LN.ZISICGC="_input.piece("|",54)
	set inp = inp_",LN.ZISICTS="_input.piece("|",55)
	set inp = inp_",LN.ZPERCONS="_input.piece("|",56)
	set inp = inp_",LN.ZGSBPUR="_input.piece("|",57)
	set inp = inp_",LN.ZMKTCD="_input.piece("|",58)
	set DIST1FRE=input.piece("|",59)
	set prefixDIST =+DIST1FRE
	set ZCALDOM=$E(DIST1FRE,$L(prefixDIST)+1,$L(DIST1FRE))
	set inp = inp_",LN.DIST1FRE="_DIST1FRE
	set inp = inp_",LN.ZMOU="_input.piece("|",60)
	set inp = inp_",LN.ZAGTYPE="_input.piece("|",61)
	set inp = inp_",LN.ZAGSUBT1="_input.piece("|",62)
	set inp = inp_",LN.ZAGSUBT2="_input.piece("|",63)
	set inp = inp_",LN.ZAPPID="_input.piece("|",64)
	set ZODTYPE = input.piece("|",66)
	set inp = inp_",LN.FLAT="_input.piece("|",67)
	set inp = inp_",LN.ZRPAYMETH="_input.piece("|",68)
	set inp = inp_",LN.ZSPLEND="_input.piece("|",69)



	// Wiphak 06/06/2011
	// move down since CID is needed to save to EFD
	// Multi-tiered Information...this data is stored in EFD

	//do WRLOG^ZNUTIL("LV3 ER:"_ER_" RM:"_RM,"DEBUG")
	set count = input.piece("|",70)
	//set pos = 54
	set pos = 71
	// wiphak 06/06/2011

	type String ZSQLCON
	set ZSQLCON = ""								// # of tier rows to process

	type String index,sql, seq, spread, tier, tprofit, var, pmtpi, fpa,fia
	type Date ZEFD


	set tier = input.piece("|",pos)								// Tier sequence number
	//set tprofit = input.piece("|",pos+1)							// profit (rate)
	set index = input.piece("|",pos+1)							// Interest index
	set spread = input.piece("|",pos+2)							// Rate spread
	set var = input.piece("|",pos+3)
	set ZTMONTH = +input.piece("|",pos+4)

	set pos = pos+(count*5)

	set count = input.piece("|",pos)

	set tier = input.piece("|",pos+1)
	set pmtpi = input.piece("|",pos+2)
	set fpa = input.piece("|",pos+3)
	set fia = input.piece("|",pos+4)
	set ZTMONTH = input.piece("|",pos+5)
	set pcm = input.piece("|",pos+6)

	if var="+" set var=""
	set ZSQLCON = ",LN.INDEX="_index_",LN.INTSPR="_var_spread
	set inp = inp_",LN.PMTPI="_pmtpi_",LN.FPA="_fpa_",LN.FIA="_fia_",LN.PCM="_pcm

	set inp = inp_ZSQLCON
	// Co-borrower Information
	set pos = pos+(count*6)
	set pos = pos+1


	set count = input.piece("|",pos), pos = pos + 1
	set inp = inp_",RELCIF1.ACN="_ACN_",RELCIF1.ROLE=1"				// Set up primary owner
	type Number coBorowList()
	set coBorowList(1)=ACN
	type Number ZCNTINX
	set ZCNTINX = 2
	type Boolean coBorrower = false
	for i = 1:1:count do {
		type String coACN, divPct, guarAmt, guarPct, mail, nameConj, profitPct, role, relOwner, sharePct

		set role = input.piece("|",pos), pos = pos + 1			// RELCIF.ROLE
		set relOwner = input.piece("|",pos), pos = pos + 1		// LN.ACNRELC
		set mail = input.piece("|",pos), pos = pos + 1
		set guarAmt = input.piece("|",pos), pos = pos + 1
		set guarPct = input.piece("|",pos), pos = pos + 1
		set sharePct = input.piece("|",pos), pos = pos + 1
		set profitPct = input.piece("|",pos), pos = pos + 1
		set divPct = input.piece("|",pos), pos = pos + 1
		set coACN = input.piece("|",pos), pos = pos + 1			// co-borrower
		set nameConj = input.piece("|",pos), pos = pos + 1		// name conjunction (not used)

		quit:coACN.isNull()
		set coBorowList(i+1)=coACN

		if role="GO" quit

		set coBorrower = true

		quit:coACN.isNull()

		set inp = inp_",RELCIF"_ZCNTINX_".ROLE=2"
		set inp = inp_",RELCIF"_ZCNTINX_".ACN="_coACN
		set ZCNTINX = ZCNTINX + 1
		set coBorrower 	= true
	}

	if 'coBorrower set inp = inp_",LN.ACNRELC=1"
	else  set inp = inp_",LN.ACNRELC=2"


	set RETURN = ""
	//Loop from ln.acn+#of coborrow
	set count=count+1

	for i = 1:1:count do {
		type String accountTitle
		set zCoAcn=coBorowList(i)
		if 'Db.isDefined("CIF","ACN=:zCoAcn") quit
		type RecordCIF cif = Db.getRecord("CIF","ACN=:zCoAcn")
		set ZPER=cif.PERS
		set ZKTB=cif.ZKTBCCODE

		set zengflg=0
		if 'ZKTB.isNull() do {
			type ResultSet rs = Db.select("ENGFLG","ZUTBLKTBCUST","KTBCCODE=:ZKTB")
			if rs.next() set zengflg=rs.getCol(1)
		}
		if (ZPER=0) {
			if (zengflg) do {
				set title=cif.ZETITLE_" "
			}
			else do {
				set title=cif.ZTITLE_" "
			}
		}
		else do {
			if (zengflg) do {
				set title=""
			}
			else do {
				set title=""
			}

		}
		set suffix=""
		// title  null  title=""  title = title+" "
		if i>1 do {
			type ResultSet rssuf = Db.select("SFX","RELCODE","REL=2 AND ROLE=1")
			if rssuf.next() set suffix=rssuf.getCol(1)_" "

		}
		// suffix != null  suffix +" "  null  ""
		if 'cif.nam.isNull() do {
			set accountTitle = suffix_title_cif.nam
			if (accountTitle.length() > 40) set accountTitle = accountTitle.extract(1,40)
			set inp=inp_",LN.TITLE"_i_"="_accountTitle
		}
	}


	//Ravipong 2012/03/25

	new zmktmp,zpoint	//Remove null value from inp
	type String DATAIN()
	do STR2ARR^UTLMRPC(inp,.DATAIN)
	//set zpoint=$O(DATAIN(""))
	//while '$O(DATAIN(zpoint)).isNull() do {
		//	if $D(DATAIN(zpoint)), kill DATAIN(zpoint)
		//	set zpoint=$O(DATAIN(zpoint))
	//}
	if $O(^ZMKLOG("LNCRE","INP",""))="" set ZMKKEY=1
	else set ZMKKEY=$O(^ZMKLOG("LNCRE","INP",""),-1)+1
	set ^ZMKLOG("LNCRE","INP",ZMKKEY)=inp
	set inp=$$ARR2STR^UTLMRPC("",.DATAIN,"",",")

	do {

		catch loanError {
			set ER = 1
			set RM = loanError.description
		}

		// this is needed to get past the after_insert trigger
		set inp = inp_",LN.ZDACTYP="""",LN.ZSIGNED=1"
		//set inp = inp_",LN.ZSIGNED='1'"

		kill EFD

		set RM = $$^MRPC044(.RETURN, 1, TYPE, CRCD, inp, ACN, BOO)
		if $D(verrors) do { quit
			set ER=1
			set RM="Create Loan Error"
			new ZVESEQ
			set ZVESEQ=""
			set ZVESEQ=$O(verrors(ZVESEQ))
			if $D(verrors(ZVESEQ,1)) do {
				new ZXBERR
				set ZXBERR=verrors(ZVESEQ,1)
				set RM=ZXBERR.piece("|",8)
			}
			kill verrors
		}
		new ZARER,XX,ZRM1
		set ZRM1 = ""
		set XX = $$LV2V^MSG(RM,.ZARER(),1)
		if $D(ZARER(5)) set ZRM1 = ZARER(5)
		if 'ZRM1.isNull() set RM = ZRM1
	}

	// Error occured.  Set error data into messate and quit
	//do WRLOG^ZNUTIL("LV5 ER:"_ER_" RM:"_RM,"DEBUG")
	if 'RM.isNull() set ER=1 quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|")
	if ER  quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|")

	set RETURN = $$LV2V^MSG(RETURN,.ARR(),1)
	type Number CID = +ARR(1).get().toNumber()

	type String ZSYSPCM
	//type RecordLN zlncid=Db.getRecord("LN","CID=:CID")
	//set ZSYSPCM = zlncid.pcm
	//set ZSYSPCM=input.piece("|",67)

	// Wiphak 06/06/2011  move to here
	// Multi-tiered Information...this data is stored in EFD

	type Number ZSUMMONT
	set ZSUMMONT = 0
	set ZPMTAMT=""
	new ZFPMTDT
	set ZFPMTDT=""

	// type Flood
	type Number ZFLDFLG,ngpTerm
	set ZFLDFLG = 0

	// new gp term for the second tier

	set count = input.piece("|",70)
	set pos = 71										// # of tier rows to process
	set ngpTerm = 0
	//Skip first tier

	do {
		catch efdError {
			set EFDER = 1
			set EFDRM = efdError.description

		}

		type Date ZFPMTDT,EFD,NEFD

		if count>1 do {

			for i = 1:1:count do {

				type String index, pmtpi, sql, seq, spread, tier, tprofit, var, fpa, fia
				type Date ZSAVEEFD
				type String ZSTRUPD
				type Number ZTMONTH,ZSKIPFLG

				set tier = input.piece("|",pos),pos = pos+1								// Tier sequence number
				set index = input.piece("|",pos),pos = pos+1							// Interest index
				set spread = input.piece("|",pos),pos = pos+1							// Rate spread
				set var = input.piece("|",pos),pos = pos+1							// Variance (+ or -)
				set ZTMONTH = +input.piece("|",pos),pos = pos+1							// Effective date

				if i = 1 do { quit
					//set ZPMTAMT=pmtpi
					//set ZFPMTDT=DFP
					if ODT.isNull() set RM="Invalid Null Account Opened Date",ER=1 quit
					if ODT=-1 set RM="Invalid Account Opened Date:"_input.piece("|",38),ER=1 quit
					//if ZTMONTH-1=0 set NEFD=$$NJD^UFRE(ODT,"MA")
					set NEFD=$$NJD^UFRE(ODT,ZTMONTH_"MA")
					//set EFD=ZFPMTDT
				}
				if i > 1 do {
					set EFD=NEFD
					//if ZTMONTH-1=0 set NEFD=$$NJD^UFRE(ODT,"MA")
					set NEFD=$$NJD^UFRE(EFD,ZTMONTH_"MA")
					//set EFD = $$NJD^UFRE(EFD,ZTMONTH_ZCALDOM)

				}

				if var="+" set var=""

				//set spread=spread*100
				set sql = "UPDATE LN SET "

				set sql = sql_"INDEX='"_index_"'"
				set sql = sql_",INTSPR="_var_spread
				set sql = sql_" WHERE CID="_CID
				write !,"EFD:"_EFD_" SQL:"_sql

				set seq = $$GETSEQ^SQLDD()
				type RecordEFD efd = Class.new("RecordEFD")
				set efd.efdate = EFD
				set efd.buff = seq

				#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Global
				set efd.seq = ^EFD(EFD,seq,"").order(-1) + 1

				set efd.sql = sql
				set efd.table = "LN"
				set efd.tjd = %SystemDate
				set efd.akey = CID

				do efd.save()
				//set pos = pos+5
			}
		}
		else set pos=pos+5
		//set pos = pos+(count*5)
		set count = input.piece("|",pos)
		set pos=pos+1
		type Date ZFPMTDT,EFD,NEFD
		if count>1 do {

			for i = 1:1:count do {

				type String index, pmtpi, sql, seq, spread, tier, tprofit, var, fpa, fia
				type Date ZSAVEEFD
				type String ZSTRUPD
				type Number ZTMONTH,ZSKIPFLG,pcm


				set tier = input.piece("|",pos),pos = pos+1
				set pmtpi = input.piece("|",pos),pos = pos+1
				set fpa = input.piece("|",pos),pos = pos+1
				set fia = input.piece("|",pos),pos = pos+1
				set ZTMONTH = input.piece("|",pos),pos = pos+1
				set pcm = input.piece("|",pos),pos = pos+1

				if i = 1 do { quit

					//set ZPMTAMT=pmtpi
					//set ZFPMTDT=DFP
					if DFP.isNull() set RM="Invalid Null First Payment Date",ER=1 quit
					if DFP=-1 set RM="Invalid First Payment Date:"_input.piece("|",38),ER=1 quit
					if ZTMONTH-1=0 set NEFD=($$NJD^UFRE(DFP,1_ZCALDOM))+1
					else set NEFD=($$NJD^UFRE(DFP,(ZTMONTH-1)_ZCALDOM))+1
					//set EFD=ZFPMTDT

				}
				if i > 1 do {
					set EFD=NEFD
					//if ZTMONTH-1=0 set NEFD=$$NJD^UFRE(EFD,ZCALDOM)
					set NEFD=($$NJD^UFRE(EFD,ZTMONTH_ZCALDOM))+1
					//set NEFD = $$NJD^UFRE(EFD,ZTMONTH_ZCALDOM)
					//set EFD=ZFPMTDT
				}

				//if var="+" set var=""
				//set spread=spread*100

				set sql = "UPDATE LN SET "
				set sql = sql_"PCM="_pcm
				set sql = sql_",FPA="_fpa
				set sql = sql_",FIA="_fia
				set sql = sql_",PMTPI="_pmtpi
				set sql = sql_" WHERE CID="_CID
				write !,"EFD:"_EFD_" SQL:"_sql
				set seq = $$GETSEQ^SQLDD()
				type RecordEFD efd = Class.new("RecordEFD")
				set efd.efdate = EFD

				set efd.buff = seq
				#ACCEPT Date=04/18/2011; Pgm=Pete Chenard; CR=unknown; Group=Global
				set efd.seq = ^EFD(EFD,seq,"").order(-1) + 1
				set efd.sql = sql
				set efd.table = "LN"
				set efd.tjd = %SystemDate
				set efd.akey = CID
				do efd.save()
			}
		}

	}

	if 'EFDRM.isNull() quit (header_"|"_$$GETTIME()_"|0||2|"_EFDRM_"|"_CID)
	if EFDER quit (header_"|"_$$GETTIME()_"|0||2|"_RM_"|"_CID)

	type String zinp,zrlfg
	set zinp.piece("|",11)=CID
	set zinp.piece("|",12)=""
	set zinp.piece("|",13)=""
	set zinp.piece("|",14)=""

	//Add Restriction
	set zrlfg=$$ADDRFLG^ZCAPCIF(zinp)
	if (zrlfg.piece("|",11))=0 quit (header_"|"_$$GETTIME()_"|0||3|Can't Add Restriction|"_CID)


	if 'RM.isNull() quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|")
	if ER quit (header_"|"_$$GETTIME()_"|0||1404|"_RM_"|")



	quit (header_"|"_$$GETTIME()_"|0||0||"_CID)

HHINQ(input)

	//w $$HHINQ^ZCAPCIF("||||||||||1|1")
	type public Number ER = 0
	type public String RM = ""

	set header 		= input.piece("|",1,10)
	set headACN 		= input.piece("|",11)
	set hhTYP		= input.piece("|",12)

	set ztmp	= ""
	set output 	= ""
	set i=0
	set memCNT=0

	if headACN.isNull() set ER = 1, RM = "HeadACN Required" quit RM
	if hhTYP.isNull() set ER = 1, RM = "House Hold Type Required" quit RM

	if 'headACN.isNull(),'hhTYP.isNull() do {

		type ResultSet rs = Db.select("MACN","CIFHH0","ACN=:headACN and HHTYP=:hhTYP")
		if 'rs.next() set ER = 1, RM = "Member Not Founded " quit

		while rs.next() do {
			type RecordCIF cif = Db.getRecord("CIF","ACN=:rs.getCol(1)")
			set memCNT=memCNT+12
			set ztmp.piece("|",1) = cif.acn
			set ztmp.piece("|",2) = cif.xname
			set output=output_"|"_ztmp

		}
	}

	if memCNT=0 set memCNT=1
	if ER quit RM

	quit header_"|"_memCNT_"|"_output

VALIDFREQ(input)

	//w $$VALIDFREQ^ZCAPCIF("||||||||||1MAE|01/01/2012")
	set header = input.piece("|",1,10)
	set zfreq  = input.piece("|",11)
	set zdate  = input.piece("|",12)

	type Date RET


	set zdate = $$FDAT^%ZM(zdate,"DD/MM/YEAR")

	set output=$$^MRPC005(.RET,1,zfreq,zdate,"",0)

	if output="" set output=RET.toString("DD/MM/YEAR")



	quit header_"|"_output

	/*
	private CCL(.ZCCL(),ZCID,.ZBAL)
	//new ZBAL
	type RecordLN ln = Db.getRecord("LN","CID=:ZCID")	
	if ln.ccl'="" do {
		type RecordLN master = Db.getRecord("LN","CID=:ln.ccl")
		if master.ccl="" do {
		set ZBAL=ZBAL+ln.bal
		do CCL(.ZCCL(),ZBAL)
		}

	}

	else set ZCCL(ZCID)=+ln.bal

	quit 
	*/

private ZTYPE4(RecordZODTIER zodtier, RecordDEP dep)

	type Number count, i, pos
	// set dep.boo 		= input.piece("|",13)		// branch of ownership

	set zodtier.ctrcdate 	= input.piece("|",15).toDate("DD/MM/YEAR")		// contract date
	// set dep.zlimacr	 	= input.piece("|",16)		// ACR limit

	set dep.crcd 		= input.piece("|",18)		// currency code
	set dep.zarrpur 	= "012001"
	set dep.zpercons 	= input.piece("|",19)		// Purpose
	set dep.zaccoid 	= input.piece("|",21)		// Account id
	//set dep.zsp 		= input.piece("|",31)		//
	//set dep.znegirn 	= input.piece("|",32)		// Negative interest rate
	// set zodtier.zrecby 	= input.piece("|",33)		// Recommended by
	//set zodtier.zapprvcd 	= input.piece("|",34)		// approved date
	//set zodtier.zdaterec 	= input.piece("|",35).toDate("DD/MM/YEAR")		// date recorded
	//set zodtier.zappdt 	= input.piece("|",36).toDate("DD/MM/YEAR")	// app. date
	set zodtier.expdt 	= input.piece("|",37).toDate("DD/MM/YEAR")	// exp. date
	set zodtier.clamt	= +input.piece("|",52)

	type String busType = input.piece("|",45)		// Business type


	// wiphak 3/11/2011
	/*
	set inp = inp_",LN.ZISICSD="_busType.extract(2,4)
	set inp = inp_",LN.ZISICGC="_busType.extract(5)
	set inp = inp_",LN.ZISICTS="_busType.extract(6,8)
	*/
	set dep.zisicsd = busType.extract(2,4)
	set dep.zisicgc = busType.extract(5)
	set dep.zisicts = busType.extract(6,8)



	// set dep.zarrpur 	= input.piece("|",43)		//
	// set dep.odlim 		= input.piece("|",48)		// overdraft limit

	set zodtier.activate = 1



	// Multi-tiered Information...this data is stored in EFD
	set count = input.piece("|",53)
	set pos = 54										// # of tier rows to process
	for i = 1:1:count do {
		type String index, pmtpi, sql, seq, spread, tier, tprofit, var
		type Date EFD

		set tier 	= input.piece("|",pos)		// Tier sequence number
		set tprofit 	= input.piece("|",pos+1)	// profit (rate)
		set index 	= input.piece("|",pos+2)	// Interest index
		set spread 	= input.piece("|",pos+3)	// Rate spread
		set var 	= input.piece("|",pos+4)	// Variance (+ or -)
		set EFD 	= input.piece("|",pos+5)	// Effective date
		set pmtpi 	= input.piece("|",pos+6)	// P&I amount

		set pos = pos + 8
		quit:i>1					// only 1 row for OD account

		if tier '= 1 quit

		// set zodtier.rate  = index
		set zodtier.rate  = "FN0600"
		// set zodtier.irdif = $S(var.isNull():"",var="+":"",var="-":"-",1:"")_spread
		set zodtier.irdif = (tprofit*100)
	}

	// now add co-borrower information to DEP


	quit

IRNCALC(input)
	//w $$IRNCALC^ZCAPCIF("||||||||||CODE=LN1000,DATE=08022009,CRLMT=10000000.00")
	type Date DATE
	type String inp,CODE,PAR(),RM
	type Number CRLMT,FLG,ER

	set ER=0
	set RM=""

	set header 	= input.piece("|",1,10)
	set inp		= input.piece("|",11)
	set CODE  	= $P(inp.piece(",",1),"=",2)
	set DATE  	= $P(inp.piece(",",2),"=",2)
	set DATE	= $$FDAT^%ZM(DATE,"DDMMYEAR")
	set CRLMT 	= $P(inp.piece(",",3),"=",2)

	type RecordLN ln = Class.new("RecordLN")
	set PAR("INDEX")=CODE
	do {
		catch error {
			new ET,RM
			set ET=error.type
			set RM=error.description
			set FROM=error.thrownAt
			//set RM="ZCOLSAVE Crash"
			write !,RM
		}
		do CTL^UINDX(ln,DATE,CRLMT,.PAR)
	}
	if ER=1 set FLG=1
	else set FLG=0
	quit header_"|"_FLG_"|"_RM_"|"_RATE

TEST(coBorowList)

	set inp=""
	for i = 1:1:count do {
		type String accountTitle
		set zCoAcn=coBorowList(i)
		if 'Db.isDefined("CIF","ACN=:zCoAcn") quit
		type RecordCIF cif = Db.getRecord("CIF","ACN=:zCoAcn")
		set ZPER=cif.PERS
		set ZKTB=cif.ZKTBCCODE
		set zengflg=0

		if 'ZKTB.isNull() do {
			type ResultSet rs = Db.select("ENGFLG","ZUTBLKTBCUST","KTBCCODE=:ZKTB")
			if rs.next() set zengflg=rs.getCol(1)
		}
		if (ZPER=0) {
			if (zengflg) do {
				set title=cif.ZETITLE_" "
			}
			else do {
				set title=cif.ZTITLE_" "
			}
		}
		else do {
			if (zengflg) do {
				set title=""
			}
			else do {
				set title=""
			}

		}

		// title  null  title=""  title = title+" "
		type ResultSet rssuf = Db.select("SFX","RELCODE","REL=2 AND ROLE=1")
		if rssuf.next() set suffix=rssuf.getCol(1)_" "
		// suffix != null  suffix +" "  null  ""
		if 'cif.nam.isNull() do {
			set accountTitle = title_cif.nam
			if (accountTitle.length() > 40) set accountTitle = accountTitle.extract(1,40)
			set inp=inp_",LN.TITLE"_i_"="_accountTitle
		}
	}

	quit inp

ZODTIER(inp)
	//w $$ZODTIER^ZCAPCIF("||||||||||83,166,")
	type String header,output
	type Number ZCID,zcount,zCountSeq
	set (zcount,zCountSeq) = 0

	set header              = inp.piece("|",1,10)
	set inp                 = inp.piece("|",11)
	set zcount=($L(inp,","))-1
	set output=""

	for i=1:1:zcount do {
		set ZCID=inp.piece(",",i)
		if ZCID="" quit
		type ResultSet rs = Db.select("SEQ","ZODTIER","CID=:ZCID")
		while rs.next() do {
			type String ztmp
			set ZSEQ=rs.getCol(1)
			set zCountSeq=zCountSeq+1
			type RecordZODTIER zod = Db.getRecord("ZODTIER","CID=:ZCID,SEQ=:ZSEQ")
			set ztmp.piece("|",1)=zod.CID
			set ztmp.piece("|",2)=zod.SEQ
			set ztmp.piece("|",3)=zod.ODTYP
			set ztmp.piece("|",4)=zod.ACTIVATE
			set ztmp.piece("|",5)=zod.ACTIVE
			set ztmp.piece("|",6)=zod.RATE
			set ztmp.piece("|",7)=zod.RATECMP
			set ztmp.piece("|",8)=zod.IRDIF
			set ztmp.piece("|",9)=zod.CLAMT
			set ztmp.piece("|",10)=zod.CTRCDATE
			set ztmp.piece("|",11)=zod.STDT
			set ztmp.piece("|",12)=zod.EXPDT
			set output=output_ztmp_"|"
		}
		
	}

	quit header_"|"_zCountSeq_"|"_output
	